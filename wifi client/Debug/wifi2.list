
wifi2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e84  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08009fc8  08009fc8  00019fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a56c  0800a56c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a56c  0800a56c  0001a56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a574  0800a574  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a574  0800a574  0001a574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a578  0800a578  0001a578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a57c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200001e0  0800a75c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  0800a75c  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010847  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c85  00000000  00000000  00030a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  000336d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00034750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190a5  00000000  00000000  00035698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014763  00000000  00000000  0004e73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096613  00000000  00000000  00062ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f94b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058cc  00000000  00000000  000f9504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08009fac 	.word	0x08009fac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08009fac 	.word	0x08009fac

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bac:	f000 b9ae 	b.w	8000f0c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83e 	bl	8000c38 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	4605      	mov	r5, r0
 8000bcc:	460c      	mov	r4, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	4628      	mov	r0, r5
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	f7ff ff09 	bl	80009ec <__aeabi_dcmplt>
 8000bda:	b928      	cbnz	r0, 8000be8 <__aeabi_d2lz+0x20>
 8000bdc:	4628      	mov	r0, r5
 8000bde:	4621      	mov	r1, r4
 8000be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be4:	f000 b80a 	b.w	8000bfc <__aeabi_d2ulz>
 8000be8:	4628      	mov	r0, r5
 8000bea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bee:	f000 f805 	bl	8000bfc <__aeabi_d2ulz>
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2ulz>:
 8000bfc:	b5d0      	push	{r4, r6, r7, lr}
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <__aeabi_d2ulz+0x34>)
 8000c02:	4606      	mov	r6, r0
 8000c04:	460f      	mov	r7, r1
 8000c06:	f7ff fc7f 	bl	8000508 <__aeabi_dmul>
 8000c0a:	f7ff ff55 	bl	8000ab8 <__aeabi_d2uiz>
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f7ff fc00 	bl	8000414 <__aeabi_ui2d>
 8000c14:	2200      	movs	r2, #0
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <__aeabi_d2ulz+0x38>)
 8000c18:	f7ff fc76 	bl	8000508 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4630      	mov	r0, r6
 8000c22:	4639      	mov	r1, r7
 8000c24:	f7ff fab8 	bl	8000198 <__aeabi_dsub>
 8000c28:	f7ff ff46 	bl	8000ab8 <__aeabi_d2uiz>
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c30:	3df00000 	.word	0x3df00000
 8000c34:	41f00000 	.word	0x41f00000

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	4688      	mov	r8, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14d      	bne.n	8000ce4 <__udivmoddi4+0xac>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d968      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b152      	cbz	r2, 8000c6a <__udivmoddi4+0x32>
 8000c54:	fa01 f302 	lsl.w	r3, r1, r2
 8000c58:	f1c2 0120 	rsb	r1, r2, #32
 8000c5c:	fa20 f101 	lsr.w	r1, r0, r1
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	ea41 0803 	orr.w	r8, r1, r3
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c6e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c72:	fa1f fe8c 	uxth.w	lr, ip
 8000c76:	fb01 8817 	mls	r8, r1, r7, r8
 8000c7a:	fb07 f00e 	mul.w	r0, r7, lr
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c84:	4298      	cmp	r0, r3
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x66>
 8000c88:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000c90:	f080 811e 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c94:	4298      	cmp	r0, r3
 8000c96:	f240 811b 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c9a:	3f02      	subs	r7, #2
 8000c9c:	4463      	add	r3, ip
 8000c9e:	1a1b      	subs	r3, r3, r0
 8000ca0:	fbb3 f0f1 	udiv	r0, r3, r1
 8000ca4:	fb01 3310 	mls	r3, r1, r0, r3
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb2:	45a6      	cmp	lr, r4
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cbe:	f080 8109 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8106 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc8:	4464      	add	r4, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	2100      	movs	r1, #0
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cd6:	b11e      	cbz	r6, 8000ce0 <__udivmoddi4+0xa8>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	40d4      	lsrs	r4, r2
 8000cdc:	e9c6 4300 	strd	r4, r3, [r6]
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	f000 80ee 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cee:	2100      	movs	r1, #0
 8000cf0:	e9c6 0500 	strd	r0, r5, [r6]
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f183 	clz	r1, r3
 8000cfe:	2900      	cmp	r1, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fc 	bhi.w	8000f04 <__udivmoddi4+0x2cc>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb65 0303 	sbc.w	r3, r5, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	4698      	mov	r8, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d0e2      	beq.n	8000ce0 <__udivmoddi4+0xa8>
 8000d1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1e:	e7df      	b.n	8000ce0 <__udivmoddi4+0xa8>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8091 	bne.w	8000e50 <__udivmoddi4+0x218>
 8000d2e:	eba1 000c 	sub.w	r0, r1, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d40:	fb07 0013 	mls	r0, r7, r3, r0
 8000d44:	0c25      	lsrs	r5, r4, #16
 8000d46:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	42a8      	cmp	r0, r5
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0505 	adds.w	r5, ip, r5
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	42a8      	cmp	r0, r5
 8000d5e:	f200 80ce 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a2d      	subs	r5, r5, r0
 8000d66:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d6a:	fb07 5510 	mls	r5, r7, r0, r5
 8000d6e:	fb0e fe00 	mul.w	lr, lr, r0
 8000d72:	b2a4      	uxth	r4, r4
 8000d74:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80b6 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79e      	b.n	8000cd6 <__udivmoddi4+0x9e>
 8000d98:	f1c1 0720 	rsb	r7, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa25 fa07 	lsr.w	sl, r5, r7
 8000daa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dae:	fbba f8f9 	udiv	r8, sl, r9
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	fb09 aa18 	mls	sl, r9, r8, sl
 8000dba:	408d      	lsls	r5, r1
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	431d      	orrs	r5, r3
 8000dc2:	fa00 f301 	lsl.w	r3, r0, r1
 8000dc6:	fb08 f00e 	mul.w	r0, r8, lr
 8000dca:	0c2c      	lsrs	r4, r5, #16
 8000dcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000dd0:	42a0      	cmp	r0, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	42a0      	cmp	r0, r4
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4464      	add	r4, ip
 8000df0:	1a24      	subs	r4, r4, r0
 8000df2:	fbb4 f0f9 	udiv	r0, r4, r9
 8000df6:	fb09 4410 	mls	r4, r9, r0, r4
 8000dfa:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dfe:	b2ad      	uxth	r5, r5
 8000e00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e04:	45a6      	cmp	lr, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	45a6      	cmp	lr, r4
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4464      	add	r4, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9502 	umull	r9, r5, r0, r2
 8000e22:	eba4 040e 	sub.w	r4, r4, lr
 8000e26:	42ac      	cmp	r4, r5
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46ae      	mov	lr, r5
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d069      	beq.n	8000f08 <__udivmoddi4+0x2d0>
 8000e34:	ebb3 0208 	subs.w	r2, r3, r8
 8000e38:	eb64 040e 	sbc.w	r4, r4, lr
 8000e3c:	fa22 f301 	lsr.w	r3, r2, r1
 8000e40:	fa04 f707 	lsl.w	r7, r4, r7
 8000e44:	431f      	orrs	r7, r3
 8000e46:	40cc      	lsrs	r4, r1
 8000e48:	e9c6 7400 	strd	r7, r4, [r6]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0xa8>
 8000e50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e54:	f1c2 0120 	rsb	r1, r2, #32
 8000e58:	fa25 f301 	lsr.w	r3, r5, r1
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa20 f101 	lsr.w	r1, r0, r1
 8000e64:	4095      	lsls	r5, r2
 8000e66:	430d      	orrs	r5, r1
 8000e68:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e6c:	fb07 3311 	mls	r3, r7, r1, r3
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	0c28      	lsrs	r0, r5, #16
 8000e76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e7a:	fb01 f30e 	mul.w	r3, r1, lr
 8000e7e:	4283      	cmp	r3, r0
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0000 	adds.w	r0, ip, r0
 8000e8a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	4283      	cmp	r3, r0
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3902      	subs	r1, #2
 8000e96:	4460      	add	r0, ip
 8000e98:	1ac0      	subs	r0, r0, r3
 8000e9a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e9e:	fb07 0013 	mls	r0, r7, r3, r0
 8000ea2:	b2ad      	uxth	r5, r5
 8000ea4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ea8:	fb03 f00e 	mul.w	r0, r3, lr
 8000eac:	42a8      	cmp	r0, r5
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0505 	adds.w	r5, ip, r5
 8000eb4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	42a8      	cmp	r0, r5
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4465      	add	r5, ip
 8000ec2:	1a28      	subs	r0, r5, r0
 8000ec4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	4631      	mov	r1, r6
 8000ecc:	4630      	mov	r0, r6
 8000ece:	e707      	b.n	8000ce0 <__udivmoddi4+0xa8>
 8000ed0:	462f      	mov	r7, r5
 8000ed2:	e6e4      	b.n	8000c9e <__udivmoddi4+0x66>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f9      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4643      	mov	r3, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4628      	mov	r0, r5
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4641      	mov	r1, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	4464      	add	r4, ip
 8000efa:	3802      	subs	r0, #2
 8000efc:	e747      	b.n	8000d8e <__udivmoddi4+0x156>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4465      	add	r5, ip
 8000f02:	e72f      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000f04:	4608      	mov	r0, r1
 8000f06:	e706      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e6e9      	b.n	8000ce0 <__udivmoddi4+0xa8>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <DWT_Delay_us>:

uint32_t DWT_Delay_Init(void);

// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <DWT_Delay_us+0x48>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f1e:	f003 fad1 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <DWT_Delay_us+0x4c>)
 8000f26:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2a:	0c9b      	lsrs	r3, r3, #18
 8000f2c:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000f38:	bf00      	nop
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <DWT_Delay_us+0x48>)
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	1ad2      	subs	r2, r2, r3
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1acb      	subs	r3, r1, r3
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d3f6      	bcc.n	8000f3a <DWT_Delay_us+0x2a>
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e0001000 	.word	0xe0001000
 8000f5c:	431bde83 	.word	0x431bde83

08000f60 <DHT22_Start>:
#include "DHT22.h"

/*******************************************     NO CHANGES AFTER THIS LINE      ****************************************************/

void DHT22_Start(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
    Data_Output(DHT_PORT, DHT_PIN);
 8000f64:	2102      	movs	r1, #2
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <DHT22_Start+0x34>)
 8000f68:	f000 f816 	bl	8000f98 <Data_Output>
  	HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_RESET);//输出低电平1ms
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2102      	movs	r1, #2
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <DHT22_Start+0x34>)
 8000f72:	f001 ffb2 	bl	8002eda <HAL_GPIO_WritePin>
  	DWT_Delay_us(1200);
 8000f76:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000f7a:	f7ff ffc9 	bl	8000f10 <DWT_Delay_us>
  	HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_SET);  //释放总线，即输出高电平30us
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2102      	movs	r1, #2
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <DHT22_Start+0x34>)
 8000f84:	f001 ffa9 	bl	8002eda <HAL_GPIO_WritePin>
  	DWT_Delay_us(30);
 8000f88:	201e      	movs	r0, #30
 8000f8a:	f7ff ffc1 	bl	8000f10 <DWT_Delay_us>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40020000 	.word	0x40020000

08000f98 <Data_Output>:
void Data_Output (GPIO_TypeDef *PORT, uint16_t PIN) //direction vers le capteur
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = PIN;
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; //pushpull
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f001 fde2 	bl	8002b8c <HAL_GPIO_Init>
}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <Data_Input>:

void Data_Input (GPIO_TypeDef *PORT, uint16_t PIN) //direction vers le microcontroleur
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = PIN;
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f001 fdc6 	bl	8002b8c <HAL_GPIO_Init>
}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Read_data>:
void Read_data (uint8_t *data)
  {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  	int i, k;
  	for (i=0;i<8;i++)
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e053      	b.n	80010be <Read_data+0xb6>
  	{
  		if (HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 8001016:	2102      	movs	r1, #2
 8001018:	482d      	ldr	r0, [pc, #180]	; (80010d0 <Read_data+0xc8>)
 800101a:	f001 ff47 	bl	8002eac <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d11c      	bne.n	800105e <Read_data+0x56>
  		{
  			(*data)&= ~(1<<(7-i)); //data bit is 0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25a      	sxtb	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f1c3 0307 	rsb	r3, r3, #7
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	b25b      	sxtb	r3, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	b25b      	sxtb	r3, r3
 800103c:	4013      	ands	r3, r2
 800103e:	b25b      	sxtb	r3, r3
 8001040:	b2da      	uxtb	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	701a      	strb	r2, [r3, #0]
  			while(!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 8001046:	bf00      	nop
 8001048:	2102      	movs	r1, #2
 800104a:	4821      	ldr	r0, [pc, #132]	; (80010d0 <Read_data+0xc8>)
 800104c:	f001 ff2e 	bl	8002eac <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f8      	beq.n	8001048 <Read_data+0x40>
  			DWT_Delay_us(40);
 8001056:	2028      	movs	r0, #40	; 0x28
 8001058:	f7ff ff5a 	bl	8000f10 <DWT_Delay_us>
 800105c:	e02c      	b.n	80010b8 <Read_data+0xb0>
  		}
  		else                       //data bit is 1
  		{
  			(*data)|= (1<<(7-i));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b25a      	sxtb	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	b25b      	sxtb	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b25b      	sxtb	r3, r3
 8001076:	b2da      	uxtb	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	701a      	strb	r2, [r3, #0]
  			for (k=0;k<1000;k++)
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	e009      	b.n	8001096 <Read_data+0x8e>
  			{
  				if (HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 8001082:	2102      	movs	r1, #2
 8001084:	4812      	ldr	r0, [pc, #72]	; (80010d0 <Read_data+0xc8>)
 8001086:	f001 ff11 	bl	8002eac <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d007      	beq.n	80010a0 <Read_data+0x98>
  			for (k=0;k<1000;k++)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	3301      	adds	r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800109c:	dbf1      	blt.n	8001082 <Read_data+0x7a>
 800109e:	e000      	b.n	80010a2 <Read_data+0x9a>
  				  {
  				  	break;
 80010a0:	bf00      	nop
  				  }
  			}
  			while(!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 80010a2:	bf00      	nop
 80010a4:	2102      	movs	r1, #2
 80010a6:	480a      	ldr	r0, [pc, #40]	; (80010d0 <Read_data+0xc8>)
 80010a8:	f001 ff00 	bl	8002eac <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f8      	beq.n	80010a4 <Read_data+0x9c>
  			DWT_Delay_us(40);
 80010b2:	2028      	movs	r0, #40	; 0x28
 80010b4:	f7ff ff2c 	bl	8000f10 <DWT_Delay_us>
  	for (i=0;i<8;i++)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	dda8      	ble.n	8001016 <Read_data+0xe>
  		}
  	 }
  }
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40020000 	.word	0x40020000

080010d4 <commence_la_reception_de_donnees>:
	}

	return DHT22_Byte;//返回当前读取到的字节
}

void commence_la_reception_de_donnees(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
    int k;
	while(!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 80010da:	bf00      	nop
 80010dc:	2102      	movs	r1, #2
 80010de:	4814      	ldr	r0, [pc, #80]	; (8001130 <commence_la_reception_de_donnees+0x5c>)
 80010e0:	f001 fee4 	bl	8002eac <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f8      	beq.n	80010dc <commence_la_reception_de_donnees+0x8>
	            	  for(k=0;k<1000;k++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	e009      	b.n	8001104 <commence_la_reception_de_donnees+0x30>
	            	  {
	            		  if (HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 80010f0:	2102      	movs	r1, #2
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <commence_la_reception_de_donnees+0x5c>)
 80010f4:	f001 feda 	bl	8002eac <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <commence_la_reception_de_donnees+0x3a>
	            	  for(k=0;k<1000;k++)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800110a:	dbf1      	blt.n	80010f0 <commence_la_reception_de_donnees+0x1c>
 800110c:	e000      	b.n	8001110 <commence_la_reception_de_donnees+0x3c>
	            		  {
	            	  	  	break;
 800110e:	bf00      	nop
	            	  	  }
	            	  }

	            	  while(!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 8001110:	bf00      	nop
 8001112:	2102      	movs	r1, #2
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <commence_la_reception_de_donnees+0x5c>)
 8001116:	f001 fec9 	bl	8002eac <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f8      	beq.n	8001112 <commence_la_reception_de_donnees+0x3e>
	            	  DWT_Delay_us(40);
 8001120:	2028      	movs	r0, #40	; 0x28
 8001122:	f7ff fef5 	bl	8000f10 <DWT_Delay_us>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40020000 	.word	0x40020000

08001134 <obtenir_donnees>:

void obtenir_donnees(uint8_t *dataH1,uint8_t *dataH2,uint8_t *dataT1,uint8_t *dataT2,uint8_t * sum){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	603b      	str	r3, [r7, #0]

	  Read_data(dataH1);
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff ff60 	bl	8001008 <Read_data>
	  Read_data(dataH2);
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f7ff ff5d 	bl	8001008 <Read_data>
	  Read_data(dataT1);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff5a 	bl	8001008 <Read_data>
	  Read_data(dataT2);
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f7ff ff57 	bl	8001008 <Read_data>
	  Read_data(sum);
 800115a:	69b8      	ldr	r0, [r7, #24]
 800115c:	f7ff ff54 	bl	8001008 <Read_data>

}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_ADC_Init+0xac>)
 800117a:	4a27      	ldr	r2, [pc, #156]	; (8001218 <MX_ADC_Init+0xb0>)
 800117c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <MX_ADC_Init+0xac>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_ADC_Init+0xac>)
 8001186:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800118a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_ADC_Init+0xac>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_ADC_Init+0xac>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <MX_ADC_Init+0xac>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_ADC_Init+0xac>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <MX_ADC_Init+0xac>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_ADC_Init+0xac>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_ADC_Init+0xac>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_ADC_Init+0xac>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_ADC_Init+0xac>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_ADC_Init+0xac>)
 80011c8:	2210      	movs	r2, #16
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_ADC_Init+0xac>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_ADC_Init+0xac>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011da:	480e      	ldr	r0, [pc, #56]	; (8001214 <MX_ADC_Init+0xac>)
 80011dc:	f001 f898 	bl	8002310 <HAL_ADC_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC_Init+0x82>
  {
    Error_Handler();
 80011e6:	f000 fd35 	bl	8001c54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_ADC_Init+0xac>)
 80011fc:	f001 f9ce 	bl	800259c <HAL_ADC_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8001206:	f000 fd25 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200001fc 	.word	0x200001fc
 8001218:	40012400 	.word	0x40012400

0800121c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a15      	ldr	r2, [pc, #84]	; (8001290 <HAL_ADC_MspInit+0x74>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d123      	bne.n	8001286 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_ADC_MspInit+0x78>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_ADC_MspInit+0x78>)
 8001244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001248:	6213      	str	r3, [r2, #32]
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_ADC_MspInit+0x78>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_ADC_MspInit+0x78>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <HAL_ADC_MspInit+0x78>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	61d3      	str	r3, [r2, #28]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_ADC_MspInit+0x78>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800126e:	2302      	movs	r3, #2
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001272:	2303      	movs	r3, #3
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_ADC_MspInit+0x7c>)
 8001282:	f001 fc83 	bl	8002b8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40012400 	.word	0x40012400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000

0800129c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <MX_GPIO_Init+0xc4>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a2a      	ldr	r2, [pc, #168]	; (8001360 <MX_GPIO_Init+0xc4>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <MX_GPIO_Init+0xc4>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <MX_GPIO_Init+0xc4>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a24      	ldr	r2, [pc, #144]	; (8001360 <MX_GPIO_Init+0xc4>)
 80012d0:	f043 0320 	orr.w	r3, r3, #32
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <MX_GPIO_Init+0xc4>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 0320 	and.w	r3, r3, #32
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_GPIO_Init+0xc4>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <MX_GPIO_Init+0xc4>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <MX_GPIO_Init+0xc4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MX_GPIO_Init+0xc4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a18      	ldr	r2, [pc, #96]	; (8001360 <MX_GPIO_Init+0xc4>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_GPIO_Init+0xc4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001318:	4812      	ldr	r0, [pc, #72]	; (8001364 <MX_GPIO_Init+0xc8>)
 800131a:	f001 fdde 	bl	8002eda <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800131e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001324:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_GPIO_Init+0xcc>)
 8001336:	f001 fc29 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 800133a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_GPIO_Init+0xc8>)
 8001354:	f001 fc1a 	bl	8002b8c <HAL_GPIO_Init>

}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020800 	.word	0x40020800

0800136c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_I2C1_Init+0x50>)
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <MX_I2C1_Init+0x54>)
 8001374:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_I2C1_Init+0x50>)
 8001378:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <MX_I2C1_Init+0x58>)
 800137a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_I2C1_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_I2C1_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_I2C1_Init+0x50>)
 800138a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <MX_I2C1_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_I2C1_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <MX_I2C1_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_I2C1_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_I2C1_Init+0x50>)
 80013aa:	f001 fdaf 	bl	8002f0c <HAL_I2C_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b4:	f000 fc4e 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000250 	.word	0x20000250
 80013c0:	40005400 	.word	0x40005400
 80013c4:	000186a0 	.word	0x000186a0

080013c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a17      	ldr	r2, [pc, #92]	; (8001444 <HAL_I2C_MspInit+0x7c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d128      	bne.n	800143c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_I2C_MspInit+0x80>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a16      	ldr	r2, [pc, #88]	; (8001448 <HAL_I2C_MspInit+0x80>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_I2C_MspInit+0x80>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001402:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001408:	2312      	movs	r3, #18
 800140a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001414:	2304      	movs	r3, #4
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <HAL_I2C_MspInit+0x84>)
 8001420:	f001 fbb4 	bl	8002b8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_I2C_MspInit+0x80>)
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_I2C_MspInit+0x80>)
 800142a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800142e:	6253      	str	r3, [r2, #36]	; 0x24
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_I2C_MspInit+0x80>)
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40005400 	.word	0x40005400
 8001448:	40023800 	.word	0x40023800
 800144c:	40020400 	.word	0x40020400

08001450 <lcd_init>:
#include "i2c.h"
#include "DHT22.h"


void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af02      	add	r7, sp, #8
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	f043 030c 	orr.w	r3, r3, #12
 8001466:	b2da      	uxtb	r2, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	b2db      	uxtb	r3, r3
 800147a:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 800147c:	f107 0118 	add.w	r1, r7, #24
 8001480:	230a      	movs	r3, #10
 8001482:	2202      	movs	r2, #2
 8001484:	486c      	ldr	r0, [pc, #432]	; (8001638 <lcd_init+0x1e8>)
 8001486:	f003 fbae 	bl	8004be6 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800148a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800148e:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001490:	f107 0114 	add.w	r1, r7, #20
 8001494:	230a      	movs	r3, #10
 8001496:	2202      	movs	r2, #2
 8001498:	4867      	ldr	r0, [pc, #412]	; (8001638 <lcd_init+0x1e8>)
 800149a:	f003 fba4 	bl	8004be6 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 800149e:	2364      	movs	r3, #100	; 0x64
 80014a0:	2205      	movs	r2, #5
 80014a2:	217c      	movs	r1, #124	; 0x7c
 80014a4:	69f8      	ldr	r0, [r7, #28]
 80014a6:	f001 ff73 	bl	8003390 <HAL_I2C_IsDeviceReady>
 80014aa:	4603      	mov	r3, r0
 80014ac:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80014ae:	f107 0113 	add.w	r1, r7, #19
 80014b2:	230a      	movs	r3, #10
 80014b4:	2201      	movs	r2, #1
 80014b6:	4860      	ldr	r0, [pc, #384]	; (8001638 <lcd_init+0x1e8>)
 80014b8:	f003 fb95 	bl	8004be6 <HAL_UART_Transmit>
	HAL_Delay(50);
 80014bc:	2032      	movs	r0, #50	; 0x32
 80014be:	f000 ff05 	bl	80022cc <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80014c2:	f107 0218 	add.w	r2, r7, #24
 80014c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	217c      	movs	r1, #124	; 0x7c
 80014d0:	69f8      	ldr	r0, [r7, #28]
 80014d2:	f001 fe5f 	bl	8003194 <HAL_I2C_Master_Transmit>
 80014d6:	4603      	mov	r3, r0
 80014d8:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80014da:	f107 0112 	add.w	r1, r7, #18
 80014de:	230a      	movs	r3, #10
 80014e0:	2201      	movs	r2, #1
 80014e2:	4855      	ldr	r0, [pc, #340]	; (8001638 <lcd_init+0x1e8>)
 80014e4:	f003 fb7f 	bl	8004be6 <HAL_UART_Transmit>
	HAL_Delay(50);
 80014e8:	2032      	movs	r0, #50	; 0x32
 80014ea:	f000 feef 	bl	80022cc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80014ee:	f107 0218 	add.w	r2, r7, #24
 80014f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2302      	movs	r3, #2
 80014fa:	217c      	movs	r1, #124	; 0x7c
 80014fc:	69f8      	ldr	r0, [r7, #28]
 80014fe:	f001 fe49 	bl	8003194 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001502:	2005      	movs	r0, #5
 8001504:	f000 fee2 	bl	80022cc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001508:	f107 0218 	add.w	r2, r7, #24
 800150c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2302      	movs	r3, #2
 8001514:	217c      	movs	r1, #124	; 0x7c
 8001516:	69f8      	ldr	r0, [r7, #28]
 8001518:	f001 fe3c 	bl	8003194 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2204      	movs	r2, #4
 8001520:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	785b      	ldrb	r3, [r3, #1]
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	b2db      	uxtb	r3, r3
 800152c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800152e:	f107 0218 	add.w	r2, r7, #24
 8001532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2302      	movs	r3, #2
 800153a:	217c      	movs	r1, #124	; 0x7c
 800153c:	69f8      	ldr	r0, [r7, #28]
 800153e:	f001 fe29 	bl	8003194 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001542:	2301      	movs	r3, #1
 8001544:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001546:	f107 0218 	add.w	r2, r7, #24
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2302      	movs	r3, #2
 8001552:	217c      	movs	r1, #124	; 0x7c
 8001554:	69f8      	ldr	r0, [r7, #28]
 8001556:	f001 fe1d 	bl	8003194 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800155a:	2002      	movs	r0, #2
 800155c:	f000 feb6 	bl	80022cc <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2202      	movs	r2, #2
 8001564:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	789b      	ldrb	r3, [r3, #2]
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	b2db      	uxtb	r3, r3
 8001570:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001572:	f107 0218 	add.w	r2, r7, #24
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2302      	movs	r3, #2
 800157e:	217c      	movs	r1, #124	; 0x7c
 8001580:	69f8      	ldr	r0, [r7, #28]
 8001582:	f001 fe07 	bl	8003194 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8001586:	2300      	movs	r3, #0
 8001588:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800158e:	f107 0210 	add.w	r2, r7, #16
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2302      	movs	r3, #2
 800159a:	21c4      	movs	r1, #196	; 0xc4
 800159c:	69f8      	ldr	r0, [r7, #28]
 800159e:	f001 fdf9 	bl	8003194 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80015a2:	2308      	movs	r3, #8
 80015a4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80015a6:	23ff      	movs	r3, #255	; 0xff
 80015a8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80015aa:	f107 0210 	add.w	r2, r7, #16
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2302      	movs	r3, #2
 80015b6:	21c4      	movs	r1, #196	; 0xc4
 80015b8:	69f8      	ldr	r0, [r7, #28]
 80015ba:	f001 fdeb 	bl	8003194 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80015be:	2301      	movs	r3, #1
 80015c0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80015c2:	2320      	movs	r3, #32
 80015c4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80015c6:	f107 0210 	add.w	r2, r7, #16
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2302      	movs	r3, #2
 80015d2:	21c4      	movs	r1, #196	; 0xc4
 80015d4:	69f8      	ldr	r0, [r7, #28]
 80015d6:	f001 fddd 	bl	8003194 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80015da:	2304      	movs	r3, #4
 80015dc:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80015de:	23ff      	movs	r3, #255	; 0xff
 80015e0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80015e2:	f107 020c 	add.w	r2, r7, #12
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2302      	movs	r3, #2
 80015ee:	21c4      	movs	r1, #196	; 0xc4
 80015f0:	69f8      	ldr	r0, [r7, #28]
 80015f2:	f001 fdcf 	bl	8003194 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 80015f6:	2303      	movs	r3, #3
 80015f8:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80015fa:	23ff      	movs	r3, #255	; 0xff
 80015fc:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80015fe:	f107 020c 	add.w	r2, r7, #12
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2302      	movs	r3, #2
 800160a:	21c4      	movs	r1, #196	; 0xc4
 800160c:	69f8      	ldr	r0, [r7, #28]
 800160e:	f001 fdc1 	bl	8003194 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8001612:	2302      	movs	r3, #2
 8001614:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001616:	23ff      	movs	r3, #255	; 0xff
 8001618:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800161a:	f107 020c 	add.w	r2, r7, #12
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2302      	movs	r3, #2
 8001626:	21c4      	movs	r1, #196	; 0xc4
 8001628:	69f8      	ldr	r0, [r7, #28]
 800162a:	f001 fdb3 	bl	8003194 <HAL_I2C_Master_Transmit>


}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000032c 	.word	0x2000032c

0800163c <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	4808      	ldr	r0, [pc, #32]	; (8001668 <clearlcd+0x2c>)
 8001646:	f000 f87a 	bl	800173e <lcd_position>
	lcd_print(&hi2c1,"                ");
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <clearlcd+0x30>)
 800164c:	4806      	ldr	r0, [pc, #24]	; (8001668 <clearlcd+0x2c>)
 800164e:	f000 f84d 	bl	80016ec <lcd_print>
	lcd_position(&hi2c1,0,1);
 8001652:	2201      	movs	r2, #1
 8001654:	2100      	movs	r1, #0
 8001656:	4804      	ldr	r0, [pc, #16]	; (8001668 <clearlcd+0x2c>)
 8001658:	f000 f871 	bl	800173e <lcd_position>
	lcd_print(&hi2c1,"                ");
 800165c:	4903      	ldr	r1, [pc, #12]	; (800166c <clearlcd+0x30>)
 800165e:	4802      	ldr	r0, [pc, #8]	; (8001668 <clearlcd+0x2c>)
 8001660:	f000 f844 	bl	80016ec <lcd_print>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000250 	.word	0x20000250
 800166c:	08009fc8 	.word	0x08009fc8

08001670 <affichage>:
	k=(value-10*i-j)/0.1;

    unsigned char data[2] = {0x40, 0x30|value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, (uint8_t *) data,2,1000);
}*/
void affichage (float Humidite ,float Temperature ,char *buffH,char *buffT){
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	603b      	str	r3, [r7, #0]


	/*commence transmission vers LCD*/
	clearlcd();
 800167e:	f7ff ffdd 	bl	800163c <clearlcd>
	sprintf(buffH,"Humidity: %.1f", Humidite);
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7fe fee8 	bl	8000458 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4913      	ldr	r1, [pc, #76]	; (80016dc <affichage+0x6c>)
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f004 fed0 	bl	8006434 <siprintf>
	sprintf(buffT, "Temp.: %.1f C", Temperature);
 8001694:	68b8      	ldr	r0, [r7, #8]
 8001696:	f7fe fedf 	bl	8000458 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4910      	ldr	r1, [pc, #64]	; (80016e0 <affichage+0x70>)
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f004 fec7 	bl	8006434 <siprintf>
    lcd_position(&hi2c1,0,0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	480e      	ldr	r0, [pc, #56]	; (80016e4 <affichage+0x74>)
 80016ac:	f000 f847 	bl	800173e <lcd_position>
    lcd_print(&hi2c1,buffH);
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	480c      	ldr	r0, [pc, #48]	; (80016e4 <affichage+0x74>)
 80016b4:	f000 f81a 	bl	80016ec <lcd_print>
    lcd_print(&hi2c1,"%");
 80016b8:	490b      	ldr	r1, [pc, #44]	; (80016e8 <affichage+0x78>)
 80016ba:	480a      	ldr	r0, [pc, #40]	; (80016e4 <affichage+0x74>)
 80016bc:	f000 f816 	bl	80016ec <lcd_print>
    lcd_position(&hi2c1,0,1);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2100      	movs	r1, #0
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <affichage+0x74>)
 80016c6:	f000 f83a 	bl	800173e <lcd_position>
    lcd_print(&hi2c1,buffT);
 80016ca:	6839      	ldr	r1, [r7, #0]
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <affichage+0x74>)
 80016ce:	f000 f80d 	bl	80016ec <lcd_print>

}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	08009fdc 	.word	0x08009fdc
 80016e0:	08009fec 	.word	0x08009fec
 80016e4:	20000250 	.word	0x20000250
 80016e8:	08009ffc 	.word	0x08009ffc

080016ec <lcd_print>:
void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80016fa:	2340      	movs	r3, #64	; 0x40
 80016fc:	733b      	strb	r3, [r7, #12]
    int i=0;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001702:	e011      	b.n	8001728 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	4413      	add	r3, r2
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800170e:	f107 020c 	add.w	r2, r7, #12
 8001712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2302      	movs	r3, #2
 800171a:	217c      	movs	r1, #124	; 0x7c
 800171c:	6938      	ldr	r0, [r7, #16]
 800171e:	f001 fd39 	bl	8003194 <HAL_I2C_Master_Transmit>
            i++;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	4413      	add	r3, r2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e7      	bne.n	8001704 <lcd_print+0x18>
   }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <lcd_position>:
	    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, (uint8_t *) data,2,1000);


}*/
void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af02      	add	r7, sp, #8
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	70fb      	strb	r3, [r7, #3]
 800174a:	4613      	mov	r3, r2
 800174c:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001752:	78bb      	ldrb	r3, [r7, #2]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d104      	bne.n	8001762 <lcd_position+0x24>
    {
        col = col | 0x80;
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800175e:	70fb      	strb	r3, [r7, #3]
 8001760:	e003      	b.n	800176a <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001768:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001772:	f107 0208 	add.w	r2, r7, #8
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2302      	movs	r3, #2
 800177e:	217c      	movs	r1, #124	; 0x7c
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f001 fd07 	bl	8003194 <HAL_I2C_Master_Transmit>
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b0c5      	sub	sp, #276	; 0x114
 8001794:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	float Humidite = 0.0,Temperature = 0.0;
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a6:	f000 fd22 	bl	80021ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017aa:	f000 fa05 	bl	8001bb8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  DWT_Delay_Init();
 80017ae:	f000 fbf1 	bl	8001f94 <DWT_Delay_Init>
  lcd_init(&hi2c1, &DataStruct);
 80017b2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017b6:	4619      	mov	r1, r3
 80017b8:	48a7      	ldr	r0, [pc, #668]	; (8001a58 <main+0x2c8>)
 80017ba:	f7ff fe49 	bl	8001450 <lcd_init>
  HAL_TIM_Base_Start(&htim2);
 80017be:	48a7      	ldr	r0, [pc, #668]	; (8001a5c <main+0x2cc>)
 80017c0:	f002 ff52 	bl	8004668 <HAL_TIM_Base_Start>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c4:	f7ff fd6a 	bl	800129c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017c8:	f000 fc3e 	bl	8002048 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80017cc:	f000 fc12 	bl	8001ff4 <MX_USART1_UART_Init>
  MX_ADC_Init();
 80017d0:	f7ff fcca 	bl	8001168 <MX_ADC_Init>
  MX_TIM2_Init();
 80017d4:	f000 fb76 	bl	8001ec4 <MX_TIM2_Init>
  MX_I2C1_Init();
 80017d8:	f7ff fdc8 	bl	800136c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Init();
 80017dc:	f000 fd07 	bl	80021ee <HAL_Init>
  DWT_Delay_Init();
 80017e0:	f000 fbd8 	bl	8001f94 <DWT_Delay_Init>
  lcd_init(&hi2c1, &DataStruct);
 80017e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017e8:	4619      	mov	r1, r3
 80017ea:	489b      	ldr	r0, [pc, #620]	; (8001a58 <main+0x2c8>)
 80017ec:	f7ff fe30 	bl	8001450 <lcd_init>
  HAL_TIM_Base_Start(&htim2);
 80017f0:	489a      	ldr	r0, [pc, #616]	; (8001a5c <main+0x2cc>)
 80017f2:	f002 ff39 	bl	8004668 <HAL_TIM_Base_Start>

  int n = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  char *cmdData = "AT";
 80017fc:	4b98      	ldr	r3, [pc, #608]	; (8001a60 <main+0x2d0>)
 80017fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  char cmdDataTmp[40];
  sprintf(cmdDataTmp,"%s\r\n",cmdData);
 8001802:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001806:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800180a:	4996      	ldr	r1, [pc, #600]	; (8001a64 <main+0x2d4>)
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fe11 	bl	8006434 <siprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //char buffer[128] = {0};
	  char buffer2[128] = {0};
 8001812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	3304      	adds	r3, #4
 8001820:	227c      	movs	r2, #124	; 0x7c
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f003 ff8b 	bl	8005740 <memset>
	  HAL_UART_Receive(&huart1, buffer2, 128, 1000);
 800182a:	1d39      	adds	r1, r7, #4
 800182c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	488d      	ldr	r0, [pc, #564]	; (8001a68 <main+0x2d8>)
 8001834:	f003 fa69 	bl	8004d0a <HAL_UART_Receive>
	  HAL_UART_Transmit (&huart2, (uint8_t *)buffer2, strlen (buffer2), 1000);
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fca0 	bl	8000180 <strlen>
 8001840:	4603      	mov	r3, r0
 8001842:	b29a      	uxth	r2, r3
 8001844:	1d39      	adds	r1, r7, #4
 8001846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184a:	4888      	ldr	r0, [pc, #544]	; (8001a6c <main+0x2dc>)
 800184c:	f003 f9cb 	bl	8004be6 <HAL_UART_Transmit>

      //HAL_Delay(100);//pour serveur
      //if(n==2 || n==3){HAL_Delay(5000);}//pour serveur

	  HAL_Delay(5000);//pour client
 8001850:	f241 3088 	movw	r0, #5000	; 0x1388
 8001854:	f000 fd3a 	bl	80022cc <HAL_Delay>
	  if(n==7){HAL_Delay(1000);}//pour client
 8001858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800185c:	2b07      	cmp	r3, #7
 800185e:	d103      	bne.n	8001868 <main+0xd8>
 8001860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001864:	f000 fd32 	bl	80022cc <HAL_Delay>
	  switch (n)
 8001868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800186c:	2b08      	cmp	r3, #8
 800186e:	f200 812a 	bhi.w	8001ac6 <main+0x336>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <main+0xe8>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	0800189d 	.word	0x0800189d
 800187c:	080018c1 	.word	0x080018c1
 8001880:	080018fb 	.word	0x080018fb
 8001884:	08001935 	.word	0x08001935
 8001888:	0800196f 	.word	0x0800196f
 800188c:	080019a9 	.word	0x080019a9
 8001890:	080019e3 	.word	0x080019e3
 8001894:	08001a1d 	.word	0x08001a1d
 8001898:	08001a8d 	.word	0x08001a8d
{
case 0:


	  HAL_UART_Transmit(&huart1,(uint8_t *)cmdDataTmp,strlen(cmdDataTmp),1000);
 800189c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fc6d 	bl	8000180 <strlen>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80018ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b2:	486d      	ldr	r0, [pc, #436]	; (8001a68 <main+0x2d8>)
 80018b4:	f003 f997 	bl	8004be6 <HAL_UART_Transmit>

		n = 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	break;
 80018be:	e102      	b.n	8001ac6 <main+0x336>
	break;*/


//客户端模式:
case 1:
	  cmdData = "AT+RST";
 80018c0:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <main+0x2e0>)
 80018c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	sprintf(cmdDataTmp,"%s\r\n",cmdData);
 80018c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018ca:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80018ce:	4965      	ldr	r1, [pc, #404]	; (8001a64 <main+0x2d4>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 fdaf 	bl	8006434 <siprintf>
	 HAL_UART_Transmit(&huart1,(uint8_t *)cmdDataTmp,strlen(cmdDataTmp),1000);
 80018d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fc50 	bl	8000180 <strlen>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ec:	485e      	ldr	r0, [pc, #376]	; (8001a68 <main+0x2d8>)
 80018ee:	f003 f97a 	bl	8004be6 <HAL_UART_Transmit>

		n = 2;
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	break;
 80018f8:	e0e5      	b.n	8001ac6 <main+0x336>
case 2:
	cmdData = "AT+CWMODE=1";
 80018fa:	4b5e      	ldr	r3, [pc, #376]	; (8001a74 <main+0x2e4>)
 80018fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
     sprintf(cmdDataTmp,"%s\r\n",cmdData);
 8001900:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001904:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001908:	4956      	ldr	r1, [pc, #344]	; (8001a64 <main+0x2d4>)
 800190a:	4618      	mov	r0, r3
 800190c:	f004 fd92 	bl	8006434 <siprintf>
	 HAL_UART_Transmit(&huart1,(uint8_t *)cmdDataTmp,strlen(cmdDataTmp),1000);
 8001910:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fc33 	bl	8000180 <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	b29a      	uxth	r2, r3
 800191e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001926:	4850      	ldr	r0, [pc, #320]	; (8001a68 <main+0x2d8>)
 8001928:	f003 f95d 	bl	8004be6 <HAL_UART_Transmit>

		n = 3;
 800192c:	2303      	movs	r3, #3
 800192e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	break;
 8001932:	e0c8      	b.n	8001ac6 <main+0x336>
case 3:
	cmdData = "AT+CIPMUX=0";
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <main+0x2e8>)
 8001936:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
     sprintf(cmdDataTmp,"%s\r\n",cmdData);
 800193a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800193e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001942:	4948      	ldr	r1, [pc, #288]	; (8001a64 <main+0x2d4>)
 8001944:	4618      	mov	r0, r3
 8001946:	f004 fd75 	bl	8006434 <siprintf>
	 HAL_UART_Transmit(&huart1,(uint8_t *)cmdDataTmp,strlen(cmdDataTmp),1000);
 800194a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fc16 	bl	8000180 <strlen>
 8001954:	4603      	mov	r3, r0
 8001956:	b29a      	uxth	r2, r3
 8001958:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800195c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001960:	4841      	ldr	r0, [pc, #260]	; (8001a68 <main+0x2d8>)
 8001962:	f003 f940 	bl	8004be6 <HAL_UART_Transmit>

		n = 4;
 8001966:	2304      	movs	r3, #4
 8001968:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	break;
 800196c:	e0ab      	b.n	8001ac6 <main+0x336>
case 4:
	cmdData = "AT+CWJAP=\"ESP8266AAA\",\"1234567890\"";
 800196e:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <main+0x2ec>)
 8001970:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
     sprintf(cmdDataTmp,"%s\r\n",cmdData);
 8001974:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001978:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800197c:	4939      	ldr	r1, [pc, #228]	; (8001a64 <main+0x2d4>)
 800197e:	4618      	mov	r0, r3
 8001980:	f004 fd58 	bl	8006434 <siprintf>
	 HAL_UART_Transmit(&huart1,(uint8_t *)cmdDataTmp,strlen(cmdDataTmp),1000);
 8001984:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fbf9 	bl	8000180 <strlen>
 800198e:	4603      	mov	r3, r0
 8001990:	b29a      	uxth	r2, r3
 8001992:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199a:	4833      	ldr	r0, [pc, #204]	; (8001a68 <main+0x2d8>)
 800199c:	f003 f923 	bl	8004be6 <HAL_UART_Transmit>
	 n=5;
 80019a0:	2305      	movs	r3, #5
 80019a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	break;
 80019a6:	e08e      	b.n	8001ac6 <main+0x336>
case 5:
	cmdData = "AT+CIPMODE=1";
 80019a8:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <main+0x2f0>)
 80019aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
     sprintf(cmdDataTmp,"%s\r\n",cmdData);
 80019ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019b2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80019b6:	492b      	ldr	r1, [pc, #172]	; (8001a64 <main+0x2d4>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f004 fd3b 	bl	8006434 <siprintf>
	 HAL_UART_Transmit(&huart1,(uint8_t *)cmdDataTmp,strlen(cmdDataTmp),1000);
 80019be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fbdc 	bl	8000180 <strlen>
 80019c8:	4603      	mov	r3, r0
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80019d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d4:	4824      	ldr	r0, [pc, #144]	; (8001a68 <main+0x2d8>)
 80019d6:	f003 f906 	bl	8004be6 <HAL_UART_Transmit>
		n = 6;
 80019da:	2306      	movs	r3, #6
 80019dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	break;
 80019e0:	e071      	b.n	8001ac6 <main+0x336>
case 6:
	cmdData = "AT+CIPSTART=\"TCP\",\"192.168.4.1\",8080";
 80019e2:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <main+0x2f4>)
 80019e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
     sprintf(cmdDataTmp,"%s\r\n",cmdData);
 80019e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019ec:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80019f0:	491c      	ldr	r1, [pc, #112]	; (8001a64 <main+0x2d4>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f004 fd1e 	bl	8006434 <siprintf>
	 HAL_UART_Transmit(&huart1,(uint8_t *)cmdDataTmp,strlen(cmdDataTmp),1000);
 80019f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fbbf 	bl	8000180 <strlen>
 8001a02:	4603      	mov	r3, r0
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	4816      	ldr	r0, [pc, #88]	; (8001a68 <main+0x2d8>)
 8001a10:	f003 f8e9 	bl	8004be6 <HAL_UART_Transmit>

		n = 7;
 8001a14:	2307      	movs	r3, #7
 8001a16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	break;
 8001a1a:	e054      	b.n	8001ac6 <main+0x336>

case 7:
	cmdData = "AT+CIPSEND";
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <main+0x2f8>)
 8001a1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
     sprintf(cmdDataTmp,"%s\r\n",cmdData);
 8001a22:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a26:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001a2a:	490e      	ldr	r1, [pc, #56]	; (8001a64 <main+0x2d4>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fd01 	bl	8006434 <siprintf>
	 HAL_UART_Transmit(&huart1,(uint8_t *)cmdDataTmp,strlen(cmdDataTmp),1000);
 8001a32:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fba2 	bl	8000180 <strlen>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <main+0x2d8>)
 8001a4a:	f003 f8cc 	bl	8004be6 <HAL_UART_Transmit>

		n = 8;
 8001a4e:	2308      	movs	r3, #8
 8001a50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	break;
 8001a54:	e037      	b.n	8001ac6 <main+0x336>
 8001a56:	bf00      	nop
 8001a58:	20000250 	.word	0x20000250
 8001a5c:	200002a8 	.word	0x200002a8
 8001a60:	0800a000 	.word	0x0800a000
 8001a64:	0800a004 	.word	0x0800a004
 8001a68:	200002e8 	.word	0x200002e8
 8001a6c:	2000032c 	.word	0x2000032c
 8001a70:	0800a00c 	.word	0x0800a00c
 8001a74:	0800a014 	.word	0x0800a014
 8001a78:	0800a020 	.word	0x0800a020
 8001a7c:	0800a02c 	.word	0x0800a02c
 8001a80:	0800a050 	.word	0x0800a050
 8001a84:	0800a060 	.word	0x0800a060
 8001a88:	0800a088 	.word	0x0800a088

case 8:
		 HAL_UART_Transmit(&huart1,(uint8_t *)buffH,strlen(buffH),1000);
 8001a8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fb75 	bl	8000180 <strlen>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	4840      	ldr	r0, [pc, #256]	; (8001ba4 <main+0x414>)
 8001aa4:	f003 f89f 	bl	8004be6 <HAL_UART_Transmit>
		 HAL_UART_Transmit(&huart1,(uint8_t *)buffT,strlen(buffT),1000);
 8001aa8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fb67 	bl	8000180 <strlen>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	4839      	ldr	r0, [pc, #228]	; (8001ba4 <main+0x414>)
 8001ac0:	f003 f891 	bl	8004be6 <HAL_UART_Transmit>
		break;
 8001ac4:	bf00      	nop


}

	                  DHT22_Start(); //demarrer le DHT22,dans le fichier DHT22.c
 8001ac6:	f7ff fa4b 	bl	8000f60 <DHT22_Start>
	    	          Data_Input(DHT_PORT, DHT_PIN);
 8001aca:	2102      	movs	r1, #2
 8001acc:	4836      	ldr	r0, [pc, #216]	; (8001ba8 <main+0x418>)
 8001ace:	f7ff fa7f 	bl	8000fd0 <Data_Input>
	    	          commence_la_reception_de_donnees();
 8001ad2:	f7ff faff 	bl	80010d4 <commence_la_reception_de_donnees>
	    	          obtenir_donnees(&dataH1,&dataH2,&dataT1,&dataT2,&sum);
 8001ad6:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8001ada:	f107 02f1 	add.w	r2, r7, #241	; 0xf1
 8001ade:	f107 01f2 	add.w	r1, r7, #242	; 0xf2
 8001ae2:	f107 00f3 	add.w	r0, r7, #243	; 0xf3
 8001ae6:	f107 03ef 	add.w	r3, r7, #239	; 0xef
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	4623      	mov	r3, r4
 8001aee:	f7ff fb21 	bl	8001134 <obtenir_donnees>
	                  check_sum = (uint8_t)(dataH1 + dataH2 + dataT1 + dataT2);
 8001af2:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 8001af6:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8001afa:	4413      	add	r3, r2
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8001b02:	4413      	add	r3, r2
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	                  if(check_sum == sum){
 8001b10:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8001b14:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d12e      	bne.n	8001b7a <main+0x3ea>
	                  Humidite = (float)((256 * dataH1 + dataH2) / 10.0);
 8001b1c:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	f897 20f2 	ldrb.w	r2, [r7, #242]	; 0xf2
 8001b26:	4413      	add	r3, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fc83 	bl	8000434 <__aeabi_i2d>
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <main+0x41c>)
 8001b34:	f7fe fe12 	bl	800075c <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7fe ffda 	bl	8000af8 <__aeabi_d2f>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	 	         	  Temperature = (float)((256 * dataT1 + dataT2) / 10.0);
 8001b4a:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	f897 20f0 	ldrb.w	r2, [r7, #240]	; 0xf0
 8001b54:	4413      	add	r3, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fc6c 	bl	8000434 <__aeabi_i2d>
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <main+0x41c>)
 8001b62:	f7fe fdfb 	bl	800075c <__aeabi_ddiv>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7fe ffc3 	bl	8000af8 <__aeabi_d2f>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001b78:	e003      	b.n	8001b82 <main+0x3f2>
	                  }
	                  else{
	                  lcd_print(&hi2c1,"SUM != CHECK");
 8001b7a:	490d      	ldr	r1, [pc, #52]	; (8001bb0 <main+0x420>)
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <main+0x424>)
 8001b7e:	f7ff fdb5 	bl	80016ec <lcd_print>
	                  }
	                  affichage(Humidite,Temperature,buffH,buffT);
 8001b82:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b86:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001b8a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b8e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001b92:	f7ff fd6d 	bl	8001670 <affichage>
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001b96:	2201      	movs	r2, #1
 8001b98:	2102      	movs	r1, #2
 8001b9a:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <main+0x418>)
 8001b9c:	f001 f99d 	bl	8002eda <HAL_GPIO_WritePin>
  {
 8001ba0:	e637      	b.n	8001812 <main+0x82>
 8001ba2:	bf00      	nop
 8001ba4:	200002e8 	.word	0x200002e8
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40240000 	.word	0x40240000
 8001bb0:	0800a094 	.word	0x0800a094
 8001bb4:	20000250 	.word	0x20000250

08001bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b092      	sub	sp, #72	; 0x48
 8001bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	2234      	movs	r2, #52	; 0x34
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fdba 	bl	8005740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bcc:	463b      	mov	r3, r7
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <SystemClock_Config+0x98>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001be2:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <SystemClock_Config+0x98>)
 8001be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bea:	2302      	movs	r3, #2
 8001bec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bf2:	2310      	movs	r3, #16
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001bfe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001c04:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001c08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 fef4 	bl	80039fc <HAL_RCC_OscConfig>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c1a:	f000 f81b 	bl	8001c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1e:	230f      	movs	r3, #15
 8001c20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c22:	2303      	movs	r3, #3
 8001c24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c32:	463b      	mov	r3, r7
 8001c34:	2101      	movs	r1, #1
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 fa10 	bl	800405c <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c42:	f000 f807 	bl	8001c54 <Error_Handler>
  }
}
 8001c46:	bf00      	nop
 8001c48:	3748      	adds	r7, #72	; 0x48
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40007000 	.word	0x40007000

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
}
 8001c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <Error_Handler+0x8>
	...

08001c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c70:	6253      	str	r3, [r2, #36]	; 0x24
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6253      	str	r3, [r2, #36]	; 0x24
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_MspInit+0x5c>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cae:	2007      	movs	r0, #7
 8001cb0:	f000 feac 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler+0x4>

08001cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d06:	f000 fac5 	bl	8002294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <USART1_IRQHandler+0x10>)
 8001d16:	f003 f89b 	bl	8004e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200002e8 	.word	0x200002e8

08001d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <USART2_IRQHandler+0x10>)
 8001d2a:	f003 f891 	bl	8004e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000032c 	.word	0x2000032c

08001d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return 1;
 8001d3c:	2301      	movs	r3, #1
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <_kill>:

int _kill(int pid, int sig)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d50:	f003 fccc 	bl	80056ec <__errno>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2216      	movs	r2, #22
 8001d58:	601a      	str	r2, [r3, #0]
  return -1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_exit>:

void _exit (int status)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ffe7 	bl	8001d46 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d78:	e7fe      	b.n	8001d78 <_exit+0x12>

08001d7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e00a      	b.n	8001da2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d8c:	f3af 8000 	nop.w
 8001d90:	4601      	mov	r1, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	60ba      	str	r2, [r7, #8]
 8001d98:	b2ca      	uxtb	r2, r1
 8001d9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	dbf0      	blt.n	8001d8c <_read+0x12>
  }

  return len;
 8001daa:	687b      	ldr	r3, [r7, #4]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e009      	b.n	8001dda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	60ba      	str	r2, [r7, #8]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	dbf1      	blt.n	8001dc6 <_write+0x12>
  }
  return len;
 8001de2:	687b      	ldr	r3, [r7, #4]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_close>:

int _close(int file)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e12:	605a      	str	r2, [r3, #4]
  return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <_isatty>:

int _isatty(int file)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e54:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <_sbrk+0x5c>)
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <_sbrk+0x60>)
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <_sbrk+0x64>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <_sbrk+0x64>)
 8001e6a:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <_sbrk+0x68>)
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d207      	bcs.n	8001e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e7c:	f003 fc36 	bl	80056ec <__errno>
 8001e80:	4603      	mov	r3, r0
 8001e82:	220c      	movs	r2, #12
 8001e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e8a:	e009      	b.n	8001ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <_sbrk+0x64>)
 8001e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20014000 	.word	0x20014000
 8001eac:	00000400 	.word	0x00000400
 8001eb0:	200002a4 	.word	0x200002a4
 8001eb4:	20000388 	.word	0x20000388

08001eb8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed8:	463b      	mov	r3, r7
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <MX_TIM2_Init+0x94>)
 8001ee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <MX_TIM2_Init+0x94>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <MX_TIM2_Init+0x94>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <MX_TIM2_Init+0x94>)
 8001ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001efa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <MX_TIM2_Init+0x94>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <MX_TIM2_Init+0x94>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f08:	4813      	ldr	r0, [pc, #76]	; (8001f58 <MX_TIM2_Init+0x94>)
 8001f0a:	f002 fb6d 	bl	80045e8 <HAL_TIM_Base_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f14:	f7ff fe9e 	bl	8001c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	4619      	mov	r1, r3
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <MX_TIM2_Init+0x94>)
 8001f26:	f002 fbe9 	bl	80046fc <HAL_TIM_ConfigClockSource>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f30:	f7ff fe90 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f34:	2300      	movs	r3, #0
 8001f36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_TIM2_Init+0x94>)
 8001f42:	f002 fda5 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f4c:	f7ff fe82 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200002a8 	.word	0x200002a8

08001f5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6c:	d10b      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_TIM_Base_MspInit+0x34>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <HAL_TIM_Base_MspInit+0x34>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6253      	str	r3, [r2, #36]	; 0x24
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_TIM_Base_MspInit+0x34>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	40023800 	.word	0x40023800

08001f94 <DWT_Delay_Init>:

#include "timer.h"
#include "stm32l1xx_hal.h"

uint32_t DWT_Delay_Init(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <DWT_Delay_Init+0x58>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a13      	ldr	r2, [pc, #76]	; (8001fec <DWT_Delay_Init+0x58>)
 8001f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <DWT_Delay_Init+0x58>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a10      	ldr	r2, [pc, #64]	; (8001fec <DWT_Delay_Init+0x58>)
 8001faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fae:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <DWT_Delay_Init+0x5c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <DWT_Delay_Init+0x5c>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <DWT_Delay_Init+0x5c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <DWT_Delay_Init+0x5c>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <DWT_Delay_Init+0x5c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001fce:	bf00      	nop
    __ASM volatile ("NOP");
 8001fd0:	bf00      	nop
    __ASM volatile ("NOP");
 8001fd2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <DWT_Delay_Init+0x5c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e000      	b.n	8001fe2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001fe0:	2301      	movs	r3, #1
    }
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000edf0 	.word	0xe000edf0
 8001ff0:	e0001000 	.word	0xe0001000

08001ff4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_USART1_UART_Init+0x4c>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <MX_USART1_UART_Init+0x50>)
 8001ffc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <MX_USART1_UART_Init+0x4c>)
 8002000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002004:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_USART1_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_USART1_UART_Init+0x4c>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <MX_USART1_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_USART1_UART_Init+0x4c>)
 800201a:	220c      	movs	r2, #12
 800201c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <MX_USART1_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_USART1_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <MX_USART1_UART_Init+0x4c>)
 800202c:	f002 fd8e 	bl	8004b4c <HAL_UART_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002036:	f7ff fe0d 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200002e8 	.word	0x200002e8
 8002044:	40013800 	.word	0x40013800

08002048 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_USART2_UART_Init+0x4c>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <MX_USART2_UART_Init+0x50>)
 8002050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <MX_USART2_UART_Init+0x4c>)
 8002054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_USART2_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_USART2_UART_Init+0x4c>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_USART2_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_USART2_UART_Init+0x4c>)
 800206e:	220c      	movs	r2, #12
 8002070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_USART2_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_USART2_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_USART2_UART_Init+0x4c>)
 8002080:	f002 fd64 	bl	8004b4c <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800208a:	f7ff fde3 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	2000032c 	.word	0x2000032c
 8002098:	40004400 	.word	0x40004400

0800209c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08c      	sub	sp, #48	; 0x30
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a36      	ldr	r2, [pc, #216]	; (8002194 <HAL_UART_MspInit+0xf8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d131      	bne.n	8002122 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020be:	4b36      	ldr	r3, [pc, #216]	; (8002198 <HAL_UART_MspInit+0xfc>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a35      	ldr	r2, [pc, #212]	; (8002198 <HAL_UART_MspInit+0xfc>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	6213      	str	r3, [r2, #32]
 80020ca:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_UART_MspInit+0xfc>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_UART_MspInit+0xfc>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <HAL_UART_MspInit+0xfc>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	61d3      	str	r3, [r2, #28]
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_UART_MspInit+0xfc>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002100:	2307      	movs	r3, #7
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f107 031c 	add.w	r3, r7, #28
 8002108:	4619      	mov	r1, r3
 800210a:	4824      	ldr	r0, [pc, #144]	; (800219c <HAL_UART_MspInit+0x100>)
 800210c:	f000 fd3e 	bl	8002b8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	2025      	movs	r0, #37	; 0x25
 8002116:	f000 fc84 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800211a:	2025      	movs	r0, #37	; 0x25
 800211c:	f000 fc9d 	bl	8002a5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002120:	e034      	b.n	800218c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <HAL_UART_MspInit+0x104>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d12f      	bne.n	800218c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_UART_MspInit+0xfc>)
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	4a19      	ldr	r2, [pc, #100]	; (8002198 <HAL_UART_MspInit+0xfc>)
 8002132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002136:	6253      	str	r3, [r2, #36]	; 0x24
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <HAL_UART_MspInit+0xfc>)
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_UART_MspInit+0xfc>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4a13      	ldr	r2, [pc, #76]	; (8002198 <HAL_UART_MspInit+0xfc>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	61d3      	str	r3, [r2, #28]
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_UART_MspInit+0xfc>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800215c:	230c      	movs	r3, #12
 800215e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800216c:	2307      	movs	r3, #7
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	4619      	mov	r1, r3
 8002176:	4809      	ldr	r0, [pc, #36]	; (800219c <HAL_UART_MspInit+0x100>)
 8002178:	f000 fd08 	bl	8002b8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	2026      	movs	r0, #38	; 0x26
 8002182:	f000 fc4e 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002186:	2026      	movs	r0, #38	; 0x26
 8002188:	f000 fc67 	bl	8002a5a <HAL_NVIC_EnableIRQ>
}
 800218c:	bf00      	nop
 800218e:	3730      	adds	r7, #48	; 0x30
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40013800 	.word	0x40013800
 8002198:	40023800 	.word	0x40023800
 800219c:	40020000 	.word	0x40020000
 80021a0:	40004400 	.word	0x40004400

080021a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a4:	480c      	ldr	r0, [pc, #48]	; (80021d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a6:	490d      	ldr	r1, [pc, #52]	; (80021dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021bc:	4c0a      	ldr	r4, [pc, #40]	; (80021e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021ca:	f7ff fe75 	bl	8001eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ce:	f003 fa93 	bl	80056f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021d2:	f7ff fadd 	bl	8001790 <main>
  bx lr
 80021d6:	4770      	bx	lr
  ldr r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021dc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80021e0:	0800a57c 	.word	0x0800a57c
  ldr r2, =_sbss
 80021e4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80021e8:	20000384 	.word	0x20000384

080021ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021ec:	e7fe      	b.n	80021ec <ADC1_IRQHandler>

080021ee <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 fc07 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021fe:	2000      	movs	r0, #0
 8002200:	f000 f80e 	bl	8002220 <HAL_InitTick>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	71fb      	strb	r3, [r7, #7]
 800220e:	e001      	b.n	8002214 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002210:	f7ff fd26 	bl	8001c60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002214:	79fb      	ldrb	r3, [r7, #7]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_InitTick+0x68>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d022      	beq.n	800227a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_InitTick+0x6c>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_InitTick+0x68>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002240:	fbb1 f3f3 	udiv	r3, r1, r3
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fc14 	bl	8002a76 <HAL_SYSTICK_Config>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10f      	bne.n	8002274 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	d809      	bhi.n	800226e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800225a:	2200      	movs	r2, #0
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002262:	f000 fbde 	bl	8002a22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <HAL_InitTick+0x70>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e007      	b.n	800227e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	e004      	b.n	800227e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	e001      	b.n	800227e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000008 	.word	0x20000008
 800228c:	20000000 	.word	0x20000000
 8002290:	20000004 	.word	0x20000004

08002294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_IncTick+0x1c>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_IncTick+0x20>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <HAL_IncTick+0x1c>)
 80022a4:	6013      	str	r3, [r2, #0]
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000370 	.word	0x20000370
 80022b4:	20000008 	.word	0x20000008

080022b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;
 80022bc:	4b02      	ldr	r3, [pc, #8]	; (80022c8 <HAL_GetTick+0x10>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	20000370 	.word	0x20000370

080022cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_GetTick>
 80022d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e4:	d004      	beq.n	80022f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_Delay+0x40>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4413      	add	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f0:	bf00      	nop
 80022f2:	f7ff ffe1 	bl	80022b8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d8f7      	bhi.n	80022f2 <HAL_Delay+0x26>
  {
  }
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000008 	.word	0x20000008

08002310 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08e      	sub	sp, #56	; 0x38
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e127      	b.n	8002580 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d115      	bne.n	800236a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234c:	4b8e      	ldr	r3, [pc, #568]	; (8002588 <HAL_ADC_Init+0x278>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4a8d      	ldr	r2, [pc, #564]	; (8002588 <HAL_ADC_Init+0x278>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6213      	str	r3, [r2, #32]
 8002358:	4b8b      	ldr	r3, [pc, #556]	; (8002588 <HAL_ADC_Init+0x278>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7fe ff59 	bl	800121c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 80ff 	bne.w	8002576 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002380:	f023 0302 	bic.w	r3, r3, #2
 8002384:	f043 0202 	orr.w	r2, r3, #2
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800238c:	4b7f      	ldr	r3, [pc, #508]	; (800258c <HAL_ADC_Init+0x27c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	497c      	ldr	r1, [pc, #496]	; (800258c <HAL_ADC_Init+0x27c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80023a6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ae:	4619      	mov	r1, r3
 80023b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b4:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80023ca:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80023d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023d8:	4619      	mov	r1, r3
 80023da:	2302      	movs	r3, #2
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80023f2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80023f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f6:	4313      	orrs	r3, r2
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d007      	beq.n	8002412 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800240a:	4313      	orrs	r3, r2
 800240c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800240e:	4313      	orrs	r3, r2
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	d04f      	beq.n	80024c0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002426:	4313      	orrs	r3, r2
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002432:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6912      	ldr	r2, [r2, #16]
 8002438:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800243c:	d003      	beq.n	8002446 <HAL_ADC_Init+0x136>
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6912      	ldr	r2, [r2, #16]
 8002442:	2a01      	cmp	r2, #1
 8002444:	d102      	bne.n	800244c <HAL_ADC_Init+0x13c>
 8002446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800244a:	e000      	b.n	800244e <HAL_ADC_Init+0x13e>
 800244c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800244e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002452:	4313      	orrs	r3, r2
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d125      	bne.n	80024ac <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002466:	2b00      	cmp	r3, #0
 8002468:	d114      	bne.n	8002494 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	3b01      	subs	r3, #1
 8002470:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002474:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	fa92 f2a2 	rbit	r2, r2
 800247c:	617a      	str	r2, [r7, #20]
  return result;
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	fab2 f282 	clz	r2, r2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	4093      	lsls	r3, r2
 8002488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800248c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248e:	4313      	orrs	r3, r2
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
 8002492:	e00b      	b.n	80024ac <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002498:	f043 0220 	orr.w	r2, r3, #32
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <HAL_ADC_Init+0x280>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024bc:	430b      	orrs	r3, r1
 80024be:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	4b33      	ldr	r3, [pc, #204]	; (8002594 <HAL_ADC_Init+0x284>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024dc:	d003      	beq.n	80024e6 <HAL_ADC_Init+0x1d6>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d119      	bne.n	800251a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	3b01      	subs	r3, #1
 80024f6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80024fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	fa92 f2a2 	rbit	r2, r2
 8002502:	60fa      	str	r2, [r7, #12]
  return result;
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	fab2 f282 	clz	r2, r2
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	fa03 f202 	lsl.w	r2, r3, r2
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
 8002518:	e007      	b.n	800252a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_ADC_Init+0x288>)
 8002532:	4013      	ands	r3, r2
 8002534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002536:	429a      	cmp	r2, r3
 8002538:	d10b      	bne.n	8002552 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	f023 0303 	bic.w	r3, r3, #3
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002550:	e014      	b.n	800257c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	f023 0312 	bic.w	r3, r3, #18
 800255a:	f043 0210 	orr.w	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002574:	e002      	b.n	800257c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800257c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002580:	4618      	mov	r0, r3
 8002582:	3738      	adds	r7, #56	; 0x38
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	40012700 	.word	0x40012700
 8002590:	fcfc16ff 	.word	0xfcfc16ff
 8002594:	c0fff189 	.word	0xc0fff189
 8002598:	bf80fffe 	.word	0xbf80fffe

0800259c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x20>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e14f      	b.n	800285c <HAL_ADC_ConfigChannel+0x2c0>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b06      	cmp	r3, #6
 80025ca:	d81c      	bhi.n	8002606 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	3b05      	subs	r3, #5
 80025de:	221f      	movs	r2, #31
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	4019      	ands	r1, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	3b05      	subs	r3, #5
 80025f8:	fa00 f203 	lsl.w	r2, r0, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
 8002604:	e07e      	b.n	8002704 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d81c      	bhi.n	8002648 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	3b23      	subs	r3, #35	; 0x23
 8002620:	221f      	movs	r2, #31
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	4019      	ands	r1, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3b23      	subs	r3, #35	; 0x23
 800263a:	fa00 f203 	lsl.w	r2, r0, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	63da      	str	r2, [r3, #60]	; 0x3c
 8002646:	e05d      	b.n	8002704 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b12      	cmp	r3, #18
 800264e:	d81c      	bhi.n	800268a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	3b41      	subs	r3, #65	; 0x41
 8002662:	221f      	movs	r2, #31
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	4019      	ands	r1, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	3b41      	subs	r3, #65	; 0x41
 800267c:	fa00 f203 	lsl.w	r2, r0, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	639a      	str	r2, [r3, #56]	; 0x38
 8002688:	e03c      	b.n	8002704 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b18      	cmp	r3, #24
 8002690:	d81c      	bhi.n	80026cc <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	3b5f      	subs	r3, #95	; 0x5f
 80026a4:	221f      	movs	r2, #31
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	4019      	ands	r1, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	3b5f      	subs	r3, #95	; 0x5f
 80026be:	fa00 f203 	lsl.w	r2, r0, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	635a      	str	r2, [r3, #52]	; 0x34
 80026ca:	e01b      	b.n	8002704 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	3b7d      	subs	r3, #125	; 0x7d
 80026de:	221f      	movs	r2, #31
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	4019      	ands	r1, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	3b7d      	subs	r3, #125	; 0x7d
 80026f8:	fa00 f203 	lsl.w	r2, r0, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b09      	cmp	r3, #9
 800270a:	d81a      	bhi.n	8002742 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6959      	ldr	r1, [r3, #20]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	2207      	movs	r2, #7
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	4019      	ands	r1, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6898      	ldr	r0, [r3, #8]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	fa00 f203 	lsl.w	r2, r0, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	615a      	str	r2, [r3, #20]
 8002740:	e05d      	b.n	80027fe <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b13      	cmp	r3, #19
 8002748:	d81c      	bhi.n	8002784 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6919      	ldr	r1, [r3, #16]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	3b1e      	subs	r3, #30
 800275c:	2207      	movs	r2, #7
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	4019      	ands	r1, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6898      	ldr	r0, [r3, #8]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	3b1e      	subs	r3, #30
 8002776:	fa00 f203 	lsl.w	r2, r0, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	611a      	str	r2, [r3, #16]
 8002782:	e03c      	b.n	80027fe <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b1d      	cmp	r3, #29
 800278a:	d81c      	bhi.n	80027c6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68d9      	ldr	r1, [r3, #12]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	3b3c      	subs	r3, #60	; 0x3c
 800279e:	2207      	movs	r2, #7
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	4019      	ands	r1, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6898      	ldr	r0, [r3, #8]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	3b3c      	subs	r3, #60	; 0x3c
 80027b8:	fa00 f203 	lsl.w	r2, r0, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	e01b      	b.n	80027fe <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	3b5a      	subs	r3, #90	; 0x5a
 80027d8:	2207      	movs	r2, #7
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	4019      	ands	r1, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6898      	ldr	r0, [r3, #8]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	3b5a      	subs	r3, #90	; 0x5a
 80027f2:	fa00 f203 	lsl.w	r2, r0, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b10      	cmp	r3, #16
 8002804:	d003      	beq.n	800280e <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800280a:	2b11      	cmp	r3, #17
 800280c:	d121      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_ADC_ConfigChannel+0x2cc>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11b      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_ADC_ConfigChannel+0x2cc>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_ADC_ConfigChannel+0x2cc>)
 8002820:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002824:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b10      	cmp	r3, #16
 800282c:	d111      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <HAL_ADC_ConfigChannel+0x2d0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <HAL_ADC_ConfigChannel+0x2d4>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	0c9a      	lsrs	r2, r3, #18
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002844:	e002      	b.n	800284c <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3b01      	subs	r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f9      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40012700 	.word	0x40012700
 800286c:	20000000 	.word	0x20000000
 8002870:	431bde83 	.word	0x431bde83

08002874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002890:	4013      	ands	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800289c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a6:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	60d3      	str	r3, [r2, #12]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <__NVIC_GetPriorityGrouping+0x18>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	f003 0307 	and.w	r3, r3, #7
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	db0b      	blt.n	8002902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	f003 021f 	and.w	r2, r3, #31
 80028f0:	4906      	ldr	r1, [pc, #24]	; (800290c <__NVIC_EnableIRQ+0x34>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	2001      	movs	r0, #1
 80028fa:	fa00 f202 	lsl.w	r2, r0, r2
 80028fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	e000e100 	.word	0xe000e100

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db0a      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	490c      	ldr	r1, [pc, #48]	; (800295c <__NVIC_SetPriority+0x4c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	440b      	add	r3, r1
 8002934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002938:	e00a      	b.n	8002950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4908      	ldr	r1, [pc, #32]	; (8002960 <__NVIC_SetPriority+0x50>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3b04      	subs	r3, #4
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	440b      	add	r3, r1
 800294e:	761a      	strb	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000e100 	.word	0xe000e100
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf28      	it	cs
 8002982:	2304      	movcs	r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3304      	adds	r3, #4
 800298a:	2b06      	cmp	r3, #6
 800298c:	d902      	bls.n	8002994 <NVIC_EncodePriority+0x30>
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3b03      	subs	r3, #3
 8002992:	e000      	b.n	8002996 <NVIC_EncodePriority+0x32>
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	4313      	orrs	r3, r2
         );
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d8:	d301      	bcc.n	80029de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029da:	2301      	movs	r3, #1
 80029dc:	e00f      	b.n	80029fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <SysTick_Config+0x40>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e6:	210f      	movs	r1, #15
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029ec:	f7ff ff90 	bl	8002910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <SysTick_Config+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f6:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <SysTick_Config+0x40>)
 80029f8:	2207      	movs	r2, #7
 80029fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000e010 	.word	0xe000e010

08002a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ff2d 	bl	8002874 <__NVIC_SetPriorityGrouping>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a34:	f7ff ff42 	bl	80028bc <__NVIC_GetPriorityGrouping>
 8002a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f7ff ff90 	bl	8002964 <NVIC_EncodePriority>
 8002a44:	4602      	mov	r2, r0
 8002a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff5f 	bl	8002910 <__NVIC_SetPriority>
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff35 	bl	80028d8 <__NVIC_EnableIRQ>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ffa2 	bl	80029c8 <SysTick_Config>
 8002a84:	4603      	mov	r3, r0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d008      	beq.n	8002ab8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e022      	b.n	8002afe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 020e 	bic.w	r2, r2, #14
 8002ac6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f003 021c 	and.w	r2, r3, #28
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aea:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d005      	beq.n	8002b2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2204      	movs	r2, #4
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
 8002b2a:	e029      	b.n	8002b80 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 020e 	bic.w	r2, r2, #14
 8002b3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f003 021c 	and.w	r2, r3, #28
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b58:	2101      	movs	r1, #1
 8002b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
    }
  }
  return status;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ba2:	e160      	b.n	8002e66 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8152 	beq.w	8002e60 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d005      	beq.n	8002bd4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d130      	bne.n	8002c36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	f003 0201 	and.w	r2, r3, #1
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d017      	beq.n	8002c72 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d123      	bne.n	8002cc6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	08da      	lsrs	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3208      	adds	r2, #8
 8002c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	08da      	lsrs	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3208      	adds	r2, #8
 8002cc0:	6939      	ldr	r1, [r7, #16]
 8002cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0203 	and.w	r2, r3, #3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80ac 	beq.w	8002e60 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d08:	4b5e      	ldr	r3, [pc, #376]	; (8002e84 <HAL_GPIO_Init+0x2f8>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a5d      	ldr	r2, [pc, #372]	; (8002e84 <HAL_GPIO_Init+0x2f8>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6213      	str	r3, [r2, #32]
 8002d14:	4b5b      	ldr	r3, [pc, #364]	; (8002e84 <HAL_GPIO_Init+0x2f8>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d20:	4a59      	ldr	r2, [pc, #356]	; (8002e88 <HAL_GPIO_Init+0x2fc>)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	3302      	adds	r3, #2
 8002d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	220f      	movs	r2, #15
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a51      	ldr	r2, [pc, #324]	; (8002e8c <HAL_GPIO_Init+0x300>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d025      	beq.n	8002d98 <HAL_GPIO_Init+0x20c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a50      	ldr	r2, [pc, #320]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d01f      	beq.n	8002d94 <HAL_GPIO_Init+0x208>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a4f      	ldr	r2, [pc, #316]	; (8002e94 <HAL_GPIO_Init+0x308>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d019      	beq.n	8002d90 <HAL_GPIO_Init+0x204>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a4e      	ldr	r2, [pc, #312]	; (8002e98 <HAL_GPIO_Init+0x30c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d013      	beq.n	8002d8c <HAL_GPIO_Init+0x200>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a4d      	ldr	r2, [pc, #308]	; (8002e9c <HAL_GPIO_Init+0x310>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00d      	beq.n	8002d88 <HAL_GPIO_Init+0x1fc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a4c      	ldr	r2, [pc, #304]	; (8002ea0 <HAL_GPIO_Init+0x314>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d007      	beq.n	8002d84 <HAL_GPIO_Init+0x1f8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a4b      	ldr	r2, [pc, #300]	; (8002ea4 <HAL_GPIO_Init+0x318>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d101      	bne.n	8002d80 <HAL_GPIO_Init+0x1f4>
 8002d7c:	2306      	movs	r3, #6
 8002d7e:	e00c      	b.n	8002d9a <HAL_GPIO_Init+0x20e>
 8002d80:	2307      	movs	r3, #7
 8002d82:	e00a      	b.n	8002d9a <HAL_GPIO_Init+0x20e>
 8002d84:	2305      	movs	r3, #5
 8002d86:	e008      	b.n	8002d9a <HAL_GPIO_Init+0x20e>
 8002d88:	2304      	movs	r3, #4
 8002d8a:	e006      	b.n	8002d9a <HAL_GPIO_Init+0x20e>
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e004      	b.n	8002d9a <HAL_GPIO_Init+0x20e>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e002      	b.n	8002d9a <HAL_GPIO_Init+0x20e>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_GPIO_Init+0x20e>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	f002 0203 	and.w	r2, r2, #3
 8002da0:	0092      	lsls	r2, r2, #2
 8002da2:	4093      	lsls	r3, r2
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002daa:	4937      	ldr	r1, [pc, #220]	; (8002e88 <HAL_GPIO_Init+0x2fc>)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	3302      	adds	r3, #2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db8:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_GPIO_Init+0x31c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ddc:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <HAL_GPIO_Init+0x31c>)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002de2:	4b31      	ldr	r3, [pc, #196]	; (8002ea8 <HAL_GPIO_Init+0x31c>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4013      	ands	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e06:	4a28      	ldr	r2, [pc, #160]	; (8002ea8 <HAL_GPIO_Init+0x31c>)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e0c:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_GPIO_Init+0x31c>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e30:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_GPIO_Init+0x31c>)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e36:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <HAL_GPIO_Init+0x31c>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e5a:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <HAL_GPIO_Init+0x31c>)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	3301      	adds	r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f47f ae97 	bne.w	8002ba4 <HAL_GPIO_Init+0x18>
  }
}
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	40020000 	.word	0x40020000
 8002e90:	40020400 	.word	0x40020400
 8002e94:	40020800 	.word	0x40020800
 8002e98:	40020c00 	.word	0x40020c00
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40021400 	.word	0x40021400
 8002ea4:	40021800 	.word	0x40021800
 8002ea8:	40010400 	.word	0x40010400

08002eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	887b      	ldrh	r3, [r7, #2]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	e001      	b.n	8002ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	807b      	strh	r3, [r7, #2]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eea:	787b      	ldrb	r3, [r7, #1]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002ef6:	e003      	b.n	8002f00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	041a      	lsls	r2, r3, #16
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	619a      	str	r2, [r3, #24]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e12b      	b.n	8003176 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fe fa48 	bl	80013c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	; 0x24
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f70:	f001 fab2 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8002f74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4a81      	ldr	r2, [pc, #516]	; (8003180 <HAL_I2C_Init+0x274>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d807      	bhi.n	8002f90 <HAL_I2C_Init+0x84>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a80      	ldr	r2, [pc, #512]	; (8003184 <HAL_I2C_Init+0x278>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bf94      	ite	ls
 8002f88:	2301      	movls	r3, #1
 8002f8a:	2300      	movhi	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e006      	b.n	8002f9e <HAL_I2C_Init+0x92>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4a7d      	ldr	r2, [pc, #500]	; (8003188 <HAL_I2C_Init+0x27c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	bf94      	ite	ls
 8002f98:	2301      	movls	r3, #1
 8002f9a:	2300      	movhi	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0e7      	b.n	8003176 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4a78      	ldr	r2, [pc, #480]	; (800318c <HAL_I2C_Init+0x280>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0c9b      	lsrs	r3, r3, #18
 8002fb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a6a      	ldr	r2, [pc, #424]	; (8003180 <HAL_I2C_Init+0x274>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d802      	bhi.n	8002fe0 <HAL_I2C_Init+0xd4>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	e009      	b.n	8002ff4 <HAL_I2C_Init+0xe8>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	4a69      	ldr	r2, [pc, #420]	; (8003190 <HAL_I2C_Init+0x284>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003006:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	495c      	ldr	r1, [pc, #368]	; (8003180 <HAL_I2C_Init+0x274>)
 8003010:	428b      	cmp	r3, r1
 8003012:	d819      	bhi.n	8003048 <HAL_I2C_Init+0x13c>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e59      	subs	r1, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003022:	1c59      	adds	r1, r3, #1
 8003024:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003028:	400b      	ands	r3, r1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_I2C_Init+0x138>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1e59      	subs	r1, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fbb1 f3f3 	udiv	r3, r1, r3
 800303c:	3301      	adds	r3, #1
 800303e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003042:	e051      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 8003044:	2304      	movs	r3, #4
 8003046:	e04f      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <HAL_I2C_Init+0x168>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1e58      	subs	r0, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	440b      	add	r3, r1
 800305e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e012      	b.n	800309a <HAL_I2C_Init+0x18e>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e58      	subs	r0, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	0099      	lsls	r1, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	fbb0 f3f3 	udiv	r3, r0, r3
 800308a:	3301      	adds	r3, #1
 800308c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Init+0x196>
 800309e:	2301      	movs	r3, #1
 80030a0:	e022      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10e      	bne.n	80030c8 <HAL_I2C_Init+0x1bc>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1e58      	subs	r0, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	440b      	add	r3, r1
 80030b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c6:	e00f      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e58      	subs	r0, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	0099      	lsls	r1, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	6809      	ldr	r1, [r1, #0]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003116:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6911      	ldr	r1, [r2, #16]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68d2      	ldr	r2, [r2, #12]
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	430b      	orrs	r3, r1
 800312a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	000186a0 	.word	0x000186a0
 8003184:	001e847f 	.word	0x001e847f
 8003188:	003d08ff 	.word	0x003d08ff
 800318c:	431bde83 	.word	0x431bde83
 8003190:	10624dd3 	.word	0x10624dd3

08003194 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af02      	add	r7, sp, #8
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	461a      	mov	r2, r3
 80031a0:	460b      	mov	r3, r1
 80031a2:	817b      	strh	r3, [r7, #10]
 80031a4:	4613      	mov	r3, r2
 80031a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031a8:	f7ff f886 	bl	80022b8 <HAL_GetTick>
 80031ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	f040 80e0 	bne.w	800337c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	2319      	movs	r3, #25
 80031c2:	2201      	movs	r2, #1
 80031c4:	4970      	ldr	r1, [pc, #448]	; (8003388 <HAL_I2C_Master_Transmit+0x1f4>)
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fa92 	bl	80036f0 <I2C_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
 80031d4:	e0d3      	b.n	800337e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_I2C_Master_Transmit+0x50>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e0cc      	b.n	800337e <HAL_I2C_Master_Transmit+0x1ea>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d007      	beq.n	800320a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0201 	orr.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003218:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2221      	movs	r2, #33	; 0x21
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2210      	movs	r2, #16
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	893a      	ldrh	r2, [r7, #8]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4a50      	ldr	r2, [pc, #320]	; (800338c <HAL_I2C_Master_Transmit+0x1f8>)
 800324a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800324c:	8979      	ldrh	r1, [r7, #10]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f9ca 	bl	80035ec <I2C_MasterRequestWrite>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e08d      	b.n	800337e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003278:	e066      	b.n	8003348 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	6a39      	ldr	r1, [r7, #32]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fb0c 	bl	800389c <I2C_WaitOnTXEFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	2b04      	cmp	r3, #4
 8003290:	d107      	bne.n	80032a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06b      	b.n	800337e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	781a      	ldrb	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d11b      	bne.n	800331c <HAL_I2C_Master_Transmit+0x188>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d017      	beq.n	800331c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	6a39      	ldr	r1, [r7, #32]
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fafc 	bl	800391e <I2C_WaitOnBTFFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00d      	beq.n	8003348 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	2b04      	cmp	r3, #4
 8003332:	d107      	bne.n	8003344 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003342:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e01a      	b.n	800337e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	d194      	bne.n	800327a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	e000      	b.n	800337e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800337c:	2302      	movs	r3, #2
  }
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	00100002 	.word	0x00100002
 800338c:	ffff0000 	.word	0xffff0000

08003390 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	460b      	mov	r3, r1
 800339e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7fe ff8a 	bl	80022b8 <HAL_GetTick>
 80033a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80033a6:	2301      	movs	r3, #1
 80033a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	f040 8111 	bne.w	80035da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	2319      	movs	r3, #25
 80033be:	2201      	movs	r2, #1
 80033c0:	4988      	ldr	r1, [pc, #544]	; (80035e4 <HAL_I2C_IsDeviceReady+0x254>)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f994 	bl	80036f0 <I2C_WaitOnFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
 80033d0:	e104      	b.n	80035dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_I2C_IsDeviceReady+0x50>
 80033dc:	2302      	movs	r3, #2
 80033de:	e0fd      	b.n	80035dc <HAL_I2C_IsDeviceReady+0x24c>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d007      	beq.n	8003406 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003414:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2224      	movs	r2, #36	; 0x24
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4a70      	ldr	r2, [pc, #448]	; (80035e8 <HAL_I2C_IsDeviceReady+0x258>)
 8003428:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003438:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2200      	movs	r2, #0
 8003442:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f952 	bl	80036f0 <I2C_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00d      	beq.n	800346e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003460:	d103      	bne.n	800346a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e0b6      	b.n	80035dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800347c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800347e:	f7fe ff1b 	bl	80022b8 <HAL_GetTick>
 8003482:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b02      	cmp	r3, #2
 8003490:	bf0c      	ite	eq
 8003492:	2301      	moveq	r3, #1
 8003494:	2300      	movne	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034b2:	e025      	b.n	8003500 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034b4:	f7fe ff00 	bl	80022b8 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d302      	bcc.n	80034ca <HAL_I2C_IsDeviceReady+0x13a>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d103      	bne.n	80034d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	22a0      	movs	r2, #160	; 0xa0
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b02      	cmp	r3, #2
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2ba0      	cmp	r3, #160	; 0xa0
 800350a:	d005      	beq.n	8003518 <HAL_I2C_IsDeviceReady+0x188>
 800350c:	7dfb      	ldrb	r3, [r7, #23]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <HAL_I2C_IsDeviceReady+0x188>
 8003512:	7dbb      	ldrb	r3, [r7, #22]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0cd      	beq.n	80034b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d129      	bne.n	8003582 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2319      	movs	r3, #25
 800355a:	2201      	movs	r2, #1
 800355c:	4921      	ldr	r1, [pc, #132]	; (80035e4 <HAL_I2C_IsDeviceReady+0x254>)
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f8c6 	bl	80036f0 <I2C_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e036      	b.n	80035dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	e02c      	b.n	80035dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003590:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800359a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2319      	movs	r3, #25
 80035a2:	2201      	movs	r2, #1
 80035a4:	490f      	ldr	r1, [pc, #60]	; (80035e4 <HAL_I2C_IsDeviceReady+0x254>)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f8a2 	bl	80036f0 <I2C_WaitOnFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e012      	b.n	80035dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	3301      	adds	r3, #1
 80035ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	f4ff af32 	bcc.w	800342a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	00100002 	.word	0x00100002
 80035e8:	ffff0000 	.word	0xffff0000

080035ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	460b      	mov	r3, r1
 80035fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d006      	beq.n	8003616 <I2C_MasterRequestWrite+0x2a>
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d003      	beq.n	8003616 <I2C_MasterRequestWrite+0x2a>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003614:	d108      	bne.n	8003628 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	e00b      	b.n	8003640 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	2b12      	cmp	r3, #18
 800362e:	d107      	bne.n	8003640 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f84f 	bl	80036f0 <I2C_WaitOnFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00d      	beq.n	8003674 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003666:	d103      	bne.n	8003670 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e035      	b.n	80036e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800367c:	d108      	bne.n	8003690 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800367e:	897b      	ldrh	r3, [r7, #10]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800368c:	611a      	str	r2, [r3, #16]
 800368e:	e01b      	b.n	80036c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003690:	897b      	ldrh	r3, [r7, #10]
 8003692:	11db      	asrs	r3, r3, #7
 8003694:	b2db      	uxtb	r3, r3
 8003696:	f003 0306 	and.w	r3, r3, #6
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f063 030f 	orn	r3, r3, #15
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	490e      	ldr	r1, [pc, #56]	; (80036e8 <I2C_MasterRequestWrite+0xfc>)
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f875 	bl	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e010      	b.n	80036e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036be:	897b      	ldrh	r3, [r7, #10]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4907      	ldr	r1, [pc, #28]	; (80036ec <I2C_MasterRequestWrite+0x100>)
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f865 	bl	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	00010008 	.word	0x00010008
 80036ec:	00010002 	.word	0x00010002

080036f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003700:	e025      	b.n	800374e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003708:	d021      	beq.n	800374e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7fe fdd5 	bl	80022b8 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x30>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d116      	bne.n	800374e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f043 0220 	orr.w	r2, r3, #32
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e023      	b.n	8003796 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	0c1b      	lsrs	r3, r3, #16
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d10d      	bne.n	8003774 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	43da      	mvns	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4013      	ands	r3, r2
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	bf0c      	ite	eq
 800376a:	2301      	moveq	r3, #1
 800376c:	2300      	movne	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	e00c      	b.n	800378e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	43da      	mvns	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4013      	ands	r3, r2
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	429a      	cmp	r2, r3
 8003792:	d0b6      	beq.n	8003702 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ac:	e051      	b.n	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037bc:	d123      	bne.n	8003806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f043 0204 	orr.w	r2, r3, #4
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e046      	b.n	8003894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800380c:	d021      	beq.n	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fe fd53 	bl	80022b8 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d116      	bne.n	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e020      	b.n	8003894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d10c      	bne.n	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf14      	ite	ne
 800386e:	2301      	movne	r3, #1
 8003870:	2300      	moveq	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	e00b      	b.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	43da      	mvns	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4013      	ands	r3, r2
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf14      	ite	ne
 8003888:	2301      	movne	r3, #1
 800388a:	2300      	moveq	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d18d      	bne.n	80037ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038a8:	e02d      	b.n	8003906 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f878 	bl	80039a0 <I2C_IsAcknowledgeFailed>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e02d      	b.n	8003916 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c0:	d021      	beq.n	8003906 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	f7fe fcf9 	bl	80022b8 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d116      	bne.n	8003906 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f043 0220 	orr.w	r2, r3, #32
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e007      	b.n	8003916 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003910:	2b80      	cmp	r3, #128	; 0x80
 8003912:	d1ca      	bne.n	80038aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800392a:	e02d      	b.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f837 	bl	80039a0 <I2C_IsAcknowledgeFailed>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e02d      	b.n	8003998 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003942:	d021      	beq.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003944:	f7fe fcb8 	bl	80022b8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d116      	bne.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e007      	b.n	8003998 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b04      	cmp	r3, #4
 8003994:	d1ca      	bne.n	800392c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b6:	d11b      	bne.n	80039f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f043 0204 	orr.w	r2, r3, #4
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e31d      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0e:	4b94      	ldr	r3, [pc, #592]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a18:	4b91      	ldr	r3, [pc, #580]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a20:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d07b      	beq.n	8003b26 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d006      	beq.n	8003a42 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b0c      	cmp	r3, #12
 8003a38:	d10f      	bne.n	8003a5a <HAL_RCC_OscConfig+0x5e>
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	d10b      	bne.n	8003a5a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a42:	4b87      	ldr	r3, [pc, #540]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d06a      	beq.n	8003b24 <HAL_RCC_OscConfig+0x128>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d166      	bne.n	8003b24 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e2f7      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d106      	bne.n	8003a70 <HAL_RCC_OscConfig+0x74>
 8003a62:	4b7f      	ldr	r3, [pc, #508]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a7e      	ldr	r2, [pc, #504]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e02d      	b.n	8003acc <HAL_RCC_OscConfig+0xd0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10c      	bne.n	8003a92 <HAL_RCC_OscConfig+0x96>
 8003a78:	4b79      	ldr	r3, [pc, #484]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a78      	ldr	r2, [pc, #480]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b76      	ldr	r3, [pc, #472]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a75      	ldr	r2, [pc, #468]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	e01c      	b.n	8003acc <HAL_RCC_OscConfig+0xd0>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xb8>
 8003a9a:	4b71      	ldr	r3, [pc, #452]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a70      	ldr	r2, [pc, #448]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b6e      	ldr	r3, [pc, #440]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a6d      	ldr	r2, [pc, #436]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0xd0>
 8003ab4:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a69      	ldr	r2, [pc, #420]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b67      	ldr	r3, [pc, #412]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a66      	ldr	r2, [pc, #408]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fbf0 	bl	80022b8 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fe fbec 	bl	80022b8 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e2ad      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aee:	4b5c      	ldr	r3, [pc, #368]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0xe0>
 8003afa:	e014      	b.n	8003b26 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fe fbdc 	bl	80022b8 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fe fbd8 	bl	80022b8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e299      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b16:	4b52      	ldr	r3, [pc, #328]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x108>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d05a      	beq.n	8003be8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d119      	bne.n	8003b72 <HAL_RCC_OscConfig+0x176>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d116      	bne.n	8003b72 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b44:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_OscConfig+0x160>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e276      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5c:	4b40      	ldr	r3, [pc, #256]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	493d      	ldr	r1, [pc, #244]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b70:	e03a      	b.n	8003be8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d020      	beq.n	8003bbc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b7a:	4b3a      	ldr	r3, [pc, #232]	; (8003c64 <HAL_RCC_OscConfig+0x268>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fe fb9a 	bl	80022b8 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b88:	f7fe fb96 	bl	80022b8 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e257      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b9a:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	4b2e      	ldr	r3, [pc, #184]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	492a      	ldr	r1, [pc, #168]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
 8003bba:	e015      	b.n	8003be8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bbc:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <HAL_RCC_OscConfig+0x268>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc2:	f7fe fb79 	bl	80022b8 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bca:	f7fe fb75 	bl	80022b8 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e236      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bdc:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80b8 	beq.w	8003d66 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d170      	bne.n	8003cde <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bfc:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_OscConfig+0x218>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e21a      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d921      	bls.n	8003c68 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fc7d 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e208      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c38:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	4906      	ldr	r1, [pc, #24]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	061b      	lsls	r3, r3, #24
 8003c58:	4901      	ldr	r1, [pc, #4]	; (8003c60 <HAL_RCC_OscConfig+0x264>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
 8003c5e:	e020      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2a6>
 8003c60:	40023800 	.word	0x40023800
 8003c64:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c68:	4b99      	ldr	r3, [pc, #612]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	4996      	ldr	r1, [pc, #600]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c7a:	4b95      	ldr	r3, [pc, #596]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	061b      	lsls	r3, r3, #24
 8003c88:	4991      	ldr	r1, [pc, #580]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fc48 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e1d3      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	0b5b      	lsrs	r3, r3, #13
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003cb2:	4a87      	ldr	r2, [pc, #540]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003cb4:	6892      	ldr	r2, [r2, #8]
 8003cb6:	0912      	lsrs	r2, r2, #4
 8003cb8:	f002 020f 	and.w	r2, r2, #15
 8003cbc:	4985      	ldr	r1, [pc, #532]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003cbe:	5c8a      	ldrb	r2, [r1, r2]
 8003cc0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cc2:	4a85      	ldr	r2, [pc, #532]	; (8003ed8 <HAL_RCC_OscConfig+0x4dc>)
 8003cc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cc6:	4b85      	ldr	r3, [pc, #532]	; (8003edc <HAL_RCC_OscConfig+0x4e0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe faa8 	bl	8002220 <HAL_InitTick>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d045      	beq.n	8003d66 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	e1b5      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d029      	beq.n	8003d3a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ce6:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <HAL_RCC_OscConfig+0x4e4>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7fe fae4 	bl	80022b8 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf4:	f7fe fae0 	bl	80022b8 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e1a1      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d06:	4b72      	ldr	r3, [pc, #456]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d12:	4b6f      	ldr	r3, [pc, #444]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	496c      	ldr	r1, [pc, #432]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d24:	4b6a      	ldr	r3, [pc, #424]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	061b      	lsls	r3, r3, #24
 8003d32:	4967      	ldr	r1, [pc, #412]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
 8003d38:	e015      	b.n	8003d66 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d3a:	4b69      	ldr	r3, [pc, #420]	; (8003ee0 <HAL_RCC_OscConfig+0x4e4>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fe faba 	bl	80022b8 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d48:	f7fe fab6 	bl	80022b8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e177      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d030      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d016      	beq.n	8003da8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7a:	4b5a      	ldr	r3, [pc, #360]	; (8003ee4 <HAL_RCC_OscConfig+0x4e8>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d80:	f7fe fa9a 	bl	80022b8 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fe fa96 	bl	80022b8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e157      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d9a:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x38c>
 8003da6:	e015      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da8:	4b4e      	ldr	r3, [pc, #312]	; (8003ee4 <HAL_RCC_OscConfig+0x4e8>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dae:	f7fe fa83 	bl	80022b8 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db6:	f7fe fa7f 	bl	80022b8 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e140      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dc8:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f0      	bne.n	8003db6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80b5 	beq.w	8003f4c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de6:	4b3a      	ldr	r3, [pc, #232]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	4a36      	ldr	r2, [pc, #216]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6253      	str	r3, [r2, #36]	; 0x24
 8003dfe:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <HAL_RCC_OscConfig+0x4ec>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d118      	bne.n	8003e4c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1a:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <HAL_RCC_OscConfig+0x4ec>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a32      	ldr	r2, [pc, #200]	; (8003ee8 <HAL_RCC_OscConfig+0x4ec>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e26:	f7fe fa47 	bl	80022b8 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2e:	f7fe fa43 	bl	80022b8 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b64      	cmp	r3, #100	; 0x64
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e104      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <HAL_RCC_OscConfig+0x4ec>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x466>
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e58:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5e:	6353      	str	r3, [r2, #52]	; 0x34
 8003e60:	e02d      	b.n	8003ebe <HAL_RCC_OscConfig+0x4c2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x488>
 8003e6a:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e74:	6353      	str	r3, [r2, #52]	; 0x34
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e80:	6353      	str	r3, [r2, #52]	; 0x34
 8003e82:	e01c      	b.n	8003ebe <HAL_RCC_OscConfig+0x4c2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x4aa>
 8003e8c:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	4a0f      	ldr	r2, [pc, #60]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e96:	6353      	str	r3, [r2, #52]	; 0x34
 8003e98:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9c:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea2:	6353      	str	r3, [r2, #52]	; 0x34
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCC_OscConfig+0x4c2>
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eaa:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb0:	6353      	str	r3, [r2, #52]	; 0x34
 8003eb2:	4b07      	ldr	r3, [pc, #28]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb6:	4a06      	ldr	r2, [pc, #24]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ebc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d024      	beq.n	8003f10 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe f9f7 	bl	80022b8 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ecc:	e019      	b.n	8003f02 <HAL_RCC_OscConfig+0x506>
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	0800a0b0 	.word	0x0800a0b0
 8003ed8:	20000000 	.word	0x20000000
 8003edc:	20000004 	.word	0x20000004
 8003ee0:	42470020 	.word	0x42470020
 8003ee4:	42470680 	.word	0x42470680
 8003ee8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fe f9e4 	bl	80022b8 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0a3      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f02:	4b54      	ldr	r3, [pc, #336]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ee      	beq.n	8003eec <HAL_RCC_OscConfig+0x4f0>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f10:	f7fe f9d2 	bl	80022b8 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fe f9ce 	bl	80022b8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e08d      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f2e:	4b49      	ldr	r3, [pc, #292]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ee      	bne.n	8003f18 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f3a:	7ffb      	ldrb	r3, [r7, #31]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f40:	4b44      	ldr	r3, [pc, #272]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	4a43      	ldr	r2, [pc, #268]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d079      	beq.n	8004048 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	d056      	beq.n	8004008 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d13b      	bne.n	8003fda <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <HAL_RCC_OscConfig+0x65c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe f9a6 	bl	80022b8 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fe f9a2 	bl	80022b8 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e063      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f82:	4b34      	ldr	r3, [pc, #208]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f8e:	4b31      	ldr	r3, [pc, #196]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	4319      	orrs	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	492b      	ldr	r1, [pc, #172]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_RCC_OscConfig+0x65c>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb2:	f7fe f981 	bl	80022b8 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fe f97d 	bl	80022b8 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e03e      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fcc:	4b21      	ldr	r3, [pc, #132]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x5be>
 8003fd8:	e036      	b.n	8004048 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <HAL_RCC_OscConfig+0x65c>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fe f96a 	bl	80022b8 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fe f966 	bl	80022b8 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e027      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ffa:	4b16      	ldr	r3, [pc, #88]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x5ec>
 8004006:	e01f      	b.n	8004048 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e01a      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <HAL_RCC_OscConfig+0x658>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	429a      	cmp	r2, r3
 8004026:	d10d      	bne.n	8004044 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d106      	bne.n	8004044 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800
 8004058:	42470060 	.word	0x42470060

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e11a      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b8f      	ldr	r3, [pc, #572]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d919      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <HAL_RCC_ClockConfig+0x34>
 8004084:	4b8a      	ldr	r3, [pc, #552]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a89      	ldr	r2, [pc, #548]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 800408a:	f043 0304 	orr.w	r3, r3, #4
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b87      	ldr	r3, [pc, #540]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 0201 	bic.w	r2, r3, #1
 8004098:	4985      	ldr	r1, [pc, #532]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a0:	4b83      	ldr	r3, [pc, #524]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0f9      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040be:	4b7d      	ldr	r3, [pc, #500]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	497a      	ldr	r1, [pc, #488]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 808e 	beq.w	80041fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040e6:	4b73      	ldr	r3, [pc, #460]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d121      	bne.n	8004136 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0d7      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d107      	bne.n	800410e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040fe:	4b6d      	ldr	r3, [pc, #436]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d115      	bne.n	8004136 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0cb      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004116:	4b67      	ldr	r3, [pc, #412]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d109      	bne.n	8004136 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e0bf      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004126:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0b7      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004136:	4b5f      	ldr	r3, [pc, #380]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f023 0203 	bic.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	495c      	ldr	r1, [pc, #368]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004144:	4313      	orrs	r3, r2
 8004146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004148:	f7fe f8b6 	bl	80022b8 <HAL_GetTick>
 800414c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d112      	bne.n	800417c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004156:	e00a      	b.n	800416e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004158:	f7fe f8ae 	bl	80022b8 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	; 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e09b      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800416e:	4b51      	ldr	r3, [pc, #324]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b08      	cmp	r3, #8
 8004178:	d1ee      	bne.n	8004158 <HAL_RCC_ClockConfig+0xfc>
 800417a:	e03e      	b.n	80041fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d112      	bne.n	80041aa <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004184:	e00a      	b.n	800419c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004186:	f7fe f897 	bl	80022b8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f241 3288 	movw	r2, #5000	; 0x1388
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e084      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800419c:	4b45      	ldr	r3, [pc, #276]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 030c 	and.w	r3, r3, #12
 80041a4:	2b0c      	cmp	r3, #12
 80041a6:	d1ee      	bne.n	8004186 <HAL_RCC_ClockConfig+0x12a>
 80041a8:	e027      	b.n	80041fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d11d      	bne.n	80041ee <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b4:	f7fe f880 	bl	80022b8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e06d      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ca:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d1ee      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x158>
 80041d6:	e010      	b.n	80041fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d8:	f7fe f86e 	bl	80022b8 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e05b      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80041ee:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1ee      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041fa:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d219      	bcs.n	800423c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d105      	bne.n	800421a <HAL_RCC_ClockConfig+0x1be>
 800420e:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 8004214:	f043 0304 	orr.w	r3, r3, #4
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 0201 	bic.w	r2, r3, #1
 8004222:	4923      	ldr	r1, [pc, #140]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <HAL_RCC_ClockConfig+0x254>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e034      	b.n	80042a6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004248:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4917      	ldr	r1, [pc, #92]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004266:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	490f      	ldr	r1, [pc, #60]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800427a:	f000 f823 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 800427e:	4602      	mov	r2, r0
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <HAL_RCC_ClockConfig+0x258>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	490b      	ldr	r1, [pc, #44]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 800428c:	5ccb      	ldrb	r3, [r1, r3]
 800428e:	fa22 f303 	lsr.w	r3, r2, r3
 8004292:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd ffc0 	bl	8002220 <HAL_InitTick>
 80042a0:	4603      	mov	r3, r0
 80042a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80042a4:	7afb      	ldrb	r3, [r7, #11]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023c00 	.word	0x40023c00
 80042b4:	40023800 	.word	0x40023800
 80042b8:	0800a0b0 	.word	0x0800a0b0
 80042bc:	20000000 	.word	0x20000000
 80042c0:	20000004 	.word	0x20000004

080042c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c8:	b092      	sub	sp, #72	; 0x48
 80042ca:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80042cc:	4b79      	ldr	r3, [pc, #484]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b0c      	cmp	r3, #12
 80042da:	d00d      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x34>
 80042dc:	2b0c      	cmp	r3, #12
 80042de:	f200 80d5 	bhi.w	800448c <HAL_RCC_GetSysClockFreq+0x1c8>
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d002      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x28>
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_GetSysClockFreq+0x2e>
 80042ea:	e0cf      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b72      	ldr	r3, [pc, #456]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80042ee:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80042f0:	e0da      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042f2:	4b72      	ldr	r3, [pc, #456]	; (80044bc <HAL_RCC_GetSysClockFreq+0x1f8>)
 80042f4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80042f6:	e0d7      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80042f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fa:	0c9b      	lsrs	r3, r3, #18
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	4b6f      	ldr	r3, [pc, #444]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004302:	5c9b      	ldrb	r3, [r3, r2]
 8004304:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004308:	0d9b      	lsrs	r3, r3, #22
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	3301      	adds	r3, #1
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004312:	4b68      	ldr	r3, [pc, #416]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d05d      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	2200      	movs	r2, #0
 8004322:	4618      	mov	r0, r3
 8004324:	4611      	mov	r1, r2
 8004326:	4604      	mov	r4, r0
 8004328:	460d      	mov	r5, r1
 800432a:	4622      	mov	r2, r4
 800432c:	462b      	mov	r3, r5
 800432e:	f04f 0000 	mov.w	r0, #0
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	0159      	lsls	r1, r3, #5
 8004338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800433c:	0150      	lsls	r0, r2, #5
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4621      	mov	r1, r4
 8004344:	1a51      	subs	r1, r2, r1
 8004346:	6139      	str	r1, [r7, #16]
 8004348:	4629      	mov	r1, r5
 800434a:	eb63 0301 	sbc.w	r3, r3, r1
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800435c:	4659      	mov	r1, fp
 800435e:	018b      	lsls	r3, r1, #6
 8004360:	4651      	mov	r1, sl
 8004362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004366:	4651      	mov	r1, sl
 8004368:	018a      	lsls	r2, r1, #6
 800436a:	46d4      	mov	ip, sl
 800436c:	ebb2 080c 	subs.w	r8, r2, ip
 8004370:	4659      	mov	r1, fp
 8004372:	eb63 0901 	sbc.w	r9, r3, r1
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800438a:	4690      	mov	r8, r2
 800438c:	4699      	mov	r9, r3
 800438e:	4623      	mov	r3, r4
 8004390:	eb18 0303 	adds.w	r3, r8, r3
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	462b      	mov	r3, r5
 8004398:	eb49 0303 	adc.w	r3, r9, r3
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043aa:	4629      	mov	r1, r5
 80043ac:	024b      	lsls	r3, r1, #9
 80043ae:	4620      	mov	r0, r4
 80043b0:	4629      	mov	r1, r5
 80043b2:	4604      	mov	r4, r0
 80043b4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80043b8:	4601      	mov	r1, r0
 80043ba:	024a      	lsls	r2, r1, #9
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c2:	2200      	movs	r2, #0
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043cc:	f7fc fbe4 	bl	8000b98 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4613      	mov	r3, r2
 80043d6:	647b      	str	r3, [r7, #68]	; 0x44
 80043d8:	e055      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	2200      	movs	r2, #0
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	627a      	str	r2, [r7, #36]	; 0x24
 80043e2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043e6:	4642      	mov	r2, r8
 80043e8:	464b      	mov	r3, r9
 80043ea:	f04f 0000 	mov.w	r0, #0
 80043ee:	f04f 0100 	mov.w	r1, #0
 80043f2:	0159      	lsls	r1, r3, #5
 80043f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f8:	0150      	lsls	r0, r2, #5
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	46c4      	mov	ip, r8
 8004400:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004404:	4640      	mov	r0, r8
 8004406:	4649      	mov	r1, r9
 8004408:	468c      	mov	ip, r1
 800440a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800441a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800441e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004422:	ebb2 040a 	subs.w	r4, r2, sl
 8004426:	eb63 050b 	sbc.w	r5, r3, fp
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	00eb      	lsls	r3, r5, #3
 8004434:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004438:	00e2      	lsls	r2, r4, #3
 800443a:	4614      	mov	r4, r2
 800443c:	461d      	mov	r5, r3
 800443e:	4603      	mov	r3, r0
 8004440:	18e3      	adds	r3, r4, r3
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	460b      	mov	r3, r1
 8004446:	eb45 0303 	adc.w	r3, r5, r3
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004458:	4629      	mov	r1, r5
 800445a:	028b      	lsls	r3, r1, #10
 800445c:	4620      	mov	r0, r4
 800445e:	4629      	mov	r1, r5
 8004460:	4604      	mov	r4, r0
 8004462:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004466:	4601      	mov	r1, r0
 8004468:	028a      	lsls	r2, r1, #10
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	2200      	movs	r2, #0
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	61fa      	str	r2, [r7, #28]
 8004476:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800447a:	f7fc fb8d 	bl	8000b98 <__aeabi_uldivmod>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4613      	mov	r3, r2
 8004484:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004488:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800448a:	e00d      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	0b5b      	lsrs	r3, r3, #13
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	3301      	adds	r3, #1
 800449c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80044a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3748      	adds	r7, #72	; 0x48
 80044ae:	46bd      	mov	sp, r7
 80044b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b4:	40023800 	.word	0x40023800
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	007a1200 	.word	0x007a1200
 80044c0:	0800a0a4 	.word	0x0800a0a4

080044c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c8:	4b02      	ldr	r3, [pc, #8]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80044ca:	681b      	ldr	r3, [r3, #0]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	20000000 	.word	0x20000000

080044d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044dc:	f7ff fff2 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	0800a0c0 	.word	0x0800a0c0

08004500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004504:	f7ff ffde 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0adb      	lsrs	r3, r3, #11
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4903      	ldr	r1, [pc, #12]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	0800a0c0 	.word	0x0800a0c0

08004528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004534:	4b29      	ldr	r3, [pc, #164]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d12c      	bne.n	800459a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004540:	4b26      	ldr	r3, [pc, #152]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800454c:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e016      	b.n	8004586 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004558:	4b20      	ldr	r3, [pc, #128]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800455e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004562:	6253      	str	r3, [r2, #36]	; 0x24
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004570:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004578:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004584:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800458c:	d105      	bne.n	800459a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004594:	d101      	bne.n	800459a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004596:	2301      	movs	r3, #1
 8004598:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <RCC_SetFlashLatencyFromMSIRange+0x84>
 80045a0:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045a6:	f043 0304 	orr.w	r3, r3, #4
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f023 0201 	bic.w	r2, r3, #1
 80045b4:	490b      	ldr	r1, [pc, #44]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d001      	beq.n	80045ce <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40007000 	.word	0x40007000
 80045e4:	40023c00 	.word	0x40023c00

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e031      	b.n	800465e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fd fca4 	bl	8001f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 f92c 	bl	8004884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	d001      	beq.n	8004680 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e032      	b.n	80046e6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004690:	d00e      	beq.n	80046b0 <HAL_TIM_Base_Start+0x48>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <HAL_TIM_Base_Start+0x88>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d009      	beq.n	80046b0 <HAL_TIM_Base_Start+0x48>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <HAL_TIM_Base_Start+0x8c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_TIM_Base_Start+0x48>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <HAL_TIM_Base_Start+0x90>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d111      	bne.n	80046d4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d010      	beq.n	80046e4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0201 	orr.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d2:	e007      	b.n	80046e4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800
 80046f8:	40010800 	.word	0x40010800

080046fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIM_ConfigClockSource+0x18>
 8004710:	2302      	movs	r3, #2
 8004712:	e0b3      	b.n	800487c <HAL_TIM_ConfigClockSource+0x180>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474c:	d03e      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0xd0>
 800474e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004752:	f200 8087 	bhi.w	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	f000 8085 	beq.w	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	d87f      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d01a      	beq.n	800479e <HAL_TIM_ConfigClockSource+0xa2>
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d87b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d050      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x116>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d877      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004774:	2b50      	cmp	r3, #80	; 0x50
 8004776:	d03c      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0xf6>
 8004778:	2b50      	cmp	r3, #80	; 0x50
 800477a:	d873      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d058      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x136>
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d86f      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d064      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
 8004788:	2b30      	cmp	r3, #48	; 0x30
 800478a:	d86b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d060      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d867      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d05c      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
 8004798:	2b10      	cmp	r3, #16
 800479a:	d05a      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800479c:	e062      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6899      	ldr	r1, [r3, #8]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f000 f950 	bl	8004a52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	609a      	str	r2, [r3, #8]
      break;
 80047ca:	e04e      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6899      	ldr	r1, [r3, #8]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f000 f939 	bl	8004a52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ee:	609a      	str	r2, [r3, #8]
      break;
 80047f0:	e03b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	461a      	mov	r2, r3
 8004800:	f000 f8b0 	bl	8004964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2150      	movs	r1, #80	; 0x50
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f907 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 8004810:	e02b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	461a      	mov	r2, r3
 8004820:	f000 f8ce 	bl	80049c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2160      	movs	r1, #96	; 0x60
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f8f7 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 8004830:	e01b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	461a      	mov	r2, r3
 8004840:	f000 f890 	bl	8004964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f8e7 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 8004850:	e00b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f000 f8de 	bl	8004a1e <TIM_ITRx_SetConfig>
        break;
 8004862:	e002      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004868:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489a:	d00f      	beq.n	80048bc <TIM_Base_SetConfig+0x38>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a2b      	ldr	r2, [pc, #172]	; (800494c <TIM_Base_SetConfig+0xc8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00b      	beq.n	80048bc <TIM_Base_SetConfig+0x38>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a2a      	ldr	r2, [pc, #168]	; (8004950 <TIM_Base_SetConfig+0xcc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d007      	beq.n	80048bc <TIM_Base_SetConfig+0x38>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a29      	ldr	r2, [pc, #164]	; (8004954 <TIM_Base_SetConfig+0xd0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_Base_SetConfig+0x38>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a28      	ldr	r2, [pc, #160]	; (8004958 <TIM_Base_SetConfig+0xd4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d108      	bne.n	80048ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d4:	d017      	beq.n	8004906 <TIM_Base_SetConfig+0x82>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1c      	ldr	r2, [pc, #112]	; (800494c <TIM_Base_SetConfig+0xc8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <TIM_Base_SetConfig+0x82>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <TIM_Base_SetConfig+0xcc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00f      	beq.n	8004906 <TIM_Base_SetConfig+0x82>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a1a      	ldr	r2, [pc, #104]	; (8004954 <TIM_Base_SetConfig+0xd0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00b      	beq.n	8004906 <TIM_Base_SetConfig+0x82>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a19      	ldr	r2, [pc, #100]	; (8004958 <TIM_Base_SetConfig+0xd4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d007      	beq.n	8004906 <TIM_Base_SetConfig+0x82>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a18      	ldr	r2, [pc, #96]	; (800495c <TIM_Base_SetConfig+0xd8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d003      	beq.n	8004906 <TIM_Base_SetConfig+0x82>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a17      	ldr	r2, [pc, #92]	; (8004960 <TIM_Base_SetConfig+0xdc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	615a      	str	r2, [r3, #20]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40010800 	.word	0x40010800
 800495c:	40010c00 	.word	0x40010c00
 8004960:	40011000 	.word	0x40011000

08004964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f023 0201 	bic.w	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800498e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f023 030a 	bic.w	r3, r3, #10
 80049a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	f023 0210 	bic.w	r2, r3, #16
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	031b      	lsls	r3, r3, #12
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	621a      	str	r2, [r3, #32]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr

08004a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f043 0307 	orr.w	r3, r3, #7
 8004a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	609a      	str	r2, [r3, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr

08004a52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b087      	sub	sp, #28
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	021a      	lsls	r2, r3, #8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	609a      	str	r2, [r3, #8]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e046      	b.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aea:	d00e      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a10      	ldr	r2, [pc, #64]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d10c      	bne.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800
 8004b48:	40010800 	.word	0x40010800

08004b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e03f      	b.n	8004bde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fd fa92 	bl	800209c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2224      	movs	r2, #36	; 0x24
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fcc7 	bl	8005524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b08a      	sub	sp, #40	; 0x28
 8004bea:	af02      	add	r7, sp, #8
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	603b      	str	r3, [r7, #0]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d17c      	bne.n	8004d00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_UART_Transmit+0x2c>
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e075      	b.n	8004d02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_UART_Transmit+0x3e>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e06e      	b.n	8004d02 <HAL_UART_Transmit+0x11c>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2221      	movs	r2, #33	; 0x21
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c3a:	f7fd fb3d 	bl	80022b8 <HAL_GetTick>
 8004c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	88fa      	ldrh	r2, [r7, #6]
 8004c44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c54:	d108      	bne.n	8004c68 <HAL_UART_Transmit+0x82>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d104      	bne.n	8004c68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	e003      	b.n	8004c70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c78:	e02a      	b.n	8004cd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	2180      	movs	r1, #128	; 0x80
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fab3 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e036      	b.n	8004d02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	3302      	adds	r3, #2
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	e007      	b.n	8004cc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	781a      	ldrb	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1cf      	bne.n	8004c7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2140      	movs	r1, #64	; 0x40
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fa83 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e006      	b.n	8004d02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e000      	b.n	8004d02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d00:	2302      	movs	r3, #2
  }
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b08a      	sub	sp, #40	; 0x28
 8004d0e:	af02      	add	r7, sp, #8
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	f040 808c 	bne.w	8004e44 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Receive+0x2e>
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e084      	b.n	8004e46 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Receive+0x40>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e07d      	b.n	8004e46 <HAL_UART_Receive+0x13c>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2222      	movs	r2, #34	; 0x22
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d66:	f7fd faa7 	bl	80022b8 <HAL_GetTick>
 8004d6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d80:	d108      	bne.n	8004d94 <HAL_UART_Receive+0x8a>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	e003      	b.n	8004d9c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004da4:	e043      	b.n	8004e2e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2200      	movs	r2, #0
 8004dae:	2120      	movs	r1, #32
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fa1d 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e042      	b.n	8004e46 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10c      	bne.n	8004de0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	3302      	adds	r3, #2
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e01f      	b.n	8004e20 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de8:	d007      	beq.n	8004dfa <HAL_UART_Receive+0xf0>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <HAL_UART_Receive+0xfe>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	e008      	b.n	8004e1a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1b6      	bne.n	8004da6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	; 0x28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x52>
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa99 	bl	80053d2 <UART_Receive_IT>
      return;
 8004ea0:	e17b      	b.n	800519a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80b1 	beq.w	800500c <HAL_UART_IRQHandler+0x1bc>
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <HAL_UART_IRQHandler+0x70>
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 80a6 	beq.w	800500c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x90>
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <HAL_UART_IRQHandler+0xb0>
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	f043 0202 	orr.w	r2, r3, #2
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <HAL_UART_IRQHandler+0xd0>
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f043 0204 	orr.w	r2, r3, #4
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00f      	beq.n	8004f4a <HAL_UART_IRQHandler+0xfa>
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d104      	bne.n	8004f3e <HAL_UART_IRQHandler+0xee>
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0208 	orr.w	r2, r3, #8
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 811e 	beq.w	8005190 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_UART_IRQHandler+0x11e>
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fa32 	bl	80053d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <HAL_UART_IRQHandler+0x146>
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d031      	beq.n	8004ffa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f974 	bl	8005284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b40      	cmp	r3, #64	; 0x40
 8004fa8:	d123      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d013      	beq.n	8004fea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	4a76      	ldr	r2, [pc, #472]	; (80051a0 <HAL_UART_IRQHandler+0x350>)
 8004fc8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fd fd9a 	bl	8002b08 <HAL_DMA_Abort_IT>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d016      	beq.n	8005008 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe8:	e00e      	b.n	8005008 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8ec 	bl	80051c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff0:	e00a      	b.n	8005008 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f8e8 	bl	80051c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff8:	e006      	b.n	8005008 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f8e4 	bl	80051c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005006:	e0c3      	b.n	8005190 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005008:	bf00      	nop
    return;
 800500a:	e0c1      	b.n	8005190 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	2b01      	cmp	r3, #1
 8005012:	f040 80a1 	bne.w	8005158 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 809b 	beq.w	8005158 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8095 	beq.w	8005158 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d14e      	bne.n	80050f0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800505c:	8a3b      	ldrh	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 8098 	beq.w	8005194 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005068:	8a3a      	ldrh	r2, [r7, #16]
 800506a:	429a      	cmp	r2, r3
 800506c:	f080 8092 	bcs.w	8005194 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8a3a      	ldrh	r2, [r7, #16]
 8005074:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2b20      	cmp	r3, #32
 800507e:	d02b      	beq.n	80050d8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800508e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0210 	bic.w	r2, r2, #16
 80050cc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fd fcdb 	bl	8002a8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f876 	bl	80051da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80050ee:	e051      	b.n	8005194 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d047      	beq.n	8005198 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005108:	8a7b      	ldrh	r3, [r7, #18]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d044      	beq.n	8005198 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800511c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695a      	ldr	r2, [r3, #20]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0210 	bic.w	r2, r2, #16
 800514a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800514c:	8a7b      	ldrh	r3, [r7, #18]
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f842 	bl	80051da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005156:	e01f      	b.n	8005198 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <HAL_UART_IRQHandler+0x324>
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f8c9 	bl	8005304 <UART_Transmit_IT>
    return;
 8005172:	e012      	b.n	800519a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <HAL_UART_IRQHandler+0x34a>
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f90a 	bl	80053a2 <UART_EndTransmit_IT>
    return;
 800518e:	e004      	b.n	800519a <HAL_UART_IRQHandler+0x34a>
    return;
 8005190:	bf00      	nop
 8005192:	e002      	b.n	800519a <HAL_UART_IRQHandler+0x34a>
      return;
 8005194:	bf00      	nop
 8005196:	e000      	b.n	800519a <HAL_UART_IRQHandler+0x34a>
      return;
 8005198:	bf00      	nop
  }
}
 800519a:	3728      	adds	r7, #40	; 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	080052dd 	.word	0x080052dd

080051a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr

080051b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr

080051c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr

080051da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	460b      	mov	r3, r1
 80051e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005200:	e02c      	b.n	800525c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005208:	d028      	beq.n	800525c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <UART_WaitOnFlagUntilTimeout+0x30>
 8005210:	f7fd f852 	bl	80022b8 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	429a      	cmp	r2, r3
 800521e:	d21d      	bcs.n	800525c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800522e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695a      	ldr	r2, [r3, #20]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e00f      	b.n	800527c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4013      	ands	r3, r2
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	429a      	cmp	r2, r3
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	429a      	cmp	r2, r3
 8005278:	d0c3      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800529a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0201 	bic.w	r2, r2, #1
 80052aa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d107      	bne.n	80052c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0210 	bic.w	r2, r2, #16
 80052c2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr

080052dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff ff66 	bl	80051c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b21      	cmp	r3, #33	; 0x21
 8005316:	d13e      	bne.n	8005396 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005320:	d114      	bne.n	800534c <UART_Transmit_IT+0x48>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d110      	bne.n	800534c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800533e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	1c9a      	adds	r2, r3, #2
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	621a      	str	r2, [r3, #32]
 800534a:	e008      	b.n	800535e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	1c59      	adds	r1, r3, #1
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6211      	str	r1, [r2, #32]
 8005356:	781a      	ldrb	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29b      	uxth	r3, r3
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	4619      	mov	r1, r3
 800536c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10f      	bne.n	8005392 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005380:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005390:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	e000      	b.n	8005398 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005396:	2302      	movs	r3, #2
  }
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff feee 	bl	80051a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b086      	sub	sp, #24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b22      	cmp	r3, #34	; 0x22
 80053e4:	f040 8099 	bne.w	800551a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f0:	d117      	bne.n	8005422 <UART_Receive_IT+0x50>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d113      	bne.n	8005422 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005410:	b29a      	uxth	r2, r3
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	1c9a      	adds	r2, r3, #2
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	629a      	str	r2, [r3, #40]	; 0x28
 8005420:	e026      	b.n	8005470 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005428:	2300      	movs	r3, #0
 800542a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005434:	d007      	beq.n	8005446 <UART_Receive_IT+0x74>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <UART_Receive_IT+0x82>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	b2da      	uxtb	r2, r3
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	e008      	b.n	8005466 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005460:	b2da      	uxtb	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29b      	uxth	r3, r3
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4619      	mov	r1, r3
 800547e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005480:	2b00      	cmp	r3, #0
 8005482:	d148      	bne.n	8005516 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0220 	bic.w	r2, r2, #32
 8005492:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0201 	bic.w	r2, r2, #1
 80054b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d123      	bne.n	800550c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0210 	bic.w	r2, r2, #16
 80054d8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	2b10      	cmp	r3, #16
 80054e6:	d10a      	bne.n	80054fe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff fe68 	bl	80051da <HAL_UARTEx_RxEventCallback>
 800550a:	e002      	b.n	8005512 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff fe52 	bl	80051b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e002      	b.n	800551c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	e000      	b.n	800551c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800551a:	2302      	movs	r3, #2
  }
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	4313      	orrs	r3, r2
 8005558:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005564:	f023 030c 	bic.w	r3, r3, #12
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	430b      	orrs	r3, r1
 8005570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a55      	ldr	r2, [pc, #340]	; (80056e4 <UART_SetConfig+0x1c0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d103      	bne.n	800559a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005592:	f7fe ffb5 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	e002      	b.n	80055a0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800559a:	f7fe ff9d 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 800559e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a8:	d14c      	bne.n	8005644 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	009a      	lsls	r2, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c0:	4a49      	ldr	r2, [pc, #292]	; (80056e8 <UART_SetConfig+0x1c4>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	0119      	lsls	r1, r3, #4
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	009a      	lsls	r2, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80055e0:	4b41      	ldr	r3, [pc, #260]	; (80056e8 <UART_SetConfig+0x1c4>)
 80055e2:	fba3 0302 	umull	r0, r3, r3, r2
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	2064      	movs	r0, #100	; 0x64
 80055ea:	fb00 f303 	mul.w	r3, r0, r3
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	3332      	adds	r3, #50	; 0x32
 80055f4:	4a3c      	ldr	r2, [pc, #240]	; (80056e8 <UART_SetConfig+0x1c4>)
 80055f6:	fba2 2303 	umull	r2, r3, r2, r3
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005602:	4419      	add	r1, r3
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009a      	lsls	r2, r3, #2
 800560e:	441a      	add	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	fbb2 f2f3 	udiv	r2, r2, r3
 800561a:	4b33      	ldr	r3, [pc, #204]	; (80056e8 <UART_SetConfig+0x1c4>)
 800561c:	fba3 0302 	umull	r0, r3, r3, r2
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	2064      	movs	r0, #100	; 0x64
 8005624:	fb00 f303 	mul.w	r3, r0, r3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	3332      	adds	r3, #50	; 0x32
 800562e:	4a2e      	ldr	r2, [pc, #184]	; (80056e8 <UART_SetConfig+0x1c4>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	f003 0207 	and.w	r2, r3, #7
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	440a      	add	r2, r1
 8005640:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005642:	e04a      	b.n	80056da <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	009a      	lsls	r2, r3, #2
 800564e:	441a      	add	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	4a23      	ldr	r2, [pc, #140]	; (80056e8 <UART_SetConfig+0x1c4>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	0119      	lsls	r1, r3, #4
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	009a      	lsls	r2, r3, #2
 800566e:	441a      	add	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	fbb2 f2f3 	udiv	r2, r2, r3
 800567a:	4b1b      	ldr	r3, [pc, #108]	; (80056e8 <UART_SetConfig+0x1c4>)
 800567c:	fba3 0302 	umull	r0, r3, r3, r2
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	2064      	movs	r0, #100	; 0x64
 8005684:	fb00 f303 	mul.w	r3, r0, r3
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	3332      	adds	r3, #50	; 0x32
 800568e:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <UART_SetConfig+0x1c4>)
 8005690:	fba2 2303 	umull	r2, r3, r2, r3
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800569a:	4419      	add	r1, r3
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009a      	lsls	r2, r3, #2
 80056a6:	441a      	add	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80056b2:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <UART_SetConfig+0x1c4>)
 80056b4:	fba3 0302 	umull	r0, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	2064      	movs	r0, #100	; 0x64
 80056bc:	fb00 f303 	mul.w	r3, r0, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	3332      	adds	r3, #50	; 0x32
 80056c6:	4a08      	ldr	r2, [pc, #32]	; (80056e8 <UART_SetConfig+0x1c4>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	f003 020f 	and.w	r2, r3, #15
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	440a      	add	r2, r1
 80056d8:	609a      	str	r2, [r3, #8]
}
 80056da:	bf00      	nop
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40013800 	.word	0x40013800
 80056e8:	51eb851f 	.word	0x51eb851f

080056ec <__errno>:
 80056ec:	4b01      	ldr	r3, [pc, #4]	; (80056f4 <__errno+0x8>)
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	2000000c 	.word	0x2000000c

080056f8 <__libc_init_array>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	2600      	movs	r6, #0
 80056fc:	4d0c      	ldr	r5, [pc, #48]	; (8005730 <__libc_init_array+0x38>)
 80056fe:	4c0d      	ldr	r4, [pc, #52]	; (8005734 <__libc_init_array+0x3c>)
 8005700:	1b64      	subs	r4, r4, r5
 8005702:	10a4      	asrs	r4, r4, #2
 8005704:	42a6      	cmp	r6, r4
 8005706:	d109      	bne.n	800571c <__libc_init_array+0x24>
 8005708:	f004 fc50 	bl	8009fac <_init>
 800570c:	2600      	movs	r6, #0
 800570e:	4d0a      	ldr	r5, [pc, #40]	; (8005738 <__libc_init_array+0x40>)
 8005710:	4c0a      	ldr	r4, [pc, #40]	; (800573c <__libc_init_array+0x44>)
 8005712:	1b64      	subs	r4, r4, r5
 8005714:	10a4      	asrs	r4, r4, #2
 8005716:	42a6      	cmp	r6, r4
 8005718:	d105      	bne.n	8005726 <__libc_init_array+0x2e>
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005720:	4798      	blx	r3
 8005722:	3601      	adds	r6, #1
 8005724:	e7ee      	b.n	8005704 <__libc_init_array+0xc>
 8005726:	f855 3b04 	ldr.w	r3, [r5], #4
 800572a:	4798      	blx	r3
 800572c:	3601      	adds	r6, #1
 800572e:	e7f2      	b.n	8005716 <__libc_init_array+0x1e>
 8005730:	0800a574 	.word	0x0800a574
 8005734:	0800a574 	.word	0x0800a574
 8005738:	0800a574 	.word	0x0800a574
 800573c:	0800a578 	.word	0x0800a578

08005740 <memset>:
 8005740:	4603      	mov	r3, r0
 8005742:	4402      	add	r2, r0
 8005744:	4293      	cmp	r3, r2
 8005746:	d100      	bne.n	800574a <memset+0xa>
 8005748:	4770      	bx	lr
 800574a:	f803 1b01 	strb.w	r1, [r3], #1
 800574e:	e7f9      	b.n	8005744 <memset+0x4>

08005750 <__cvt>:
 8005750:	2b00      	cmp	r3, #0
 8005752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005756:	461f      	mov	r7, r3
 8005758:	bfbb      	ittet	lt
 800575a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800575e:	461f      	movlt	r7, r3
 8005760:	2300      	movge	r3, #0
 8005762:	232d      	movlt	r3, #45	; 0x2d
 8005764:	b088      	sub	sp, #32
 8005766:	4614      	mov	r4, r2
 8005768:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800576a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800576c:	7013      	strb	r3, [r2, #0]
 800576e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005770:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005774:	f023 0820 	bic.w	r8, r3, #32
 8005778:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800577c:	d005      	beq.n	800578a <__cvt+0x3a>
 800577e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005782:	d100      	bne.n	8005786 <__cvt+0x36>
 8005784:	3501      	adds	r5, #1
 8005786:	2302      	movs	r3, #2
 8005788:	e000      	b.n	800578c <__cvt+0x3c>
 800578a:	2303      	movs	r3, #3
 800578c:	aa07      	add	r2, sp, #28
 800578e:	9204      	str	r2, [sp, #16]
 8005790:	aa06      	add	r2, sp, #24
 8005792:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005796:	e9cd 3500 	strd	r3, r5, [sp]
 800579a:	4622      	mov	r2, r4
 800579c:	463b      	mov	r3, r7
 800579e:	f001 fd83 	bl	80072a8 <_dtoa_r>
 80057a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057a6:	4606      	mov	r6, r0
 80057a8:	d102      	bne.n	80057b0 <__cvt+0x60>
 80057aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057ac:	07db      	lsls	r3, r3, #31
 80057ae:	d522      	bpl.n	80057f6 <__cvt+0xa6>
 80057b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057b4:	eb06 0905 	add.w	r9, r6, r5
 80057b8:	d110      	bne.n	80057dc <__cvt+0x8c>
 80057ba:	7833      	ldrb	r3, [r6, #0]
 80057bc:	2b30      	cmp	r3, #48	; 0x30
 80057be:	d10a      	bne.n	80057d6 <__cvt+0x86>
 80057c0:	2200      	movs	r2, #0
 80057c2:	2300      	movs	r3, #0
 80057c4:	4620      	mov	r0, r4
 80057c6:	4639      	mov	r1, r7
 80057c8:	f7fb f906 	bl	80009d8 <__aeabi_dcmpeq>
 80057cc:	b918      	cbnz	r0, 80057d6 <__cvt+0x86>
 80057ce:	f1c5 0501 	rsb	r5, r5, #1
 80057d2:	f8ca 5000 	str.w	r5, [sl]
 80057d6:	f8da 3000 	ldr.w	r3, [sl]
 80057da:	4499      	add	r9, r3
 80057dc:	2200      	movs	r2, #0
 80057de:	2300      	movs	r3, #0
 80057e0:	4620      	mov	r0, r4
 80057e2:	4639      	mov	r1, r7
 80057e4:	f7fb f8f8 	bl	80009d8 <__aeabi_dcmpeq>
 80057e8:	b108      	cbz	r0, 80057ee <__cvt+0x9e>
 80057ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80057ee:	2230      	movs	r2, #48	; 0x30
 80057f0:	9b07      	ldr	r3, [sp, #28]
 80057f2:	454b      	cmp	r3, r9
 80057f4:	d307      	bcc.n	8005806 <__cvt+0xb6>
 80057f6:	4630      	mov	r0, r6
 80057f8:	9b07      	ldr	r3, [sp, #28]
 80057fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80057fc:	1b9b      	subs	r3, r3, r6
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	b008      	add	sp, #32
 8005802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005806:	1c59      	adds	r1, r3, #1
 8005808:	9107      	str	r1, [sp, #28]
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	e7f0      	b.n	80057f0 <__cvt+0xa0>

0800580e <__exponent>:
 800580e:	4603      	mov	r3, r0
 8005810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005812:	2900      	cmp	r1, #0
 8005814:	f803 2b02 	strb.w	r2, [r3], #2
 8005818:	bfb6      	itet	lt
 800581a:	222d      	movlt	r2, #45	; 0x2d
 800581c:	222b      	movge	r2, #43	; 0x2b
 800581e:	4249      	neglt	r1, r1
 8005820:	2909      	cmp	r1, #9
 8005822:	7042      	strb	r2, [r0, #1]
 8005824:	dd2b      	ble.n	800587e <__exponent+0x70>
 8005826:	f10d 0407 	add.w	r4, sp, #7
 800582a:	46a4      	mov	ip, r4
 800582c:	270a      	movs	r7, #10
 800582e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005832:	460a      	mov	r2, r1
 8005834:	46a6      	mov	lr, r4
 8005836:	fb07 1516 	mls	r5, r7, r6, r1
 800583a:	2a63      	cmp	r2, #99	; 0x63
 800583c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005840:	4631      	mov	r1, r6
 8005842:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005846:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800584a:	dcf0      	bgt.n	800582e <__exponent+0x20>
 800584c:	3130      	adds	r1, #48	; 0x30
 800584e:	f1ae 0502 	sub.w	r5, lr, #2
 8005852:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005856:	4629      	mov	r1, r5
 8005858:	1c44      	adds	r4, r0, #1
 800585a:	4561      	cmp	r1, ip
 800585c:	d30a      	bcc.n	8005874 <__exponent+0x66>
 800585e:	f10d 0209 	add.w	r2, sp, #9
 8005862:	eba2 020e 	sub.w	r2, r2, lr
 8005866:	4565      	cmp	r5, ip
 8005868:	bf88      	it	hi
 800586a:	2200      	movhi	r2, #0
 800586c:	4413      	add	r3, r2
 800586e:	1a18      	subs	r0, r3, r0
 8005870:	b003      	add	sp, #12
 8005872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005874:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005878:	f804 2f01 	strb.w	r2, [r4, #1]!
 800587c:	e7ed      	b.n	800585a <__exponent+0x4c>
 800587e:	2330      	movs	r3, #48	; 0x30
 8005880:	3130      	adds	r1, #48	; 0x30
 8005882:	7083      	strb	r3, [r0, #2]
 8005884:	70c1      	strb	r1, [r0, #3]
 8005886:	1d03      	adds	r3, r0, #4
 8005888:	e7f1      	b.n	800586e <__exponent+0x60>
	...

0800588c <_printf_float>:
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	b091      	sub	sp, #68	; 0x44
 8005892:	460c      	mov	r4, r1
 8005894:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005898:	4616      	mov	r6, r2
 800589a:	461f      	mov	r7, r3
 800589c:	4605      	mov	r5, r0
 800589e:	f002 fe57 	bl	8008550 <_localeconv_r>
 80058a2:	6803      	ldr	r3, [r0, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	9309      	str	r3, [sp, #36]	; 0x24
 80058a8:	f7fa fc6a 	bl	8000180 <strlen>
 80058ac:	2300      	movs	r3, #0
 80058ae:	930e      	str	r3, [sp, #56]	; 0x38
 80058b0:	f8d8 3000 	ldr.w	r3, [r8]
 80058b4:	900a      	str	r0, [sp, #40]	; 0x28
 80058b6:	3307      	adds	r3, #7
 80058b8:	f023 0307 	bic.w	r3, r3, #7
 80058bc:	f103 0208 	add.w	r2, r3, #8
 80058c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80058c4:	f8d4 b000 	ldr.w	fp, [r4]
 80058c8:	f8c8 2000 	str.w	r2, [r8]
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058d4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80058d8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80058dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80058de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058e2:	4640      	mov	r0, r8
 80058e4:	4b9c      	ldr	r3, [pc, #624]	; (8005b58 <_printf_float+0x2cc>)
 80058e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058e8:	f7fb f8a8 	bl	8000a3c <__aeabi_dcmpun>
 80058ec:	bb70      	cbnz	r0, 800594c <_printf_float+0xc0>
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058f2:	4640      	mov	r0, r8
 80058f4:	4b98      	ldr	r3, [pc, #608]	; (8005b58 <_printf_float+0x2cc>)
 80058f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058f8:	f7fb f882 	bl	8000a00 <__aeabi_dcmple>
 80058fc:	bb30      	cbnz	r0, 800594c <_printf_float+0xc0>
 80058fe:	2200      	movs	r2, #0
 8005900:	2300      	movs	r3, #0
 8005902:	4640      	mov	r0, r8
 8005904:	4651      	mov	r1, sl
 8005906:	f7fb f871 	bl	80009ec <__aeabi_dcmplt>
 800590a:	b110      	cbz	r0, 8005912 <_printf_float+0x86>
 800590c:	232d      	movs	r3, #45	; 0x2d
 800590e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005912:	4b92      	ldr	r3, [pc, #584]	; (8005b5c <_printf_float+0x2d0>)
 8005914:	4892      	ldr	r0, [pc, #584]	; (8005b60 <_printf_float+0x2d4>)
 8005916:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800591a:	bf94      	ite	ls
 800591c:	4698      	movls	r8, r3
 800591e:	4680      	movhi	r8, r0
 8005920:	2303      	movs	r3, #3
 8005922:	f04f 0a00 	mov.w	sl, #0
 8005926:	6123      	str	r3, [r4, #16]
 8005928:	f02b 0304 	bic.w	r3, fp, #4
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	4633      	mov	r3, r6
 8005930:	4621      	mov	r1, r4
 8005932:	4628      	mov	r0, r5
 8005934:	9700      	str	r7, [sp, #0]
 8005936:	aa0f      	add	r2, sp, #60	; 0x3c
 8005938:	f000 f9d4 	bl	8005ce4 <_printf_common>
 800593c:	3001      	adds	r0, #1
 800593e:	f040 8090 	bne.w	8005a62 <_printf_float+0x1d6>
 8005942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005946:	b011      	add	sp, #68	; 0x44
 8005948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594c:	4642      	mov	r2, r8
 800594e:	4653      	mov	r3, sl
 8005950:	4640      	mov	r0, r8
 8005952:	4651      	mov	r1, sl
 8005954:	f7fb f872 	bl	8000a3c <__aeabi_dcmpun>
 8005958:	b148      	cbz	r0, 800596e <_printf_float+0xe2>
 800595a:	f1ba 0f00 	cmp.w	sl, #0
 800595e:	bfb8      	it	lt
 8005960:	232d      	movlt	r3, #45	; 0x2d
 8005962:	4880      	ldr	r0, [pc, #512]	; (8005b64 <_printf_float+0x2d8>)
 8005964:	bfb8      	it	lt
 8005966:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800596a:	4b7f      	ldr	r3, [pc, #508]	; (8005b68 <_printf_float+0x2dc>)
 800596c:	e7d3      	b.n	8005916 <_printf_float+0x8a>
 800596e:	6863      	ldr	r3, [r4, #4]
 8005970:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	d142      	bne.n	80059fe <_printf_float+0x172>
 8005978:	2306      	movs	r3, #6
 800597a:	6063      	str	r3, [r4, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	9206      	str	r2, [sp, #24]
 8005980:	aa0e      	add	r2, sp, #56	; 0x38
 8005982:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005986:	aa0d      	add	r2, sp, #52	; 0x34
 8005988:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800598c:	9203      	str	r2, [sp, #12]
 800598e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005992:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	6863      	ldr	r3, [r4, #4]
 800599a:	4642      	mov	r2, r8
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	4628      	mov	r0, r5
 80059a0:	4653      	mov	r3, sl
 80059a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80059a4:	f7ff fed4 	bl	8005750 <__cvt>
 80059a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059aa:	4680      	mov	r8, r0
 80059ac:	2947      	cmp	r1, #71	; 0x47
 80059ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059b0:	d108      	bne.n	80059c4 <_printf_float+0x138>
 80059b2:	1cc8      	adds	r0, r1, #3
 80059b4:	db02      	blt.n	80059bc <_printf_float+0x130>
 80059b6:	6863      	ldr	r3, [r4, #4]
 80059b8:	4299      	cmp	r1, r3
 80059ba:	dd40      	ble.n	8005a3e <_printf_float+0x1b2>
 80059bc:	f1a9 0902 	sub.w	r9, r9, #2
 80059c0:	fa5f f989 	uxtb.w	r9, r9
 80059c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059c8:	d81f      	bhi.n	8005a0a <_printf_float+0x17e>
 80059ca:	464a      	mov	r2, r9
 80059cc:	3901      	subs	r1, #1
 80059ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059d2:	910d      	str	r1, [sp, #52]	; 0x34
 80059d4:	f7ff ff1b 	bl	800580e <__exponent>
 80059d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059da:	4682      	mov	sl, r0
 80059dc:	1813      	adds	r3, r2, r0
 80059de:	2a01      	cmp	r2, #1
 80059e0:	6123      	str	r3, [r4, #16]
 80059e2:	dc02      	bgt.n	80059ea <_printf_float+0x15e>
 80059e4:	6822      	ldr	r2, [r4, #0]
 80059e6:	07d2      	lsls	r2, r2, #31
 80059e8:	d501      	bpl.n	80059ee <_printf_float+0x162>
 80059ea:	3301      	adds	r3, #1
 80059ec:	6123      	str	r3, [r4, #16]
 80059ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d09b      	beq.n	800592e <_printf_float+0xa2>
 80059f6:	232d      	movs	r3, #45	; 0x2d
 80059f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059fc:	e797      	b.n	800592e <_printf_float+0xa2>
 80059fe:	2947      	cmp	r1, #71	; 0x47
 8005a00:	d1bc      	bne.n	800597c <_printf_float+0xf0>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1ba      	bne.n	800597c <_printf_float+0xf0>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e7b7      	b.n	800597a <_printf_float+0xee>
 8005a0a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005a0e:	d118      	bne.n	8005a42 <_printf_float+0x1b6>
 8005a10:	2900      	cmp	r1, #0
 8005a12:	6863      	ldr	r3, [r4, #4]
 8005a14:	dd0b      	ble.n	8005a2e <_printf_float+0x1a2>
 8005a16:	6121      	str	r1, [r4, #16]
 8005a18:	b913      	cbnz	r3, 8005a20 <_printf_float+0x194>
 8005a1a:	6822      	ldr	r2, [r4, #0]
 8005a1c:	07d0      	lsls	r0, r2, #31
 8005a1e:	d502      	bpl.n	8005a26 <_printf_float+0x19a>
 8005a20:	3301      	adds	r3, #1
 8005a22:	440b      	add	r3, r1
 8005a24:	6123      	str	r3, [r4, #16]
 8005a26:	f04f 0a00 	mov.w	sl, #0
 8005a2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a2c:	e7df      	b.n	80059ee <_printf_float+0x162>
 8005a2e:	b913      	cbnz	r3, 8005a36 <_printf_float+0x1aa>
 8005a30:	6822      	ldr	r2, [r4, #0]
 8005a32:	07d2      	lsls	r2, r2, #31
 8005a34:	d501      	bpl.n	8005a3a <_printf_float+0x1ae>
 8005a36:	3302      	adds	r3, #2
 8005a38:	e7f4      	b.n	8005a24 <_printf_float+0x198>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e7f2      	b.n	8005a24 <_printf_float+0x198>
 8005a3e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a44:	4299      	cmp	r1, r3
 8005a46:	db05      	blt.n	8005a54 <_printf_float+0x1c8>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	6121      	str	r1, [r4, #16]
 8005a4c:	07d8      	lsls	r0, r3, #31
 8005a4e:	d5ea      	bpl.n	8005a26 <_printf_float+0x19a>
 8005a50:	1c4b      	adds	r3, r1, #1
 8005a52:	e7e7      	b.n	8005a24 <_printf_float+0x198>
 8005a54:	2900      	cmp	r1, #0
 8005a56:	bfcc      	ite	gt
 8005a58:	2201      	movgt	r2, #1
 8005a5a:	f1c1 0202 	rsble	r2, r1, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	e7e0      	b.n	8005a24 <_printf_float+0x198>
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	055a      	lsls	r2, r3, #21
 8005a66:	d407      	bmi.n	8005a78 <_printf_float+0x1ec>
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	4642      	mov	r2, r8
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4628      	mov	r0, r5
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	d12b      	bne.n	8005ace <_printf_float+0x242>
 8005a76:	e764      	b.n	8005942 <_printf_float+0xb6>
 8005a78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a7c:	f240 80dd 	bls.w	8005c3a <_printf_float+0x3ae>
 8005a80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a84:	2200      	movs	r2, #0
 8005a86:	2300      	movs	r3, #0
 8005a88:	f7fa ffa6 	bl	80009d8 <__aeabi_dcmpeq>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d033      	beq.n	8005af8 <_printf_float+0x26c>
 8005a90:	2301      	movs	r3, #1
 8005a92:	4631      	mov	r1, r6
 8005a94:	4628      	mov	r0, r5
 8005a96:	4a35      	ldr	r2, [pc, #212]	; (8005b6c <_printf_float+0x2e0>)
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	f43f af51 	beq.w	8005942 <_printf_float+0xb6>
 8005aa0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	db02      	blt.n	8005aae <_printf_float+0x222>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	07d8      	lsls	r0, r3, #31
 8005aac:	d50f      	bpl.n	8005ace <_printf_float+0x242>
 8005aae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	47b8      	blx	r7
 8005ab8:	3001      	adds	r0, #1
 8005aba:	f43f af42 	beq.w	8005942 <_printf_float+0xb6>
 8005abe:	f04f 0800 	mov.w	r8, #0
 8005ac2:	f104 091a 	add.w	r9, r4, #26
 8005ac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	4543      	cmp	r3, r8
 8005acc:	dc09      	bgt.n	8005ae2 <_printf_float+0x256>
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	079b      	lsls	r3, r3, #30
 8005ad2:	f100 8102 	bmi.w	8005cda <_printf_float+0x44e>
 8005ad6:	68e0      	ldr	r0, [r4, #12]
 8005ad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ada:	4298      	cmp	r0, r3
 8005adc:	bfb8      	it	lt
 8005ade:	4618      	movlt	r0, r3
 8005ae0:	e731      	b.n	8005946 <_printf_float+0xba>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	464a      	mov	r2, r9
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4628      	mov	r0, r5
 8005aea:	47b8      	blx	r7
 8005aec:	3001      	adds	r0, #1
 8005aee:	f43f af28 	beq.w	8005942 <_printf_float+0xb6>
 8005af2:	f108 0801 	add.w	r8, r8, #1
 8005af6:	e7e6      	b.n	8005ac6 <_printf_float+0x23a>
 8005af8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	dc38      	bgt.n	8005b70 <_printf_float+0x2e4>
 8005afe:	2301      	movs	r3, #1
 8005b00:	4631      	mov	r1, r6
 8005b02:	4628      	mov	r0, r5
 8005b04:	4a19      	ldr	r2, [pc, #100]	; (8005b6c <_printf_float+0x2e0>)
 8005b06:	47b8      	blx	r7
 8005b08:	3001      	adds	r0, #1
 8005b0a:	f43f af1a 	beq.w	8005942 <_printf_float+0xb6>
 8005b0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b12:	4313      	orrs	r3, r2
 8005b14:	d102      	bne.n	8005b1c <_printf_float+0x290>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	07d9      	lsls	r1, r3, #31
 8005b1a:	d5d8      	bpl.n	8005ace <_printf_float+0x242>
 8005b1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b20:	4631      	mov	r1, r6
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b8      	blx	r7
 8005b26:	3001      	adds	r0, #1
 8005b28:	f43f af0b 	beq.w	8005942 <_printf_float+0xb6>
 8005b2c:	f04f 0900 	mov.w	r9, #0
 8005b30:	f104 0a1a 	add.w	sl, r4, #26
 8005b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b36:	425b      	negs	r3, r3
 8005b38:	454b      	cmp	r3, r9
 8005b3a:	dc01      	bgt.n	8005b40 <_printf_float+0x2b4>
 8005b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b3e:	e794      	b.n	8005a6a <_printf_float+0x1de>
 8005b40:	2301      	movs	r3, #1
 8005b42:	4652      	mov	r2, sl
 8005b44:	4631      	mov	r1, r6
 8005b46:	4628      	mov	r0, r5
 8005b48:	47b8      	blx	r7
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	f43f aef9 	beq.w	8005942 <_printf_float+0xb6>
 8005b50:	f109 0901 	add.w	r9, r9, #1
 8005b54:	e7ee      	b.n	8005b34 <_printf_float+0x2a8>
 8005b56:	bf00      	nop
 8005b58:	7fefffff 	.word	0x7fefffff
 8005b5c:	0800a0cc 	.word	0x0800a0cc
 8005b60:	0800a0d0 	.word	0x0800a0d0
 8005b64:	0800a0d8 	.word	0x0800a0d8
 8005b68:	0800a0d4 	.word	0x0800a0d4
 8005b6c:	0800a0dc 	.word	0x0800a0dc
 8005b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b74:	429a      	cmp	r2, r3
 8005b76:	bfa8      	it	ge
 8005b78:	461a      	movge	r2, r3
 8005b7a:	2a00      	cmp	r2, #0
 8005b7c:	4691      	mov	r9, r2
 8005b7e:	dc37      	bgt.n	8005bf0 <_printf_float+0x364>
 8005b80:	f04f 0b00 	mov.w	fp, #0
 8005b84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b88:	f104 021a 	add.w	r2, r4, #26
 8005b8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b90:	ebaa 0309 	sub.w	r3, sl, r9
 8005b94:	455b      	cmp	r3, fp
 8005b96:	dc33      	bgt.n	8005c00 <_printf_float+0x374>
 8005b98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	db3b      	blt.n	8005c18 <_printf_float+0x38c>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	07da      	lsls	r2, r3, #31
 8005ba4:	d438      	bmi.n	8005c18 <_printf_float+0x38c>
 8005ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ba8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005baa:	eba3 020a 	sub.w	r2, r3, sl
 8005bae:	eba3 0901 	sub.w	r9, r3, r1
 8005bb2:	4591      	cmp	r9, r2
 8005bb4:	bfa8      	it	ge
 8005bb6:	4691      	movge	r9, r2
 8005bb8:	f1b9 0f00 	cmp.w	r9, #0
 8005bbc:	dc34      	bgt.n	8005c28 <_printf_float+0x39c>
 8005bbe:	f04f 0800 	mov.w	r8, #0
 8005bc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bc6:	f104 0a1a 	add.w	sl, r4, #26
 8005bca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	eba3 0309 	sub.w	r3, r3, r9
 8005bd4:	4543      	cmp	r3, r8
 8005bd6:	f77f af7a 	ble.w	8005ace <_printf_float+0x242>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4652      	mov	r2, sl
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	f43f aeac 	beq.w	8005942 <_printf_float+0xb6>
 8005bea:	f108 0801 	add.w	r8, r8, #1
 8005bee:	e7ec      	b.n	8005bca <_printf_float+0x33e>
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	47b8      	blx	r7
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d1c0      	bne.n	8005b80 <_printf_float+0x2f4>
 8005bfe:	e6a0      	b.n	8005942 <_printf_float+0xb6>
 8005c00:	2301      	movs	r3, #1
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c08:	47b8      	blx	r7
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f43f ae99 	beq.w	8005942 <_printf_float+0xb6>
 8005c10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c12:	f10b 0b01 	add.w	fp, fp, #1
 8005c16:	e7b9      	b.n	8005b8c <_printf_float+0x300>
 8005c18:	4631      	mov	r1, r6
 8005c1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c1e:	4628      	mov	r0, r5
 8005c20:	47b8      	blx	r7
 8005c22:	3001      	adds	r0, #1
 8005c24:	d1bf      	bne.n	8005ba6 <_printf_float+0x31a>
 8005c26:	e68c      	b.n	8005942 <_printf_float+0xb6>
 8005c28:	464b      	mov	r3, r9
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	eb08 020a 	add.w	r2, r8, sl
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	d1c2      	bne.n	8005bbe <_printf_float+0x332>
 8005c38:	e683      	b.n	8005942 <_printf_float+0xb6>
 8005c3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c3c:	2a01      	cmp	r2, #1
 8005c3e:	dc01      	bgt.n	8005c44 <_printf_float+0x3b8>
 8005c40:	07db      	lsls	r3, r3, #31
 8005c42:	d537      	bpl.n	8005cb4 <_printf_float+0x428>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4642      	mov	r2, r8
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b8      	blx	r7
 8005c4e:	3001      	adds	r0, #1
 8005c50:	f43f ae77 	beq.w	8005942 <_printf_float+0xb6>
 8005c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	f43f ae6f 	beq.w	8005942 <_printf_float+0xb6>
 8005c64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f7fa feb4 	bl	80009d8 <__aeabi_dcmpeq>
 8005c70:	b9d8      	cbnz	r0, 8005caa <_printf_float+0x41e>
 8005c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c74:	f108 0201 	add.w	r2, r8, #1
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b8      	blx	r7
 8005c80:	3001      	adds	r0, #1
 8005c82:	d10e      	bne.n	8005ca2 <_printf_float+0x416>
 8005c84:	e65d      	b.n	8005942 <_printf_float+0xb6>
 8005c86:	2301      	movs	r3, #1
 8005c88:	464a      	mov	r2, r9
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b8      	blx	r7
 8005c90:	3001      	adds	r0, #1
 8005c92:	f43f ae56 	beq.w	8005942 <_printf_float+0xb6>
 8005c96:	f108 0801 	add.w	r8, r8, #1
 8005c9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	4543      	cmp	r3, r8
 8005ca0:	dcf1      	bgt.n	8005c86 <_printf_float+0x3fa>
 8005ca2:	4653      	mov	r3, sl
 8005ca4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ca8:	e6e0      	b.n	8005a6c <_printf_float+0x1e0>
 8005caa:	f04f 0800 	mov.w	r8, #0
 8005cae:	f104 091a 	add.w	r9, r4, #26
 8005cb2:	e7f2      	b.n	8005c9a <_printf_float+0x40e>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4642      	mov	r2, r8
 8005cb8:	e7df      	b.n	8005c7a <_printf_float+0x3ee>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	464a      	mov	r2, r9
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	f43f ae3c 	beq.w	8005942 <_printf_float+0xb6>
 8005cca:	f108 0801 	add.w	r8, r8, #1
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cd2:	1a5b      	subs	r3, r3, r1
 8005cd4:	4543      	cmp	r3, r8
 8005cd6:	dcf0      	bgt.n	8005cba <_printf_float+0x42e>
 8005cd8:	e6fd      	b.n	8005ad6 <_printf_float+0x24a>
 8005cda:	f04f 0800 	mov.w	r8, #0
 8005cde:	f104 0919 	add.w	r9, r4, #25
 8005ce2:	e7f4      	b.n	8005cce <_printf_float+0x442>

08005ce4 <_printf_common>:
 8005ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce8:	4616      	mov	r6, r2
 8005cea:	4699      	mov	r9, r3
 8005cec:	688a      	ldr	r2, [r1, #8]
 8005cee:	690b      	ldr	r3, [r1, #16]
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	bfb8      	it	lt
 8005cf6:	4613      	movlt	r3, r2
 8005cf8:	6033      	str	r3, [r6, #0]
 8005cfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cfe:	460c      	mov	r4, r1
 8005d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d04:	b10a      	cbz	r2, 8005d0a <_printf_common+0x26>
 8005d06:	3301      	adds	r3, #1
 8005d08:	6033      	str	r3, [r6, #0]
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	0699      	lsls	r1, r3, #26
 8005d0e:	bf42      	ittt	mi
 8005d10:	6833      	ldrmi	r3, [r6, #0]
 8005d12:	3302      	addmi	r3, #2
 8005d14:	6033      	strmi	r3, [r6, #0]
 8005d16:	6825      	ldr	r5, [r4, #0]
 8005d18:	f015 0506 	ands.w	r5, r5, #6
 8005d1c:	d106      	bne.n	8005d2c <_printf_common+0x48>
 8005d1e:	f104 0a19 	add.w	sl, r4, #25
 8005d22:	68e3      	ldr	r3, [r4, #12]
 8005d24:	6832      	ldr	r2, [r6, #0]
 8005d26:	1a9b      	subs	r3, r3, r2
 8005d28:	42ab      	cmp	r3, r5
 8005d2a:	dc28      	bgt.n	8005d7e <_printf_common+0x9a>
 8005d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d30:	1e13      	subs	r3, r2, #0
 8005d32:	6822      	ldr	r2, [r4, #0]
 8005d34:	bf18      	it	ne
 8005d36:	2301      	movne	r3, #1
 8005d38:	0692      	lsls	r2, r2, #26
 8005d3a:	d42d      	bmi.n	8005d98 <_printf_common+0xb4>
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	4638      	mov	r0, r7
 8005d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d44:	47c0      	blx	r8
 8005d46:	3001      	adds	r0, #1
 8005d48:	d020      	beq.n	8005d8c <_printf_common+0xa8>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	68e5      	ldr	r5, [r4, #12]
 8005d4e:	f003 0306 	and.w	r3, r3, #6
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	bf18      	it	ne
 8005d56:	2500      	movne	r5, #0
 8005d58:	6832      	ldr	r2, [r6, #0]
 8005d5a:	f04f 0600 	mov.w	r6, #0
 8005d5e:	68a3      	ldr	r3, [r4, #8]
 8005d60:	bf08      	it	eq
 8005d62:	1aad      	subeq	r5, r5, r2
 8005d64:	6922      	ldr	r2, [r4, #16]
 8005d66:	bf08      	it	eq
 8005d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	bfc4      	itt	gt
 8005d70:	1a9b      	subgt	r3, r3, r2
 8005d72:	18ed      	addgt	r5, r5, r3
 8005d74:	341a      	adds	r4, #26
 8005d76:	42b5      	cmp	r5, r6
 8005d78:	d11a      	bne.n	8005db0 <_printf_common+0xcc>
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	e008      	b.n	8005d90 <_printf_common+0xac>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4652      	mov	r2, sl
 8005d82:	4649      	mov	r1, r9
 8005d84:	4638      	mov	r0, r7
 8005d86:	47c0      	blx	r8
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d103      	bne.n	8005d94 <_printf_common+0xb0>
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d94:	3501      	adds	r5, #1
 8005d96:	e7c4      	b.n	8005d22 <_printf_common+0x3e>
 8005d98:	2030      	movs	r0, #48	; 0x30
 8005d9a:	18e1      	adds	r1, r4, r3
 8005d9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005da6:	4422      	add	r2, r4
 8005da8:	3302      	adds	r3, #2
 8005daa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dae:	e7c5      	b.n	8005d3c <_printf_common+0x58>
 8005db0:	2301      	movs	r3, #1
 8005db2:	4622      	mov	r2, r4
 8005db4:	4649      	mov	r1, r9
 8005db6:	4638      	mov	r0, r7
 8005db8:	47c0      	blx	r8
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d0e6      	beq.n	8005d8c <_printf_common+0xa8>
 8005dbe:	3601      	adds	r6, #1
 8005dc0:	e7d9      	b.n	8005d76 <_printf_common+0x92>
	...

08005dc4 <_printf_i>:
 8005dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	7e0f      	ldrb	r7, [r1, #24]
 8005dca:	4691      	mov	r9, r2
 8005dcc:	2f78      	cmp	r7, #120	; 0x78
 8005dce:	4680      	mov	r8, r0
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	469a      	mov	sl, r3
 8005dd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dda:	d807      	bhi.n	8005dec <_printf_i+0x28>
 8005ddc:	2f62      	cmp	r7, #98	; 0x62
 8005dde:	d80a      	bhi.n	8005df6 <_printf_i+0x32>
 8005de0:	2f00      	cmp	r7, #0
 8005de2:	f000 80d9 	beq.w	8005f98 <_printf_i+0x1d4>
 8005de6:	2f58      	cmp	r7, #88	; 0x58
 8005de8:	f000 80a4 	beq.w	8005f34 <_printf_i+0x170>
 8005dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005df4:	e03a      	b.n	8005e6c <_printf_i+0xa8>
 8005df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dfa:	2b15      	cmp	r3, #21
 8005dfc:	d8f6      	bhi.n	8005dec <_printf_i+0x28>
 8005dfe:	a101      	add	r1, pc, #4	; (adr r1, 8005e04 <_printf_i+0x40>)
 8005e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e04:	08005e5d 	.word	0x08005e5d
 8005e08:	08005e71 	.word	0x08005e71
 8005e0c:	08005ded 	.word	0x08005ded
 8005e10:	08005ded 	.word	0x08005ded
 8005e14:	08005ded 	.word	0x08005ded
 8005e18:	08005ded 	.word	0x08005ded
 8005e1c:	08005e71 	.word	0x08005e71
 8005e20:	08005ded 	.word	0x08005ded
 8005e24:	08005ded 	.word	0x08005ded
 8005e28:	08005ded 	.word	0x08005ded
 8005e2c:	08005ded 	.word	0x08005ded
 8005e30:	08005f7f 	.word	0x08005f7f
 8005e34:	08005ea1 	.word	0x08005ea1
 8005e38:	08005f61 	.word	0x08005f61
 8005e3c:	08005ded 	.word	0x08005ded
 8005e40:	08005ded 	.word	0x08005ded
 8005e44:	08005fa1 	.word	0x08005fa1
 8005e48:	08005ded 	.word	0x08005ded
 8005e4c:	08005ea1 	.word	0x08005ea1
 8005e50:	08005ded 	.word	0x08005ded
 8005e54:	08005ded 	.word	0x08005ded
 8005e58:	08005f69 	.word	0x08005f69
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	1d1a      	adds	r2, r3, #4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	602a      	str	r2, [r5, #0]
 8005e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0a4      	b.n	8005fba <_printf_i+0x1f6>
 8005e70:	6820      	ldr	r0, [r4, #0]
 8005e72:	6829      	ldr	r1, [r5, #0]
 8005e74:	0606      	lsls	r6, r0, #24
 8005e76:	f101 0304 	add.w	r3, r1, #4
 8005e7a:	d50a      	bpl.n	8005e92 <_printf_i+0xce>
 8005e7c:	680e      	ldr	r6, [r1, #0]
 8005e7e:	602b      	str	r3, [r5, #0]
 8005e80:	2e00      	cmp	r6, #0
 8005e82:	da03      	bge.n	8005e8c <_printf_i+0xc8>
 8005e84:	232d      	movs	r3, #45	; 0x2d
 8005e86:	4276      	negs	r6, r6
 8005e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e8c:	230a      	movs	r3, #10
 8005e8e:	485e      	ldr	r0, [pc, #376]	; (8006008 <_printf_i+0x244>)
 8005e90:	e019      	b.n	8005ec6 <_printf_i+0x102>
 8005e92:	680e      	ldr	r6, [r1, #0]
 8005e94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	bf18      	it	ne
 8005e9c:	b236      	sxthne	r6, r6
 8005e9e:	e7ef      	b.n	8005e80 <_printf_i+0xbc>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	6820      	ldr	r0, [r4, #0]
 8005ea4:	1d19      	adds	r1, r3, #4
 8005ea6:	6029      	str	r1, [r5, #0]
 8005ea8:	0601      	lsls	r1, r0, #24
 8005eaa:	d501      	bpl.n	8005eb0 <_printf_i+0xec>
 8005eac:	681e      	ldr	r6, [r3, #0]
 8005eae:	e002      	b.n	8005eb6 <_printf_i+0xf2>
 8005eb0:	0646      	lsls	r6, r0, #25
 8005eb2:	d5fb      	bpl.n	8005eac <_printf_i+0xe8>
 8005eb4:	881e      	ldrh	r6, [r3, #0]
 8005eb6:	2f6f      	cmp	r7, #111	; 0x6f
 8005eb8:	bf0c      	ite	eq
 8005eba:	2308      	moveq	r3, #8
 8005ebc:	230a      	movne	r3, #10
 8005ebe:	4852      	ldr	r0, [pc, #328]	; (8006008 <_printf_i+0x244>)
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ec6:	6865      	ldr	r5, [r4, #4]
 8005ec8:	2d00      	cmp	r5, #0
 8005eca:	bfa8      	it	ge
 8005ecc:	6821      	ldrge	r1, [r4, #0]
 8005ece:	60a5      	str	r5, [r4, #8]
 8005ed0:	bfa4      	itt	ge
 8005ed2:	f021 0104 	bicge.w	r1, r1, #4
 8005ed6:	6021      	strge	r1, [r4, #0]
 8005ed8:	b90e      	cbnz	r6, 8005ede <_printf_i+0x11a>
 8005eda:	2d00      	cmp	r5, #0
 8005edc:	d04d      	beq.n	8005f7a <_printf_i+0x1b6>
 8005ede:	4615      	mov	r5, r2
 8005ee0:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ee4:	fb03 6711 	mls	r7, r3, r1, r6
 8005ee8:	5dc7      	ldrb	r7, [r0, r7]
 8005eea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005eee:	4637      	mov	r7, r6
 8005ef0:	42bb      	cmp	r3, r7
 8005ef2:	460e      	mov	r6, r1
 8005ef4:	d9f4      	bls.n	8005ee0 <_printf_i+0x11c>
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d10b      	bne.n	8005f12 <_printf_i+0x14e>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	07de      	lsls	r6, r3, #31
 8005efe:	d508      	bpl.n	8005f12 <_printf_i+0x14e>
 8005f00:	6923      	ldr	r3, [r4, #16]
 8005f02:	6861      	ldr	r1, [r4, #4]
 8005f04:	4299      	cmp	r1, r3
 8005f06:	bfde      	ittt	le
 8005f08:	2330      	movle	r3, #48	; 0x30
 8005f0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f0e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f12:	1b52      	subs	r2, r2, r5
 8005f14:	6122      	str	r2, [r4, #16]
 8005f16:	464b      	mov	r3, r9
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	f8cd a000 	str.w	sl, [sp]
 8005f20:	aa03      	add	r2, sp, #12
 8005f22:	f7ff fedf 	bl	8005ce4 <_printf_common>
 8005f26:	3001      	adds	r0, #1
 8005f28:	d14c      	bne.n	8005fc4 <_printf_i+0x200>
 8005f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f2e:	b004      	add	sp, #16
 8005f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f34:	4834      	ldr	r0, [pc, #208]	; (8006008 <_printf_i+0x244>)
 8005f36:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f3a:	6829      	ldr	r1, [r5, #0]
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f42:	6029      	str	r1, [r5, #0]
 8005f44:	061d      	lsls	r5, r3, #24
 8005f46:	d514      	bpl.n	8005f72 <_printf_i+0x1ae>
 8005f48:	07df      	lsls	r7, r3, #31
 8005f4a:	bf44      	itt	mi
 8005f4c:	f043 0320 	orrmi.w	r3, r3, #32
 8005f50:	6023      	strmi	r3, [r4, #0]
 8005f52:	b91e      	cbnz	r6, 8005f5c <_printf_i+0x198>
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	f023 0320 	bic.w	r3, r3, #32
 8005f5a:	6023      	str	r3, [r4, #0]
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	e7af      	b.n	8005ec0 <_printf_i+0xfc>
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	f043 0320 	orr.w	r3, r3, #32
 8005f66:	6023      	str	r3, [r4, #0]
 8005f68:	2378      	movs	r3, #120	; 0x78
 8005f6a:	4828      	ldr	r0, [pc, #160]	; (800600c <_printf_i+0x248>)
 8005f6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f70:	e7e3      	b.n	8005f3a <_printf_i+0x176>
 8005f72:	0659      	lsls	r1, r3, #25
 8005f74:	bf48      	it	mi
 8005f76:	b2b6      	uxthmi	r6, r6
 8005f78:	e7e6      	b.n	8005f48 <_printf_i+0x184>
 8005f7a:	4615      	mov	r5, r2
 8005f7c:	e7bb      	b.n	8005ef6 <_printf_i+0x132>
 8005f7e:	682b      	ldr	r3, [r5, #0]
 8005f80:	6826      	ldr	r6, [r4, #0]
 8005f82:	1d18      	adds	r0, r3, #4
 8005f84:	6961      	ldr	r1, [r4, #20]
 8005f86:	6028      	str	r0, [r5, #0]
 8005f88:	0635      	lsls	r5, r6, #24
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	d501      	bpl.n	8005f92 <_printf_i+0x1ce>
 8005f8e:	6019      	str	r1, [r3, #0]
 8005f90:	e002      	b.n	8005f98 <_printf_i+0x1d4>
 8005f92:	0670      	lsls	r0, r6, #25
 8005f94:	d5fb      	bpl.n	8005f8e <_printf_i+0x1ca>
 8005f96:	8019      	strh	r1, [r3, #0]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	4615      	mov	r5, r2
 8005f9c:	6123      	str	r3, [r4, #16]
 8005f9e:	e7ba      	b.n	8005f16 <_printf_i+0x152>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	1d1a      	adds	r2, r3, #4
 8005fa6:	602a      	str	r2, [r5, #0]
 8005fa8:	681d      	ldr	r5, [r3, #0]
 8005faa:	6862      	ldr	r2, [r4, #4]
 8005fac:	4628      	mov	r0, r5
 8005fae:	f002 faed 	bl	800858c <memchr>
 8005fb2:	b108      	cbz	r0, 8005fb8 <_printf_i+0x1f4>
 8005fb4:	1b40      	subs	r0, r0, r5
 8005fb6:	6060      	str	r0, [r4, #4]
 8005fb8:	6863      	ldr	r3, [r4, #4]
 8005fba:	6123      	str	r3, [r4, #16]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc2:	e7a8      	b.n	8005f16 <_printf_i+0x152>
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	4640      	mov	r0, r8
 8005fca:	6923      	ldr	r3, [r4, #16]
 8005fcc:	47d0      	blx	sl
 8005fce:	3001      	adds	r0, #1
 8005fd0:	d0ab      	beq.n	8005f2a <_printf_i+0x166>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	079b      	lsls	r3, r3, #30
 8005fd6:	d413      	bmi.n	8006000 <_printf_i+0x23c>
 8005fd8:	68e0      	ldr	r0, [r4, #12]
 8005fda:	9b03      	ldr	r3, [sp, #12]
 8005fdc:	4298      	cmp	r0, r3
 8005fde:	bfb8      	it	lt
 8005fe0:	4618      	movlt	r0, r3
 8005fe2:	e7a4      	b.n	8005f2e <_printf_i+0x16a>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	4632      	mov	r2, r6
 8005fe8:	4649      	mov	r1, r9
 8005fea:	4640      	mov	r0, r8
 8005fec:	47d0      	blx	sl
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d09b      	beq.n	8005f2a <_printf_i+0x166>
 8005ff2:	3501      	adds	r5, #1
 8005ff4:	68e3      	ldr	r3, [r4, #12]
 8005ff6:	9903      	ldr	r1, [sp, #12]
 8005ff8:	1a5b      	subs	r3, r3, r1
 8005ffa:	42ab      	cmp	r3, r5
 8005ffc:	dcf2      	bgt.n	8005fe4 <_printf_i+0x220>
 8005ffe:	e7eb      	b.n	8005fd8 <_printf_i+0x214>
 8006000:	2500      	movs	r5, #0
 8006002:	f104 0619 	add.w	r6, r4, #25
 8006006:	e7f5      	b.n	8005ff4 <_printf_i+0x230>
 8006008:	0800a0de 	.word	0x0800a0de
 800600c:	0800a0ef 	.word	0x0800a0ef

08006010 <_scanf_float>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	b087      	sub	sp, #28
 8006016:	9303      	str	r3, [sp, #12]
 8006018:	688b      	ldr	r3, [r1, #8]
 800601a:	4617      	mov	r7, r2
 800601c:	1e5a      	subs	r2, r3, #1
 800601e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006022:	bf85      	ittet	hi
 8006024:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006028:	195b      	addhi	r3, r3, r5
 800602a:	2300      	movls	r3, #0
 800602c:	9302      	strhi	r3, [sp, #8]
 800602e:	bf88      	it	hi
 8006030:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006034:	468b      	mov	fp, r1
 8006036:	f04f 0500 	mov.w	r5, #0
 800603a:	bf8c      	ite	hi
 800603c:	608b      	strhi	r3, [r1, #8]
 800603e:	9302      	strls	r3, [sp, #8]
 8006040:	680b      	ldr	r3, [r1, #0]
 8006042:	4680      	mov	r8, r0
 8006044:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006048:	f84b 3b1c 	str.w	r3, [fp], #28
 800604c:	460c      	mov	r4, r1
 800604e:	465e      	mov	r6, fp
 8006050:	46aa      	mov	sl, r5
 8006052:	46a9      	mov	r9, r5
 8006054:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006058:	9501      	str	r5, [sp, #4]
 800605a:	68a2      	ldr	r2, [r4, #8]
 800605c:	b152      	cbz	r2, 8006074 <_scanf_float+0x64>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b4e      	cmp	r3, #78	; 0x4e
 8006064:	d864      	bhi.n	8006130 <_scanf_float+0x120>
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d83c      	bhi.n	80060e4 <_scanf_float+0xd4>
 800606a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800606e:	b2c8      	uxtb	r0, r1
 8006070:	280e      	cmp	r0, #14
 8006072:	d93a      	bls.n	80060ea <_scanf_float+0xda>
 8006074:	f1b9 0f00 	cmp.w	r9, #0
 8006078:	d003      	beq.n	8006082 <_scanf_float+0x72>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006086:	f1ba 0f01 	cmp.w	sl, #1
 800608a:	f200 8113 	bhi.w	80062b4 <_scanf_float+0x2a4>
 800608e:	455e      	cmp	r6, fp
 8006090:	f200 8105 	bhi.w	800629e <_scanf_float+0x28e>
 8006094:	2501      	movs	r5, #1
 8006096:	4628      	mov	r0, r5
 8006098:	b007      	add	sp, #28
 800609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80060a2:	2a0d      	cmp	r2, #13
 80060a4:	d8e6      	bhi.n	8006074 <_scanf_float+0x64>
 80060a6:	a101      	add	r1, pc, #4	; (adr r1, 80060ac <_scanf_float+0x9c>)
 80060a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80060ac:	080061eb 	.word	0x080061eb
 80060b0:	08006075 	.word	0x08006075
 80060b4:	08006075 	.word	0x08006075
 80060b8:	08006075 	.word	0x08006075
 80060bc:	0800624b 	.word	0x0800624b
 80060c0:	08006223 	.word	0x08006223
 80060c4:	08006075 	.word	0x08006075
 80060c8:	08006075 	.word	0x08006075
 80060cc:	080061f9 	.word	0x080061f9
 80060d0:	08006075 	.word	0x08006075
 80060d4:	08006075 	.word	0x08006075
 80060d8:	08006075 	.word	0x08006075
 80060dc:	08006075 	.word	0x08006075
 80060e0:	080061b1 	.word	0x080061b1
 80060e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80060e8:	e7db      	b.n	80060a2 <_scanf_float+0x92>
 80060ea:	290e      	cmp	r1, #14
 80060ec:	d8c2      	bhi.n	8006074 <_scanf_float+0x64>
 80060ee:	a001      	add	r0, pc, #4	; (adr r0, 80060f4 <_scanf_float+0xe4>)
 80060f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80060f4:	080061a3 	.word	0x080061a3
 80060f8:	08006075 	.word	0x08006075
 80060fc:	080061a3 	.word	0x080061a3
 8006100:	08006237 	.word	0x08006237
 8006104:	08006075 	.word	0x08006075
 8006108:	08006151 	.word	0x08006151
 800610c:	0800618d 	.word	0x0800618d
 8006110:	0800618d 	.word	0x0800618d
 8006114:	0800618d 	.word	0x0800618d
 8006118:	0800618d 	.word	0x0800618d
 800611c:	0800618d 	.word	0x0800618d
 8006120:	0800618d 	.word	0x0800618d
 8006124:	0800618d 	.word	0x0800618d
 8006128:	0800618d 	.word	0x0800618d
 800612c:	0800618d 	.word	0x0800618d
 8006130:	2b6e      	cmp	r3, #110	; 0x6e
 8006132:	d809      	bhi.n	8006148 <_scanf_float+0x138>
 8006134:	2b60      	cmp	r3, #96	; 0x60
 8006136:	d8b2      	bhi.n	800609e <_scanf_float+0x8e>
 8006138:	2b54      	cmp	r3, #84	; 0x54
 800613a:	d077      	beq.n	800622c <_scanf_float+0x21c>
 800613c:	2b59      	cmp	r3, #89	; 0x59
 800613e:	d199      	bne.n	8006074 <_scanf_float+0x64>
 8006140:	2d07      	cmp	r5, #7
 8006142:	d197      	bne.n	8006074 <_scanf_float+0x64>
 8006144:	2508      	movs	r5, #8
 8006146:	e029      	b.n	800619c <_scanf_float+0x18c>
 8006148:	2b74      	cmp	r3, #116	; 0x74
 800614a:	d06f      	beq.n	800622c <_scanf_float+0x21c>
 800614c:	2b79      	cmp	r3, #121	; 0x79
 800614e:	e7f6      	b.n	800613e <_scanf_float+0x12e>
 8006150:	6821      	ldr	r1, [r4, #0]
 8006152:	05c8      	lsls	r0, r1, #23
 8006154:	d51a      	bpl.n	800618c <_scanf_float+0x17c>
 8006156:	9b02      	ldr	r3, [sp, #8]
 8006158:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800615c:	6021      	str	r1, [r4, #0]
 800615e:	f109 0901 	add.w	r9, r9, #1
 8006162:	b11b      	cbz	r3, 800616c <_scanf_float+0x15c>
 8006164:	3b01      	subs	r3, #1
 8006166:	3201      	adds	r2, #1
 8006168:	9302      	str	r3, [sp, #8]
 800616a:	60a2      	str	r2, [r4, #8]
 800616c:	68a3      	ldr	r3, [r4, #8]
 800616e:	3b01      	subs	r3, #1
 8006170:	60a3      	str	r3, [r4, #8]
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	3301      	adds	r3, #1
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3b01      	subs	r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	607b      	str	r3, [r7, #4]
 8006180:	f340 8084 	ble.w	800628c <_scanf_float+0x27c>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	3301      	adds	r3, #1
 8006188:	603b      	str	r3, [r7, #0]
 800618a:	e766      	b.n	800605a <_scanf_float+0x4a>
 800618c:	eb1a 0f05 	cmn.w	sl, r5
 8006190:	f47f af70 	bne.w	8006074 <_scanf_float+0x64>
 8006194:	6822      	ldr	r2, [r4, #0]
 8006196:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800619a:	6022      	str	r2, [r4, #0]
 800619c:	f806 3b01 	strb.w	r3, [r6], #1
 80061a0:	e7e4      	b.n	800616c <_scanf_float+0x15c>
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	0610      	lsls	r0, r2, #24
 80061a6:	f57f af65 	bpl.w	8006074 <_scanf_float+0x64>
 80061aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061ae:	e7f4      	b.n	800619a <_scanf_float+0x18a>
 80061b0:	f1ba 0f00 	cmp.w	sl, #0
 80061b4:	d10e      	bne.n	80061d4 <_scanf_float+0x1c4>
 80061b6:	f1b9 0f00 	cmp.w	r9, #0
 80061ba:	d10e      	bne.n	80061da <_scanf_float+0x1ca>
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80061c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80061c6:	d108      	bne.n	80061da <_scanf_float+0x1ca>
 80061c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061cc:	f04f 0a01 	mov.w	sl, #1
 80061d0:	6022      	str	r2, [r4, #0]
 80061d2:	e7e3      	b.n	800619c <_scanf_float+0x18c>
 80061d4:	f1ba 0f02 	cmp.w	sl, #2
 80061d8:	d055      	beq.n	8006286 <_scanf_float+0x276>
 80061da:	2d01      	cmp	r5, #1
 80061dc:	d002      	beq.n	80061e4 <_scanf_float+0x1d4>
 80061de:	2d04      	cmp	r5, #4
 80061e0:	f47f af48 	bne.w	8006074 <_scanf_float+0x64>
 80061e4:	3501      	adds	r5, #1
 80061e6:	b2ed      	uxtb	r5, r5
 80061e8:	e7d8      	b.n	800619c <_scanf_float+0x18c>
 80061ea:	f1ba 0f01 	cmp.w	sl, #1
 80061ee:	f47f af41 	bne.w	8006074 <_scanf_float+0x64>
 80061f2:	f04f 0a02 	mov.w	sl, #2
 80061f6:	e7d1      	b.n	800619c <_scanf_float+0x18c>
 80061f8:	b97d      	cbnz	r5, 800621a <_scanf_float+0x20a>
 80061fa:	f1b9 0f00 	cmp.w	r9, #0
 80061fe:	f47f af3c 	bne.w	800607a <_scanf_float+0x6a>
 8006202:	6822      	ldr	r2, [r4, #0]
 8006204:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006208:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800620c:	f47f af39 	bne.w	8006082 <_scanf_float+0x72>
 8006210:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006214:	2501      	movs	r5, #1
 8006216:	6022      	str	r2, [r4, #0]
 8006218:	e7c0      	b.n	800619c <_scanf_float+0x18c>
 800621a:	2d03      	cmp	r5, #3
 800621c:	d0e2      	beq.n	80061e4 <_scanf_float+0x1d4>
 800621e:	2d05      	cmp	r5, #5
 8006220:	e7de      	b.n	80061e0 <_scanf_float+0x1d0>
 8006222:	2d02      	cmp	r5, #2
 8006224:	f47f af26 	bne.w	8006074 <_scanf_float+0x64>
 8006228:	2503      	movs	r5, #3
 800622a:	e7b7      	b.n	800619c <_scanf_float+0x18c>
 800622c:	2d06      	cmp	r5, #6
 800622e:	f47f af21 	bne.w	8006074 <_scanf_float+0x64>
 8006232:	2507      	movs	r5, #7
 8006234:	e7b2      	b.n	800619c <_scanf_float+0x18c>
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	0591      	lsls	r1, r2, #22
 800623a:	f57f af1b 	bpl.w	8006074 <_scanf_float+0x64>
 800623e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006242:	6022      	str	r2, [r4, #0]
 8006244:	f8cd 9004 	str.w	r9, [sp, #4]
 8006248:	e7a8      	b.n	800619c <_scanf_float+0x18c>
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006250:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006254:	d006      	beq.n	8006264 <_scanf_float+0x254>
 8006256:	0550      	lsls	r0, r2, #21
 8006258:	f57f af0c 	bpl.w	8006074 <_scanf_float+0x64>
 800625c:	f1b9 0f00 	cmp.w	r9, #0
 8006260:	f43f af0f 	beq.w	8006082 <_scanf_float+0x72>
 8006264:	0591      	lsls	r1, r2, #22
 8006266:	bf58      	it	pl
 8006268:	9901      	ldrpl	r1, [sp, #4]
 800626a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800626e:	bf58      	it	pl
 8006270:	eba9 0101 	subpl.w	r1, r9, r1
 8006274:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006278:	f04f 0900 	mov.w	r9, #0
 800627c:	bf58      	it	pl
 800627e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006282:	6022      	str	r2, [r4, #0]
 8006284:	e78a      	b.n	800619c <_scanf_float+0x18c>
 8006286:	f04f 0a03 	mov.w	sl, #3
 800628a:	e787      	b.n	800619c <_scanf_float+0x18c>
 800628c:	4639      	mov	r1, r7
 800628e:	4640      	mov	r0, r8
 8006290:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006294:	4798      	blx	r3
 8006296:	2800      	cmp	r0, #0
 8006298:	f43f aedf 	beq.w	800605a <_scanf_float+0x4a>
 800629c:	e6ea      	b.n	8006074 <_scanf_float+0x64>
 800629e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062a2:	463a      	mov	r2, r7
 80062a4:	4640      	mov	r0, r8
 80062a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062aa:	4798      	blx	r3
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	6123      	str	r3, [r4, #16]
 80062b2:	e6ec      	b.n	800608e <_scanf_float+0x7e>
 80062b4:	1e6b      	subs	r3, r5, #1
 80062b6:	2b06      	cmp	r3, #6
 80062b8:	d825      	bhi.n	8006306 <_scanf_float+0x2f6>
 80062ba:	2d02      	cmp	r5, #2
 80062bc:	d836      	bhi.n	800632c <_scanf_float+0x31c>
 80062be:	455e      	cmp	r6, fp
 80062c0:	f67f aee8 	bls.w	8006094 <_scanf_float+0x84>
 80062c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062c8:	463a      	mov	r2, r7
 80062ca:	4640      	mov	r0, r8
 80062cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062d0:	4798      	blx	r3
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	6123      	str	r3, [r4, #16]
 80062d8:	e7f1      	b.n	80062be <_scanf_float+0x2ae>
 80062da:	9802      	ldr	r0, [sp, #8]
 80062dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80062e4:	463a      	mov	r2, r7
 80062e6:	9002      	str	r0, [sp, #8]
 80062e8:	4640      	mov	r0, r8
 80062ea:	4798      	blx	r3
 80062ec:	6923      	ldr	r3, [r4, #16]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	6123      	str	r3, [r4, #16]
 80062f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80062f6:	fa5f fa8a 	uxtb.w	sl, sl
 80062fa:	f1ba 0f02 	cmp.w	sl, #2
 80062fe:	d1ec      	bne.n	80062da <_scanf_float+0x2ca>
 8006300:	3d03      	subs	r5, #3
 8006302:	b2ed      	uxtb	r5, r5
 8006304:	1b76      	subs	r6, r6, r5
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	05da      	lsls	r2, r3, #23
 800630a:	d52f      	bpl.n	800636c <_scanf_float+0x35c>
 800630c:	055b      	lsls	r3, r3, #21
 800630e:	d510      	bpl.n	8006332 <_scanf_float+0x322>
 8006310:	455e      	cmp	r6, fp
 8006312:	f67f aebf 	bls.w	8006094 <_scanf_float+0x84>
 8006316:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800631a:	463a      	mov	r2, r7
 800631c:	4640      	mov	r0, r8
 800631e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006322:	4798      	blx	r3
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	3b01      	subs	r3, #1
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	e7f1      	b.n	8006310 <_scanf_float+0x300>
 800632c:	46aa      	mov	sl, r5
 800632e:	9602      	str	r6, [sp, #8]
 8006330:	e7df      	b.n	80062f2 <_scanf_float+0x2e2>
 8006332:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	2965      	cmp	r1, #101	; 0x65
 800633a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800633e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006342:	6123      	str	r3, [r4, #16]
 8006344:	d00c      	beq.n	8006360 <_scanf_float+0x350>
 8006346:	2945      	cmp	r1, #69	; 0x45
 8006348:	d00a      	beq.n	8006360 <_scanf_float+0x350>
 800634a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800634e:	463a      	mov	r2, r7
 8006350:	4640      	mov	r0, r8
 8006352:	4798      	blx	r3
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800635a:	3b01      	subs	r3, #1
 800635c:	1eb5      	subs	r5, r6, #2
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	463a      	mov	r2, r7
 8006362:	4640      	mov	r0, r8
 8006364:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006368:	4798      	blx	r3
 800636a:	462e      	mov	r6, r5
 800636c:	6825      	ldr	r5, [r4, #0]
 800636e:	f015 0510 	ands.w	r5, r5, #16
 8006372:	d155      	bne.n	8006420 <_scanf_float+0x410>
 8006374:	7035      	strb	r5, [r6, #0]
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800637c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006380:	d11b      	bne.n	80063ba <_scanf_float+0x3aa>
 8006382:	9b01      	ldr	r3, [sp, #4]
 8006384:	454b      	cmp	r3, r9
 8006386:	eba3 0209 	sub.w	r2, r3, r9
 800638a:	d123      	bne.n	80063d4 <_scanf_float+0x3c4>
 800638c:	2200      	movs	r2, #0
 800638e:	4659      	mov	r1, fp
 8006390:	4640      	mov	r0, r8
 8006392:	f000 fe79 	bl	8007088 <_strtod_r>
 8006396:	6822      	ldr	r2, [r4, #0]
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	f012 0f02 	tst.w	r2, #2
 800639e:	4606      	mov	r6, r0
 80063a0:	460f      	mov	r7, r1
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	d021      	beq.n	80063ea <_scanf_float+0x3da>
 80063a6:	1d1a      	adds	r2, r3, #4
 80063a8:	9903      	ldr	r1, [sp, #12]
 80063aa:	600a      	str	r2, [r1, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	e9c3 6700 	strd	r6, r7, [r3]
 80063b2:	68e3      	ldr	r3, [r4, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60e3      	str	r3, [r4, #12]
 80063b8:	e66d      	b.n	8006096 <_scanf_float+0x86>
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0e5      	beq.n	800638c <_scanf_float+0x37c>
 80063c0:	9905      	ldr	r1, [sp, #20]
 80063c2:	230a      	movs	r3, #10
 80063c4:	462a      	mov	r2, r5
 80063c6:	4640      	mov	r0, r8
 80063c8:	3101      	adds	r1, #1
 80063ca:	f000 fedf 	bl	800718c <_strtol_r>
 80063ce:	9b04      	ldr	r3, [sp, #16]
 80063d0:	9e05      	ldr	r6, [sp, #20]
 80063d2:	1ac2      	subs	r2, r0, r3
 80063d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80063d8:	429e      	cmp	r6, r3
 80063da:	bf28      	it	cs
 80063dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80063e0:	4630      	mov	r0, r6
 80063e2:	4910      	ldr	r1, [pc, #64]	; (8006424 <_scanf_float+0x414>)
 80063e4:	f000 f826 	bl	8006434 <siprintf>
 80063e8:	e7d0      	b.n	800638c <_scanf_float+0x37c>
 80063ea:	f012 0f04 	tst.w	r2, #4
 80063ee:	f103 0204 	add.w	r2, r3, #4
 80063f2:	d1d9      	bne.n	80063a8 <_scanf_float+0x398>
 80063f4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80063f8:	f8cc 2000 	str.w	r2, [ip]
 80063fc:	f8d3 8000 	ldr.w	r8, [r3]
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	f7fa fb1a 	bl	8000a3c <__aeabi_dcmpun>
 8006408:	b128      	cbz	r0, 8006416 <_scanf_float+0x406>
 800640a:	4807      	ldr	r0, [pc, #28]	; (8006428 <_scanf_float+0x418>)
 800640c:	f000 f80e 	bl	800642c <nanf>
 8006410:	f8c8 0000 	str.w	r0, [r8]
 8006414:	e7cd      	b.n	80063b2 <_scanf_float+0x3a2>
 8006416:	4630      	mov	r0, r6
 8006418:	4639      	mov	r1, r7
 800641a:	f7fa fb6d 	bl	8000af8 <__aeabi_d2f>
 800641e:	e7f7      	b.n	8006410 <_scanf_float+0x400>
 8006420:	2500      	movs	r5, #0
 8006422:	e638      	b.n	8006096 <_scanf_float+0x86>
 8006424:	0800a100 	.word	0x0800a100
 8006428:	0800a508 	.word	0x0800a508

0800642c <nanf>:
 800642c:	4800      	ldr	r0, [pc, #0]	; (8006430 <nanf+0x4>)
 800642e:	4770      	bx	lr
 8006430:	7fc00000 	.word	0x7fc00000

08006434 <siprintf>:
 8006434:	b40e      	push	{r1, r2, r3}
 8006436:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800643a:	b500      	push	{lr}
 800643c:	b09c      	sub	sp, #112	; 0x70
 800643e:	ab1d      	add	r3, sp, #116	; 0x74
 8006440:	9002      	str	r0, [sp, #8]
 8006442:	9006      	str	r0, [sp, #24]
 8006444:	9107      	str	r1, [sp, #28]
 8006446:	9104      	str	r1, [sp, #16]
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <siprintf+0x38>)
 800644a:	4909      	ldr	r1, [pc, #36]	; (8006470 <siprintf+0x3c>)
 800644c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006450:	9105      	str	r1, [sp, #20]
 8006452:	6800      	ldr	r0, [r0, #0]
 8006454:	a902      	add	r1, sp, #8
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	f002 feb8 	bl	80091cc <_svfiprintf_r>
 800645c:	2200      	movs	r2, #0
 800645e:	9b02      	ldr	r3, [sp, #8]
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	b01c      	add	sp, #112	; 0x70
 8006464:	f85d eb04 	ldr.w	lr, [sp], #4
 8006468:	b003      	add	sp, #12
 800646a:	4770      	bx	lr
 800646c:	2000000c 	.word	0x2000000c
 8006470:	ffff0208 	.word	0xffff0208

08006474 <sulp>:
 8006474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006478:	460f      	mov	r7, r1
 800647a:	4690      	mov	r8, r2
 800647c:	f002 fc12 	bl	8008ca4 <__ulp>
 8006480:	4604      	mov	r4, r0
 8006482:	460d      	mov	r5, r1
 8006484:	f1b8 0f00 	cmp.w	r8, #0
 8006488:	d011      	beq.n	80064ae <sulp+0x3a>
 800648a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800648e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006492:	2b00      	cmp	r3, #0
 8006494:	dd0b      	ble.n	80064ae <sulp+0x3a>
 8006496:	2400      	movs	r4, #0
 8006498:	051b      	lsls	r3, r3, #20
 800649a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800649e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80064a2:	4622      	mov	r2, r4
 80064a4:	462b      	mov	r3, r5
 80064a6:	f7fa f82f 	bl	8000508 <__aeabi_dmul>
 80064aa:	4604      	mov	r4, r0
 80064ac:	460d      	mov	r5, r1
 80064ae:	4620      	mov	r0, r4
 80064b0:	4629      	mov	r1, r5
 80064b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080064b8 <_strtod_l>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	469b      	mov	fp, r3
 80064be:	2300      	movs	r3, #0
 80064c0:	b09f      	sub	sp, #124	; 0x7c
 80064c2:	931a      	str	r3, [sp, #104]	; 0x68
 80064c4:	4b9e      	ldr	r3, [pc, #632]	; (8006740 <_strtod_l+0x288>)
 80064c6:	4682      	mov	sl, r0
 80064c8:	681f      	ldr	r7, [r3, #0]
 80064ca:	460e      	mov	r6, r1
 80064cc:	4638      	mov	r0, r7
 80064ce:	9215      	str	r2, [sp, #84]	; 0x54
 80064d0:	f7f9 fe56 	bl	8000180 <strlen>
 80064d4:	f04f 0800 	mov.w	r8, #0
 80064d8:	4604      	mov	r4, r0
 80064da:	f04f 0900 	mov.w	r9, #0
 80064de:	9619      	str	r6, [sp, #100]	; 0x64
 80064e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064e2:	781a      	ldrb	r2, [r3, #0]
 80064e4:	2a2b      	cmp	r2, #43	; 0x2b
 80064e6:	d04c      	beq.n	8006582 <_strtod_l+0xca>
 80064e8:	d83a      	bhi.n	8006560 <_strtod_l+0xa8>
 80064ea:	2a0d      	cmp	r2, #13
 80064ec:	d833      	bhi.n	8006556 <_strtod_l+0x9e>
 80064ee:	2a08      	cmp	r2, #8
 80064f0:	d833      	bhi.n	800655a <_strtod_l+0xa2>
 80064f2:	2a00      	cmp	r2, #0
 80064f4:	d03d      	beq.n	8006572 <_strtod_l+0xba>
 80064f6:	2300      	movs	r3, #0
 80064f8:	930a      	str	r3, [sp, #40]	; 0x28
 80064fa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80064fc:	782b      	ldrb	r3, [r5, #0]
 80064fe:	2b30      	cmp	r3, #48	; 0x30
 8006500:	f040 80aa 	bne.w	8006658 <_strtod_l+0x1a0>
 8006504:	786b      	ldrb	r3, [r5, #1]
 8006506:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800650a:	2b58      	cmp	r3, #88	; 0x58
 800650c:	d166      	bne.n	80065dc <_strtod_l+0x124>
 800650e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006510:	4650      	mov	r0, sl
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	ab1a      	add	r3, sp, #104	; 0x68
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	4a8a      	ldr	r2, [pc, #552]	; (8006744 <_strtod_l+0x28c>)
 800651a:	f8cd b008 	str.w	fp, [sp, #8]
 800651e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006520:	a919      	add	r1, sp, #100	; 0x64
 8006522:	f001 fd17 	bl	8007f54 <__gethex>
 8006526:	f010 0607 	ands.w	r6, r0, #7
 800652a:	4604      	mov	r4, r0
 800652c:	d005      	beq.n	800653a <_strtod_l+0x82>
 800652e:	2e06      	cmp	r6, #6
 8006530:	d129      	bne.n	8006586 <_strtod_l+0xce>
 8006532:	2300      	movs	r3, #0
 8006534:	3501      	adds	r5, #1
 8006536:	9519      	str	r5, [sp, #100]	; 0x64
 8006538:	930a      	str	r3, [sp, #40]	; 0x28
 800653a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800653c:	2b00      	cmp	r3, #0
 800653e:	f040 858a 	bne.w	8007056 <_strtod_l+0xb9e>
 8006542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006544:	b1d3      	cbz	r3, 800657c <_strtod_l+0xc4>
 8006546:	4642      	mov	r2, r8
 8006548:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800654c:	4610      	mov	r0, r2
 800654e:	4619      	mov	r1, r3
 8006550:	b01f      	add	sp, #124	; 0x7c
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006556:	2a20      	cmp	r2, #32
 8006558:	d1cd      	bne.n	80064f6 <_strtod_l+0x3e>
 800655a:	3301      	adds	r3, #1
 800655c:	9319      	str	r3, [sp, #100]	; 0x64
 800655e:	e7bf      	b.n	80064e0 <_strtod_l+0x28>
 8006560:	2a2d      	cmp	r2, #45	; 0x2d
 8006562:	d1c8      	bne.n	80064f6 <_strtod_l+0x3e>
 8006564:	2201      	movs	r2, #1
 8006566:	920a      	str	r2, [sp, #40]	; 0x28
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	9219      	str	r2, [sp, #100]	; 0x64
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1c3      	bne.n	80064fa <_strtod_l+0x42>
 8006572:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006574:	9619      	str	r6, [sp, #100]	; 0x64
 8006576:	2b00      	cmp	r3, #0
 8006578:	f040 856b 	bne.w	8007052 <_strtod_l+0xb9a>
 800657c:	4642      	mov	r2, r8
 800657e:	464b      	mov	r3, r9
 8006580:	e7e4      	b.n	800654c <_strtod_l+0x94>
 8006582:	2200      	movs	r2, #0
 8006584:	e7ef      	b.n	8006566 <_strtod_l+0xae>
 8006586:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006588:	b13a      	cbz	r2, 800659a <_strtod_l+0xe2>
 800658a:	2135      	movs	r1, #53	; 0x35
 800658c:	a81c      	add	r0, sp, #112	; 0x70
 800658e:	f002 fc8d 	bl	8008eac <__copybits>
 8006592:	4650      	mov	r0, sl
 8006594:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006596:	f002 f855 	bl	8008644 <_Bfree>
 800659a:	3e01      	subs	r6, #1
 800659c:	2e04      	cmp	r6, #4
 800659e:	d806      	bhi.n	80065ae <_strtod_l+0xf6>
 80065a0:	e8df f006 	tbb	[pc, r6]
 80065a4:	1714030a 	.word	0x1714030a
 80065a8:	0a          	.byte	0x0a
 80065a9:	00          	.byte	0x00
 80065aa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80065ae:	0721      	lsls	r1, r4, #28
 80065b0:	d5c3      	bpl.n	800653a <_strtod_l+0x82>
 80065b2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80065b6:	e7c0      	b.n	800653a <_strtod_l+0x82>
 80065b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80065ba:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80065be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80065c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80065c6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80065ca:	e7f0      	b.n	80065ae <_strtod_l+0xf6>
 80065cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006748 <_strtod_l+0x290>
 80065d0:	e7ed      	b.n	80065ae <_strtod_l+0xf6>
 80065d2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80065d6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80065da:	e7e8      	b.n	80065ae <_strtod_l+0xf6>
 80065dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	9219      	str	r2, [sp, #100]	; 0x64
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b30      	cmp	r3, #48	; 0x30
 80065e6:	d0f9      	beq.n	80065dc <_strtod_l+0x124>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0a6      	beq.n	800653a <_strtod_l+0x82>
 80065ec:	2301      	movs	r3, #1
 80065ee:	9307      	str	r3, [sp, #28]
 80065f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065f2:	220a      	movs	r2, #10
 80065f4:	9308      	str	r3, [sp, #32]
 80065f6:	2300      	movs	r3, #0
 80065f8:	469b      	mov	fp, r3
 80065fa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80065fe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006600:	7805      	ldrb	r5, [r0, #0]
 8006602:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006606:	b2d9      	uxtb	r1, r3
 8006608:	2909      	cmp	r1, #9
 800660a:	d927      	bls.n	800665c <_strtod_l+0x1a4>
 800660c:	4622      	mov	r2, r4
 800660e:	4639      	mov	r1, r7
 8006610:	f002 fef2 	bl	80093f8 <strncmp>
 8006614:	2800      	cmp	r0, #0
 8006616:	d033      	beq.n	8006680 <_strtod_l+0x1c8>
 8006618:	2000      	movs	r0, #0
 800661a:	462a      	mov	r2, r5
 800661c:	465c      	mov	r4, fp
 800661e:	4603      	mov	r3, r0
 8006620:	9004      	str	r0, [sp, #16]
 8006622:	2a65      	cmp	r2, #101	; 0x65
 8006624:	d001      	beq.n	800662a <_strtod_l+0x172>
 8006626:	2a45      	cmp	r2, #69	; 0x45
 8006628:	d114      	bne.n	8006654 <_strtod_l+0x19c>
 800662a:	b91c      	cbnz	r4, 8006634 <_strtod_l+0x17c>
 800662c:	9a07      	ldr	r2, [sp, #28]
 800662e:	4302      	orrs	r2, r0
 8006630:	d09f      	beq.n	8006572 <_strtod_l+0xba>
 8006632:	2400      	movs	r4, #0
 8006634:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006636:	1c72      	adds	r2, r6, #1
 8006638:	9219      	str	r2, [sp, #100]	; 0x64
 800663a:	7872      	ldrb	r2, [r6, #1]
 800663c:	2a2b      	cmp	r2, #43	; 0x2b
 800663e:	d079      	beq.n	8006734 <_strtod_l+0x27c>
 8006640:	2a2d      	cmp	r2, #45	; 0x2d
 8006642:	f000 8083 	beq.w	800674c <_strtod_l+0x294>
 8006646:	2700      	movs	r7, #0
 8006648:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800664c:	2909      	cmp	r1, #9
 800664e:	f240 8083 	bls.w	8006758 <_strtod_l+0x2a0>
 8006652:	9619      	str	r6, [sp, #100]	; 0x64
 8006654:	2500      	movs	r5, #0
 8006656:	e09f      	b.n	8006798 <_strtod_l+0x2e0>
 8006658:	2300      	movs	r3, #0
 800665a:	e7c8      	b.n	80065ee <_strtod_l+0x136>
 800665c:	f1bb 0f08 	cmp.w	fp, #8
 8006660:	bfd5      	itete	le
 8006662:	9906      	ldrle	r1, [sp, #24]
 8006664:	9905      	ldrgt	r1, [sp, #20]
 8006666:	fb02 3301 	mlale	r3, r2, r1, r3
 800666a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800666e:	f100 0001 	add.w	r0, r0, #1
 8006672:	bfd4      	ite	le
 8006674:	9306      	strle	r3, [sp, #24]
 8006676:	9305      	strgt	r3, [sp, #20]
 8006678:	f10b 0b01 	add.w	fp, fp, #1
 800667c:	9019      	str	r0, [sp, #100]	; 0x64
 800667e:	e7be      	b.n	80065fe <_strtod_l+0x146>
 8006680:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006682:	191a      	adds	r2, r3, r4
 8006684:	9219      	str	r2, [sp, #100]	; 0x64
 8006686:	5d1a      	ldrb	r2, [r3, r4]
 8006688:	f1bb 0f00 	cmp.w	fp, #0
 800668c:	d036      	beq.n	80066fc <_strtod_l+0x244>
 800668e:	465c      	mov	r4, fp
 8006690:	9004      	str	r0, [sp, #16]
 8006692:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006696:	2b09      	cmp	r3, #9
 8006698:	d912      	bls.n	80066c0 <_strtod_l+0x208>
 800669a:	2301      	movs	r3, #1
 800669c:	e7c1      	b.n	8006622 <_strtod_l+0x16a>
 800669e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066a0:	3001      	adds	r0, #1
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	9219      	str	r2, [sp, #100]	; 0x64
 80066a6:	785a      	ldrb	r2, [r3, #1]
 80066a8:	2a30      	cmp	r2, #48	; 0x30
 80066aa:	d0f8      	beq.n	800669e <_strtod_l+0x1e6>
 80066ac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	f200 84d5 	bhi.w	8007060 <_strtod_l+0xba8>
 80066b6:	9004      	str	r0, [sp, #16]
 80066b8:	2000      	movs	r0, #0
 80066ba:	4604      	mov	r4, r0
 80066bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066be:	9308      	str	r3, [sp, #32]
 80066c0:	3a30      	subs	r2, #48	; 0x30
 80066c2:	f100 0301 	add.w	r3, r0, #1
 80066c6:	d013      	beq.n	80066f0 <_strtod_l+0x238>
 80066c8:	9904      	ldr	r1, [sp, #16]
 80066ca:	1905      	adds	r5, r0, r4
 80066cc:	4419      	add	r1, r3
 80066ce:	9104      	str	r1, [sp, #16]
 80066d0:	4623      	mov	r3, r4
 80066d2:	210a      	movs	r1, #10
 80066d4:	42ab      	cmp	r3, r5
 80066d6:	d113      	bne.n	8006700 <_strtod_l+0x248>
 80066d8:	1823      	adds	r3, r4, r0
 80066da:	2b08      	cmp	r3, #8
 80066dc:	f104 0401 	add.w	r4, r4, #1
 80066e0:	4404      	add	r4, r0
 80066e2:	dc1b      	bgt.n	800671c <_strtod_l+0x264>
 80066e4:	230a      	movs	r3, #10
 80066e6:	9906      	ldr	r1, [sp, #24]
 80066e8:	fb03 2301 	mla	r3, r3, r1, r2
 80066ec:	9306      	str	r3, [sp, #24]
 80066ee:	2300      	movs	r3, #0
 80066f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80066f2:	4618      	mov	r0, r3
 80066f4:	1c51      	adds	r1, r2, #1
 80066f6:	9119      	str	r1, [sp, #100]	; 0x64
 80066f8:	7852      	ldrb	r2, [r2, #1]
 80066fa:	e7ca      	b.n	8006692 <_strtod_l+0x1da>
 80066fc:	4658      	mov	r0, fp
 80066fe:	e7d3      	b.n	80066a8 <_strtod_l+0x1f0>
 8006700:	2b08      	cmp	r3, #8
 8006702:	dc04      	bgt.n	800670e <_strtod_l+0x256>
 8006704:	9f06      	ldr	r7, [sp, #24]
 8006706:	434f      	muls	r7, r1
 8006708:	9706      	str	r7, [sp, #24]
 800670a:	3301      	adds	r3, #1
 800670c:	e7e2      	b.n	80066d4 <_strtod_l+0x21c>
 800670e:	1c5f      	adds	r7, r3, #1
 8006710:	2f10      	cmp	r7, #16
 8006712:	bfde      	ittt	le
 8006714:	9f05      	ldrle	r7, [sp, #20]
 8006716:	434f      	mulle	r7, r1
 8006718:	9705      	strle	r7, [sp, #20]
 800671a:	e7f6      	b.n	800670a <_strtod_l+0x252>
 800671c:	2c10      	cmp	r4, #16
 800671e:	bfdf      	itttt	le
 8006720:	230a      	movle	r3, #10
 8006722:	9905      	ldrle	r1, [sp, #20]
 8006724:	fb03 2301 	mlale	r3, r3, r1, r2
 8006728:	9305      	strle	r3, [sp, #20]
 800672a:	e7e0      	b.n	80066ee <_strtod_l+0x236>
 800672c:	2300      	movs	r3, #0
 800672e:	9304      	str	r3, [sp, #16]
 8006730:	2301      	movs	r3, #1
 8006732:	e77b      	b.n	800662c <_strtod_l+0x174>
 8006734:	2700      	movs	r7, #0
 8006736:	1cb2      	adds	r2, r6, #2
 8006738:	9219      	str	r2, [sp, #100]	; 0x64
 800673a:	78b2      	ldrb	r2, [r6, #2]
 800673c:	e784      	b.n	8006648 <_strtod_l+0x190>
 800673e:	bf00      	nop
 8006740:	0800a350 	.word	0x0800a350
 8006744:	0800a108 	.word	0x0800a108
 8006748:	7ff00000 	.word	0x7ff00000
 800674c:	2701      	movs	r7, #1
 800674e:	e7f2      	b.n	8006736 <_strtod_l+0x27e>
 8006750:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006752:	1c51      	adds	r1, r2, #1
 8006754:	9119      	str	r1, [sp, #100]	; 0x64
 8006756:	7852      	ldrb	r2, [r2, #1]
 8006758:	2a30      	cmp	r2, #48	; 0x30
 800675a:	d0f9      	beq.n	8006750 <_strtod_l+0x298>
 800675c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006760:	2908      	cmp	r1, #8
 8006762:	f63f af77 	bhi.w	8006654 <_strtod_l+0x19c>
 8006766:	f04f 0e0a 	mov.w	lr, #10
 800676a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800676e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006770:	9209      	str	r2, [sp, #36]	; 0x24
 8006772:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006774:	1c51      	adds	r1, r2, #1
 8006776:	9119      	str	r1, [sp, #100]	; 0x64
 8006778:	7852      	ldrb	r2, [r2, #1]
 800677a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800677e:	2d09      	cmp	r5, #9
 8006780:	d935      	bls.n	80067ee <_strtod_l+0x336>
 8006782:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006784:	1b49      	subs	r1, r1, r5
 8006786:	2908      	cmp	r1, #8
 8006788:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800678c:	dc02      	bgt.n	8006794 <_strtod_l+0x2dc>
 800678e:	4565      	cmp	r5, ip
 8006790:	bfa8      	it	ge
 8006792:	4665      	movge	r5, ip
 8006794:	b107      	cbz	r7, 8006798 <_strtod_l+0x2e0>
 8006796:	426d      	negs	r5, r5
 8006798:	2c00      	cmp	r4, #0
 800679a:	d14c      	bne.n	8006836 <_strtod_l+0x37e>
 800679c:	9907      	ldr	r1, [sp, #28]
 800679e:	4301      	orrs	r1, r0
 80067a0:	f47f aecb 	bne.w	800653a <_strtod_l+0x82>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f47f aee4 	bne.w	8006572 <_strtod_l+0xba>
 80067aa:	2a69      	cmp	r2, #105	; 0x69
 80067ac:	d026      	beq.n	80067fc <_strtod_l+0x344>
 80067ae:	dc23      	bgt.n	80067f8 <_strtod_l+0x340>
 80067b0:	2a49      	cmp	r2, #73	; 0x49
 80067b2:	d023      	beq.n	80067fc <_strtod_l+0x344>
 80067b4:	2a4e      	cmp	r2, #78	; 0x4e
 80067b6:	f47f aedc 	bne.w	8006572 <_strtod_l+0xba>
 80067ba:	499d      	ldr	r1, [pc, #628]	; (8006a30 <_strtod_l+0x578>)
 80067bc:	a819      	add	r0, sp, #100	; 0x64
 80067be:	f001 fe17 	bl	80083f0 <__match>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	f43f aed5 	beq.w	8006572 <_strtod_l+0xba>
 80067c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b28      	cmp	r3, #40	; 0x28
 80067ce:	d12c      	bne.n	800682a <_strtod_l+0x372>
 80067d0:	4998      	ldr	r1, [pc, #608]	; (8006a34 <_strtod_l+0x57c>)
 80067d2:	aa1c      	add	r2, sp, #112	; 0x70
 80067d4:	a819      	add	r0, sp, #100	; 0x64
 80067d6:	f001 fe1f 	bl	8008418 <__hexnan>
 80067da:	2805      	cmp	r0, #5
 80067dc:	d125      	bne.n	800682a <_strtod_l+0x372>
 80067de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067e0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80067e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80067e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80067ec:	e6a5      	b.n	800653a <_strtod_l+0x82>
 80067ee:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80067f2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80067f6:	e7bc      	b.n	8006772 <_strtod_l+0x2ba>
 80067f8:	2a6e      	cmp	r2, #110	; 0x6e
 80067fa:	e7dc      	b.n	80067b6 <_strtod_l+0x2fe>
 80067fc:	498e      	ldr	r1, [pc, #568]	; (8006a38 <_strtod_l+0x580>)
 80067fe:	a819      	add	r0, sp, #100	; 0x64
 8006800:	f001 fdf6 	bl	80083f0 <__match>
 8006804:	2800      	cmp	r0, #0
 8006806:	f43f aeb4 	beq.w	8006572 <_strtod_l+0xba>
 800680a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800680c:	498b      	ldr	r1, [pc, #556]	; (8006a3c <_strtod_l+0x584>)
 800680e:	3b01      	subs	r3, #1
 8006810:	a819      	add	r0, sp, #100	; 0x64
 8006812:	9319      	str	r3, [sp, #100]	; 0x64
 8006814:	f001 fdec 	bl	80083f0 <__match>
 8006818:	b910      	cbnz	r0, 8006820 <_strtod_l+0x368>
 800681a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800681c:	3301      	adds	r3, #1
 800681e:	9319      	str	r3, [sp, #100]	; 0x64
 8006820:	f04f 0800 	mov.w	r8, #0
 8006824:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006a40 <_strtod_l+0x588>
 8006828:	e687      	b.n	800653a <_strtod_l+0x82>
 800682a:	4886      	ldr	r0, [pc, #536]	; (8006a44 <_strtod_l+0x58c>)
 800682c:	f002 fdce 	bl	80093cc <nan>
 8006830:	4680      	mov	r8, r0
 8006832:	4689      	mov	r9, r1
 8006834:	e681      	b.n	800653a <_strtod_l+0x82>
 8006836:	9b04      	ldr	r3, [sp, #16]
 8006838:	f1bb 0f00 	cmp.w	fp, #0
 800683c:	bf08      	it	eq
 800683e:	46a3      	moveq	fp, r4
 8006840:	1aeb      	subs	r3, r5, r3
 8006842:	2c10      	cmp	r4, #16
 8006844:	9806      	ldr	r0, [sp, #24]
 8006846:	4626      	mov	r6, r4
 8006848:	9307      	str	r3, [sp, #28]
 800684a:	bfa8      	it	ge
 800684c:	2610      	movge	r6, #16
 800684e:	f7f9 fde1 	bl	8000414 <__aeabi_ui2d>
 8006852:	2c09      	cmp	r4, #9
 8006854:	4680      	mov	r8, r0
 8006856:	4689      	mov	r9, r1
 8006858:	dd13      	ble.n	8006882 <_strtod_l+0x3ca>
 800685a:	4b7b      	ldr	r3, [pc, #492]	; (8006a48 <_strtod_l+0x590>)
 800685c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006860:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006864:	f7f9 fe50 	bl	8000508 <__aeabi_dmul>
 8006868:	4680      	mov	r8, r0
 800686a:	9805      	ldr	r0, [sp, #20]
 800686c:	4689      	mov	r9, r1
 800686e:	f7f9 fdd1 	bl	8000414 <__aeabi_ui2d>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	4640      	mov	r0, r8
 8006878:	4649      	mov	r1, r9
 800687a:	f7f9 fc8f 	bl	800019c <__adddf3>
 800687e:	4680      	mov	r8, r0
 8006880:	4689      	mov	r9, r1
 8006882:	2c0f      	cmp	r4, #15
 8006884:	dc36      	bgt.n	80068f4 <_strtod_l+0x43c>
 8006886:	9b07      	ldr	r3, [sp, #28]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f43f ae56 	beq.w	800653a <_strtod_l+0x82>
 800688e:	dd22      	ble.n	80068d6 <_strtod_l+0x41e>
 8006890:	2b16      	cmp	r3, #22
 8006892:	dc09      	bgt.n	80068a8 <_strtod_l+0x3f0>
 8006894:	496c      	ldr	r1, [pc, #432]	; (8006a48 <_strtod_l+0x590>)
 8006896:	4642      	mov	r2, r8
 8006898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800689c:	464b      	mov	r3, r9
 800689e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068a2:	f7f9 fe31 	bl	8000508 <__aeabi_dmul>
 80068a6:	e7c3      	b.n	8006830 <_strtod_l+0x378>
 80068a8:	9a07      	ldr	r2, [sp, #28]
 80068aa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80068ae:	4293      	cmp	r3, r2
 80068b0:	db20      	blt.n	80068f4 <_strtod_l+0x43c>
 80068b2:	4d65      	ldr	r5, [pc, #404]	; (8006a48 <_strtod_l+0x590>)
 80068b4:	f1c4 040f 	rsb	r4, r4, #15
 80068b8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80068bc:	4642      	mov	r2, r8
 80068be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c2:	464b      	mov	r3, r9
 80068c4:	f7f9 fe20 	bl	8000508 <__aeabi_dmul>
 80068c8:	9b07      	ldr	r3, [sp, #28]
 80068ca:	1b1c      	subs	r4, r3, r4
 80068cc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80068d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068d4:	e7e5      	b.n	80068a2 <_strtod_l+0x3ea>
 80068d6:	9b07      	ldr	r3, [sp, #28]
 80068d8:	3316      	adds	r3, #22
 80068da:	db0b      	blt.n	80068f4 <_strtod_l+0x43c>
 80068dc:	9b04      	ldr	r3, [sp, #16]
 80068de:	4640      	mov	r0, r8
 80068e0:	1b5d      	subs	r5, r3, r5
 80068e2:	4b59      	ldr	r3, [pc, #356]	; (8006a48 <_strtod_l+0x590>)
 80068e4:	4649      	mov	r1, r9
 80068e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80068ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068ee:	f7f9 ff35 	bl	800075c <__aeabi_ddiv>
 80068f2:	e79d      	b.n	8006830 <_strtod_l+0x378>
 80068f4:	9b07      	ldr	r3, [sp, #28]
 80068f6:	1ba6      	subs	r6, r4, r6
 80068f8:	441e      	add	r6, r3
 80068fa:	2e00      	cmp	r6, #0
 80068fc:	dd74      	ble.n	80069e8 <_strtod_l+0x530>
 80068fe:	f016 030f 	ands.w	r3, r6, #15
 8006902:	d00a      	beq.n	800691a <_strtod_l+0x462>
 8006904:	4950      	ldr	r1, [pc, #320]	; (8006a48 <_strtod_l+0x590>)
 8006906:	4642      	mov	r2, r8
 8006908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800690c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006910:	464b      	mov	r3, r9
 8006912:	f7f9 fdf9 	bl	8000508 <__aeabi_dmul>
 8006916:	4680      	mov	r8, r0
 8006918:	4689      	mov	r9, r1
 800691a:	f036 060f 	bics.w	r6, r6, #15
 800691e:	d052      	beq.n	80069c6 <_strtod_l+0x50e>
 8006920:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006924:	dd27      	ble.n	8006976 <_strtod_l+0x4be>
 8006926:	f04f 0b00 	mov.w	fp, #0
 800692a:	f8cd b010 	str.w	fp, [sp, #16]
 800692e:	f8cd b020 	str.w	fp, [sp, #32]
 8006932:	f8cd b018 	str.w	fp, [sp, #24]
 8006936:	2322      	movs	r3, #34	; 0x22
 8006938:	f04f 0800 	mov.w	r8, #0
 800693c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006a40 <_strtod_l+0x588>
 8006940:	f8ca 3000 	str.w	r3, [sl]
 8006944:	9b08      	ldr	r3, [sp, #32]
 8006946:	2b00      	cmp	r3, #0
 8006948:	f43f adf7 	beq.w	800653a <_strtod_l+0x82>
 800694c:	4650      	mov	r0, sl
 800694e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006950:	f001 fe78 	bl	8008644 <_Bfree>
 8006954:	4650      	mov	r0, sl
 8006956:	9906      	ldr	r1, [sp, #24]
 8006958:	f001 fe74 	bl	8008644 <_Bfree>
 800695c:	4650      	mov	r0, sl
 800695e:	9904      	ldr	r1, [sp, #16]
 8006960:	f001 fe70 	bl	8008644 <_Bfree>
 8006964:	4650      	mov	r0, sl
 8006966:	9908      	ldr	r1, [sp, #32]
 8006968:	f001 fe6c 	bl	8008644 <_Bfree>
 800696c:	4659      	mov	r1, fp
 800696e:	4650      	mov	r0, sl
 8006970:	f001 fe68 	bl	8008644 <_Bfree>
 8006974:	e5e1      	b.n	800653a <_strtod_l+0x82>
 8006976:	4b35      	ldr	r3, [pc, #212]	; (8006a4c <_strtod_l+0x594>)
 8006978:	4640      	mov	r0, r8
 800697a:	9305      	str	r3, [sp, #20]
 800697c:	2300      	movs	r3, #0
 800697e:	4649      	mov	r1, r9
 8006980:	461f      	mov	r7, r3
 8006982:	1136      	asrs	r6, r6, #4
 8006984:	2e01      	cmp	r6, #1
 8006986:	dc21      	bgt.n	80069cc <_strtod_l+0x514>
 8006988:	b10b      	cbz	r3, 800698e <_strtod_l+0x4d6>
 800698a:	4680      	mov	r8, r0
 800698c:	4689      	mov	r9, r1
 800698e:	4b2f      	ldr	r3, [pc, #188]	; (8006a4c <_strtod_l+0x594>)
 8006990:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006994:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006998:	4642      	mov	r2, r8
 800699a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800699e:	464b      	mov	r3, r9
 80069a0:	f7f9 fdb2 	bl	8000508 <__aeabi_dmul>
 80069a4:	4b26      	ldr	r3, [pc, #152]	; (8006a40 <_strtod_l+0x588>)
 80069a6:	460a      	mov	r2, r1
 80069a8:	400b      	ands	r3, r1
 80069aa:	4929      	ldr	r1, [pc, #164]	; (8006a50 <_strtod_l+0x598>)
 80069ac:	4680      	mov	r8, r0
 80069ae:	428b      	cmp	r3, r1
 80069b0:	d8b9      	bhi.n	8006926 <_strtod_l+0x46e>
 80069b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80069b6:	428b      	cmp	r3, r1
 80069b8:	bf86      	itte	hi
 80069ba:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80069be:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006a54 <_strtod_l+0x59c>
 80069c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80069c6:	2300      	movs	r3, #0
 80069c8:	9305      	str	r3, [sp, #20]
 80069ca:	e07f      	b.n	8006acc <_strtod_l+0x614>
 80069cc:	07f2      	lsls	r2, r6, #31
 80069ce:	d505      	bpl.n	80069dc <_strtod_l+0x524>
 80069d0:	9b05      	ldr	r3, [sp, #20]
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f7f9 fd97 	bl	8000508 <__aeabi_dmul>
 80069da:	2301      	movs	r3, #1
 80069dc:	9a05      	ldr	r2, [sp, #20]
 80069de:	3701      	adds	r7, #1
 80069e0:	3208      	adds	r2, #8
 80069e2:	1076      	asrs	r6, r6, #1
 80069e4:	9205      	str	r2, [sp, #20]
 80069e6:	e7cd      	b.n	8006984 <_strtod_l+0x4cc>
 80069e8:	d0ed      	beq.n	80069c6 <_strtod_l+0x50e>
 80069ea:	4276      	negs	r6, r6
 80069ec:	f016 020f 	ands.w	r2, r6, #15
 80069f0:	d00a      	beq.n	8006a08 <_strtod_l+0x550>
 80069f2:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <_strtod_l+0x590>)
 80069f4:	4640      	mov	r0, r8
 80069f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069fa:	4649      	mov	r1, r9
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f7f9 feac 	bl	800075c <__aeabi_ddiv>
 8006a04:	4680      	mov	r8, r0
 8006a06:	4689      	mov	r9, r1
 8006a08:	1136      	asrs	r6, r6, #4
 8006a0a:	d0dc      	beq.n	80069c6 <_strtod_l+0x50e>
 8006a0c:	2e1f      	cmp	r6, #31
 8006a0e:	dd23      	ble.n	8006a58 <_strtod_l+0x5a0>
 8006a10:	f04f 0b00 	mov.w	fp, #0
 8006a14:	f8cd b010 	str.w	fp, [sp, #16]
 8006a18:	f8cd b020 	str.w	fp, [sp, #32]
 8006a1c:	f8cd b018 	str.w	fp, [sp, #24]
 8006a20:	2322      	movs	r3, #34	; 0x22
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	f04f 0900 	mov.w	r9, #0
 8006a2a:	f8ca 3000 	str.w	r3, [sl]
 8006a2e:	e789      	b.n	8006944 <_strtod_l+0x48c>
 8006a30:	0800a0d9 	.word	0x0800a0d9
 8006a34:	0800a11c 	.word	0x0800a11c
 8006a38:	0800a0d1 	.word	0x0800a0d1
 8006a3c:	0800a25c 	.word	0x0800a25c
 8006a40:	7ff00000 	.word	0x7ff00000
 8006a44:	0800a508 	.word	0x0800a508
 8006a48:	0800a3e8 	.word	0x0800a3e8
 8006a4c:	0800a3c0 	.word	0x0800a3c0
 8006a50:	7ca00000 	.word	0x7ca00000
 8006a54:	7fefffff 	.word	0x7fefffff
 8006a58:	f016 0310 	ands.w	r3, r6, #16
 8006a5c:	bf18      	it	ne
 8006a5e:	236a      	movne	r3, #106	; 0x6a
 8006a60:	4640      	mov	r0, r8
 8006a62:	9305      	str	r3, [sp, #20]
 8006a64:	4649      	mov	r1, r9
 8006a66:	2300      	movs	r3, #0
 8006a68:	4fb0      	ldr	r7, [pc, #704]	; (8006d2c <_strtod_l+0x874>)
 8006a6a:	07f2      	lsls	r2, r6, #31
 8006a6c:	d504      	bpl.n	8006a78 <_strtod_l+0x5c0>
 8006a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a72:	f7f9 fd49 	bl	8000508 <__aeabi_dmul>
 8006a76:	2301      	movs	r3, #1
 8006a78:	1076      	asrs	r6, r6, #1
 8006a7a:	f107 0708 	add.w	r7, r7, #8
 8006a7e:	d1f4      	bne.n	8006a6a <_strtod_l+0x5b2>
 8006a80:	b10b      	cbz	r3, 8006a86 <_strtod_l+0x5ce>
 8006a82:	4680      	mov	r8, r0
 8006a84:	4689      	mov	r9, r1
 8006a86:	9b05      	ldr	r3, [sp, #20]
 8006a88:	b1c3      	cbz	r3, 8006abc <_strtod_l+0x604>
 8006a8a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006a8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	4649      	mov	r1, r9
 8006a96:	dd11      	ble.n	8006abc <_strtod_l+0x604>
 8006a98:	2b1f      	cmp	r3, #31
 8006a9a:	f340 8127 	ble.w	8006cec <_strtod_l+0x834>
 8006a9e:	2b34      	cmp	r3, #52	; 0x34
 8006aa0:	bfd8      	it	le
 8006aa2:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8006aa6:	f04f 0800 	mov.w	r8, #0
 8006aaa:	bfcf      	iteee	gt
 8006aac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006ab0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006ab4:	fa03 f202 	lslle.w	r2, r3, r2
 8006ab8:	ea02 0901 	andle.w	r9, r2, r1
 8006abc:	2200      	movs	r2, #0
 8006abe:	2300      	movs	r3, #0
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	f7f9 ff88 	bl	80009d8 <__aeabi_dcmpeq>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d1a1      	bne.n	8006a10 <_strtod_l+0x558>
 8006acc:	9b06      	ldr	r3, [sp, #24]
 8006ace:	465a      	mov	r2, fp
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	4650      	mov	r0, sl
 8006ad4:	4623      	mov	r3, r4
 8006ad6:	9908      	ldr	r1, [sp, #32]
 8006ad8:	f001 fe1c 	bl	8008714 <__s2b>
 8006adc:	9008      	str	r0, [sp, #32]
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	f43f af21 	beq.w	8006926 <_strtod_l+0x46e>
 8006ae4:	9b04      	ldr	r3, [sp, #16]
 8006ae6:	f04f 0b00 	mov.w	fp, #0
 8006aea:	1b5d      	subs	r5, r3, r5
 8006aec:	9b07      	ldr	r3, [sp, #28]
 8006aee:	f8cd b010 	str.w	fp, [sp, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bfb4      	ite	lt
 8006af6:	462b      	movlt	r3, r5
 8006af8:	2300      	movge	r3, #0
 8006afa:	930e      	str	r3, [sp, #56]	; 0x38
 8006afc:	9b07      	ldr	r3, [sp, #28]
 8006afe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b02:	9314      	str	r3, [sp, #80]	; 0x50
 8006b04:	9b08      	ldr	r3, [sp, #32]
 8006b06:	4650      	mov	r0, sl
 8006b08:	6859      	ldr	r1, [r3, #4]
 8006b0a:	f001 fd5b 	bl	80085c4 <_Balloc>
 8006b0e:	9006      	str	r0, [sp, #24]
 8006b10:	2800      	cmp	r0, #0
 8006b12:	f43f af10 	beq.w	8006936 <_strtod_l+0x47e>
 8006b16:	9b08      	ldr	r3, [sp, #32]
 8006b18:	300c      	adds	r0, #12
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	f103 010c 	add.w	r1, r3, #12
 8006b20:	3202      	adds	r2, #2
 8006b22:	0092      	lsls	r2, r2, #2
 8006b24:	f001 fd40 	bl	80085a8 <memcpy>
 8006b28:	ab1c      	add	r3, sp, #112	; 0x70
 8006b2a:	9301      	str	r3, [sp, #4]
 8006b2c:	ab1b      	add	r3, sp, #108	; 0x6c
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	4642      	mov	r2, r8
 8006b32:	464b      	mov	r3, r9
 8006b34:	4650      	mov	r0, sl
 8006b36:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006b3a:	f002 f92d 	bl	8008d98 <__d2b>
 8006b3e:	901a      	str	r0, [sp, #104]	; 0x68
 8006b40:	2800      	cmp	r0, #0
 8006b42:	f43f aef8 	beq.w	8006936 <_strtod_l+0x47e>
 8006b46:	2101      	movs	r1, #1
 8006b48:	4650      	mov	r0, sl
 8006b4a:	f001 fe7b 	bl	8008844 <__i2b>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	9004      	str	r0, [sp, #16]
 8006b52:	2800      	cmp	r0, #0
 8006b54:	f43f aeef 	beq.w	8006936 <_strtod_l+0x47e>
 8006b58:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006b5a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b5c:	2d00      	cmp	r5, #0
 8006b5e:	bfab      	itete	ge
 8006b60:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006b62:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006b64:	18ee      	addge	r6, r5, r3
 8006b66:	1b5c      	sublt	r4, r3, r5
 8006b68:	9b05      	ldr	r3, [sp, #20]
 8006b6a:	bfa8      	it	ge
 8006b6c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006b6e:	eba5 0503 	sub.w	r5, r5, r3
 8006b72:	4415      	add	r5, r2
 8006b74:	4b6e      	ldr	r3, [pc, #440]	; (8006d30 <_strtod_l+0x878>)
 8006b76:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006b7a:	bfb8      	it	lt
 8006b7c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006b7e:	429d      	cmp	r5, r3
 8006b80:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b84:	f280 80c4 	bge.w	8006d10 <_strtod_l+0x858>
 8006b88:	1b5b      	subs	r3, r3, r5
 8006b8a:	2b1f      	cmp	r3, #31
 8006b8c:	f04f 0701 	mov.w	r7, #1
 8006b90:	eba2 0203 	sub.w	r2, r2, r3
 8006b94:	f300 80b1 	bgt.w	8006cfa <_strtod_l+0x842>
 8006b98:	2500      	movs	r5, #0
 8006b9a:	fa07 f303 	lsl.w	r3, r7, r3
 8006b9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ba0:	18b7      	adds	r7, r6, r2
 8006ba2:	9b05      	ldr	r3, [sp, #20]
 8006ba4:	42be      	cmp	r6, r7
 8006ba6:	4414      	add	r4, r2
 8006ba8:	441c      	add	r4, r3
 8006baa:	4633      	mov	r3, r6
 8006bac:	bfa8      	it	ge
 8006bae:	463b      	movge	r3, r7
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	bfa8      	it	ge
 8006bb4:	4623      	movge	r3, r4
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bfc2      	ittt	gt
 8006bba:	1aff      	subgt	r7, r7, r3
 8006bbc:	1ae4      	subgt	r4, r4, r3
 8006bbe:	1af6      	subgt	r6, r6, r3
 8006bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	dd17      	ble.n	8006bf6 <_strtod_l+0x73e>
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	4650      	mov	r0, sl
 8006bca:	9904      	ldr	r1, [sp, #16]
 8006bcc:	f001 fef8 	bl	80089c0 <__pow5mult>
 8006bd0:	9004      	str	r0, [sp, #16]
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	f43f aeaf 	beq.w	8006936 <_strtod_l+0x47e>
 8006bd8:	4601      	mov	r1, r0
 8006bda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006bdc:	4650      	mov	r0, sl
 8006bde:	f001 fe47 	bl	8008870 <__multiply>
 8006be2:	9009      	str	r0, [sp, #36]	; 0x24
 8006be4:	2800      	cmp	r0, #0
 8006be6:	f43f aea6 	beq.w	8006936 <_strtod_l+0x47e>
 8006bea:	4650      	mov	r0, sl
 8006bec:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006bee:	f001 fd29 	bl	8008644 <_Bfree>
 8006bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8006bf6:	2f00      	cmp	r7, #0
 8006bf8:	f300 808e 	bgt.w	8006d18 <_strtod_l+0x860>
 8006bfc:	9b07      	ldr	r3, [sp, #28]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	dd08      	ble.n	8006c14 <_strtod_l+0x75c>
 8006c02:	4650      	mov	r0, sl
 8006c04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c06:	9906      	ldr	r1, [sp, #24]
 8006c08:	f001 feda 	bl	80089c0 <__pow5mult>
 8006c0c:	9006      	str	r0, [sp, #24]
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	f43f ae91 	beq.w	8006936 <_strtod_l+0x47e>
 8006c14:	2c00      	cmp	r4, #0
 8006c16:	dd08      	ble.n	8006c2a <_strtod_l+0x772>
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4650      	mov	r0, sl
 8006c1c:	9906      	ldr	r1, [sp, #24]
 8006c1e:	f001 ff29 	bl	8008a74 <__lshift>
 8006c22:	9006      	str	r0, [sp, #24]
 8006c24:	2800      	cmp	r0, #0
 8006c26:	f43f ae86 	beq.w	8006936 <_strtod_l+0x47e>
 8006c2a:	2e00      	cmp	r6, #0
 8006c2c:	dd08      	ble.n	8006c40 <_strtod_l+0x788>
 8006c2e:	4632      	mov	r2, r6
 8006c30:	4650      	mov	r0, sl
 8006c32:	9904      	ldr	r1, [sp, #16]
 8006c34:	f001 ff1e 	bl	8008a74 <__lshift>
 8006c38:	9004      	str	r0, [sp, #16]
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	f43f ae7b 	beq.w	8006936 <_strtod_l+0x47e>
 8006c40:	4650      	mov	r0, sl
 8006c42:	9a06      	ldr	r2, [sp, #24]
 8006c44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c46:	f001 ffa1 	bl	8008b8c <__mdiff>
 8006c4a:	4683      	mov	fp, r0
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	f43f ae72 	beq.w	8006936 <_strtod_l+0x47e>
 8006c52:	2400      	movs	r4, #0
 8006c54:	68c3      	ldr	r3, [r0, #12]
 8006c56:	9904      	ldr	r1, [sp, #16]
 8006c58:	60c4      	str	r4, [r0, #12]
 8006c5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c5c:	f001 ff7a 	bl	8008b54 <__mcmp>
 8006c60:	42a0      	cmp	r0, r4
 8006c62:	da6b      	bge.n	8006d3c <_strtod_l+0x884>
 8006c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c66:	ea53 0308 	orrs.w	r3, r3, r8
 8006c6a:	f040 8091 	bne.w	8006d90 <_strtod_l+0x8d8>
 8006c6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f040 808c 	bne.w	8006d90 <_strtod_l+0x8d8>
 8006c78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c7c:	0d1b      	lsrs	r3, r3, #20
 8006c7e:	051b      	lsls	r3, r3, #20
 8006c80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006c84:	f240 8084 	bls.w	8006d90 <_strtod_l+0x8d8>
 8006c88:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006c8c:	b91b      	cbnz	r3, 8006c96 <_strtod_l+0x7de>
 8006c8e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	dd7c      	ble.n	8006d90 <_strtod_l+0x8d8>
 8006c96:	4659      	mov	r1, fp
 8006c98:	2201      	movs	r2, #1
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	f001 feea 	bl	8008a74 <__lshift>
 8006ca0:	9904      	ldr	r1, [sp, #16]
 8006ca2:	4683      	mov	fp, r0
 8006ca4:	f001 ff56 	bl	8008b54 <__mcmp>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	dd71      	ble.n	8006d90 <_strtod_l+0x8d8>
 8006cac:	9905      	ldr	r1, [sp, #20]
 8006cae:	464b      	mov	r3, r9
 8006cb0:	4a20      	ldr	r2, [pc, #128]	; (8006d34 <_strtod_l+0x87c>)
 8006cb2:	2900      	cmp	r1, #0
 8006cb4:	f000 808c 	beq.w	8006dd0 <_strtod_l+0x918>
 8006cb8:	ea02 0109 	and.w	r1, r2, r9
 8006cbc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006cc0:	f300 8086 	bgt.w	8006dd0 <_strtod_l+0x918>
 8006cc4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006cc8:	f77f aeaa 	ble.w	8006a20 <_strtod_l+0x568>
 8006ccc:	4640      	mov	r0, r8
 8006cce:	4649      	mov	r1, r9
 8006cd0:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <_strtod_l+0x880>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f7f9 fc18 	bl	8000508 <__aeabi_dmul>
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4303      	orrs	r3, r0
 8006cdc:	bf08      	it	eq
 8006cde:	2322      	moveq	r3, #34	; 0x22
 8006ce0:	4680      	mov	r8, r0
 8006ce2:	4689      	mov	r9, r1
 8006ce4:	bf08      	it	eq
 8006ce6:	f8ca 3000 	streq.w	r3, [sl]
 8006cea:	e62f      	b.n	800694c <_strtod_l+0x494>
 8006cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf4:	ea03 0808 	and.w	r8, r3, r8
 8006cf8:	e6e0      	b.n	8006abc <_strtod_l+0x604>
 8006cfa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006cfe:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006d02:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006d06:	35e2      	adds	r5, #226	; 0xe2
 8006d08:	fa07 f505 	lsl.w	r5, r7, r5
 8006d0c:	970f      	str	r7, [sp, #60]	; 0x3c
 8006d0e:	e747      	b.n	8006ba0 <_strtod_l+0x6e8>
 8006d10:	2301      	movs	r3, #1
 8006d12:	2500      	movs	r5, #0
 8006d14:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d16:	e743      	b.n	8006ba0 <_strtod_l+0x6e8>
 8006d18:	463a      	mov	r2, r7
 8006d1a:	4650      	mov	r0, sl
 8006d1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d1e:	f001 fea9 	bl	8008a74 <__lshift>
 8006d22:	901a      	str	r0, [sp, #104]	; 0x68
 8006d24:	2800      	cmp	r0, #0
 8006d26:	f47f af69 	bne.w	8006bfc <_strtod_l+0x744>
 8006d2a:	e604      	b.n	8006936 <_strtod_l+0x47e>
 8006d2c:	0800a130 	.word	0x0800a130
 8006d30:	fffffc02 	.word	0xfffffc02
 8006d34:	7ff00000 	.word	0x7ff00000
 8006d38:	39500000 	.word	0x39500000
 8006d3c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006d40:	d165      	bne.n	8006e0e <_strtod_l+0x956>
 8006d42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d48:	b35a      	cbz	r2, 8006da2 <_strtod_l+0x8ea>
 8006d4a:	4a99      	ldr	r2, [pc, #612]	; (8006fb0 <_strtod_l+0xaf8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d12b      	bne.n	8006da8 <_strtod_l+0x8f0>
 8006d50:	9b05      	ldr	r3, [sp, #20]
 8006d52:	4641      	mov	r1, r8
 8006d54:	b303      	cbz	r3, 8006d98 <_strtod_l+0x8e0>
 8006d56:	464a      	mov	r2, r9
 8006d58:	4b96      	ldr	r3, [pc, #600]	; (8006fb4 <_strtod_l+0xafc>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d64:	d81b      	bhi.n	8006d9e <_strtod_l+0x8e6>
 8006d66:	0d1b      	lsrs	r3, r3, #20
 8006d68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d70:	4299      	cmp	r1, r3
 8006d72:	d119      	bne.n	8006da8 <_strtod_l+0x8f0>
 8006d74:	4b90      	ldr	r3, [pc, #576]	; (8006fb8 <_strtod_l+0xb00>)
 8006d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d102      	bne.n	8006d82 <_strtod_l+0x8ca>
 8006d7c:	3101      	adds	r1, #1
 8006d7e:	f43f adda 	beq.w	8006936 <_strtod_l+0x47e>
 8006d82:	f04f 0800 	mov.w	r8, #0
 8006d86:	4b8b      	ldr	r3, [pc, #556]	; (8006fb4 <_strtod_l+0xafc>)
 8006d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d8a:	401a      	ands	r2, r3
 8006d8c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006d90:	9b05      	ldr	r3, [sp, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d19a      	bne.n	8006ccc <_strtod_l+0x814>
 8006d96:	e5d9      	b.n	800694c <_strtod_l+0x494>
 8006d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d9c:	e7e8      	b.n	8006d70 <_strtod_l+0x8b8>
 8006d9e:	4613      	mov	r3, r2
 8006da0:	e7e6      	b.n	8006d70 <_strtod_l+0x8b8>
 8006da2:	ea53 0308 	orrs.w	r3, r3, r8
 8006da6:	d081      	beq.n	8006cac <_strtod_l+0x7f4>
 8006da8:	b1e5      	cbz	r5, 8006de4 <_strtod_l+0x92c>
 8006daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dac:	421d      	tst	r5, r3
 8006dae:	d0ef      	beq.n	8006d90 <_strtod_l+0x8d8>
 8006db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	9a05      	ldr	r2, [sp, #20]
 8006db8:	b1c3      	cbz	r3, 8006dec <_strtod_l+0x934>
 8006dba:	f7ff fb5b 	bl	8006474 <sulp>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dc6:	f7f9 f9e9 	bl	800019c <__adddf3>
 8006dca:	4680      	mov	r8, r0
 8006dcc:	4689      	mov	r9, r1
 8006dce:	e7df      	b.n	8006d90 <_strtod_l+0x8d8>
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006dd6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006dda:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006dde:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006de2:	e7d5      	b.n	8006d90 <_strtod_l+0x8d8>
 8006de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006de6:	ea13 0f08 	tst.w	r3, r8
 8006dea:	e7e0      	b.n	8006dae <_strtod_l+0x8f6>
 8006dec:	f7ff fb42 	bl	8006474 <sulp>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006df8:	f7f9 f9ce 	bl	8000198 <__aeabi_dsub>
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2300      	movs	r3, #0
 8006e00:	4680      	mov	r8, r0
 8006e02:	4689      	mov	r9, r1
 8006e04:	f7f9 fde8 	bl	80009d8 <__aeabi_dcmpeq>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d0c1      	beq.n	8006d90 <_strtod_l+0x8d8>
 8006e0c:	e608      	b.n	8006a20 <_strtod_l+0x568>
 8006e0e:	4658      	mov	r0, fp
 8006e10:	9904      	ldr	r1, [sp, #16]
 8006e12:	f002 f81d 	bl	8008e50 <__ratio>
 8006e16:	2200      	movs	r2, #0
 8006e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	460f      	mov	r7, r1
 8006e20:	f7f9 fdee 	bl	8000a00 <__aeabi_dcmple>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d070      	beq.n	8006f0a <_strtod_l+0xa52>
 8006e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d042      	beq.n	8006eb4 <_strtod_l+0x9fc>
 8006e2e:	2600      	movs	r6, #0
 8006e30:	4f62      	ldr	r7, [pc, #392]	; (8006fbc <_strtod_l+0xb04>)
 8006e32:	4d62      	ldr	r5, [pc, #392]	; (8006fbc <_strtod_l+0xb04>)
 8006e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e3a:	0d1b      	lsrs	r3, r3, #20
 8006e3c:	051b      	lsls	r3, r3, #20
 8006e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e42:	4b5f      	ldr	r3, [pc, #380]	; (8006fc0 <_strtod_l+0xb08>)
 8006e44:	429a      	cmp	r2, r3
 8006e46:	f040 80c3 	bne.w	8006fd0 <_strtod_l+0xb18>
 8006e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006e52:	4649      	mov	r1, r9
 8006e54:	f001 ff26 	bl	8008ca4 <__ulp>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	4639      	mov	r1, r7
 8006e60:	f7f9 fb52 	bl	8000508 <__aeabi_dmul>
 8006e64:	4642      	mov	r2, r8
 8006e66:	464b      	mov	r3, r9
 8006e68:	f7f9 f998 	bl	800019c <__adddf3>
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4951      	ldr	r1, [pc, #324]	; (8006fb4 <_strtod_l+0xafc>)
 8006e70:	4a54      	ldr	r2, [pc, #336]	; (8006fc4 <_strtod_l+0xb0c>)
 8006e72:	4019      	ands	r1, r3
 8006e74:	4291      	cmp	r1, r2
 8006e76:	4680      	mov	r8, r0
 8006e78:	d95d      	bls.n	8006f36 <_strtod_l+0xa7e>
 8006e7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e7c:	4b4e      	ldr	r3, [pc, #312]	; (8006fb8 <_strtod_l+0xb00>)
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d103      	bne.n	8006e8a <_strtod_l+0x9d2>
 8006e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e84:	3301      	adds	r3, #1
 8006e86:	f43f ad56 	beq.w	8006936 <_strtod_l+0x47e>
 8006e8a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006e8e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006fb8 <_strtod_l+0xb00>
 8006e92:	4650      	mov	r0, sl
 8006e94:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e96:	f001 fbd5 	bl	8008644 <_Bfree>
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	9906      	ldr	r1, [sp, #24]
 8006e9e:	f001 fbd1 	bl	8008644 <_Bfree>
 8006ea2:	4650      	mov	r0, sl
 8006ea4:	9904      	ldr	r1, [sp, #16]
 8006ea6:	f001 fbcd 	bl	8008644 <_Bfree>
 8006eaa:	4659      	mov	r1, fp
 8006eac:	4650      	mov	r0, sl
 8006eae:	f001 fbc9 	bl	8008644 <_Bfree>
 8006eb2:	e627      	b.n	8006b04 <_strtod_l+0x64c>
 8006eb4:	f1b8 0f00 	cmp.w	r8, #0
 8006eb8:	d119      	bne.n	8006eee <_strtod_l+0xa36>
 8006eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ec0:	b9e3      	cbnz	r3, 8006efc <_strtod_l+0xa44>
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	4b3c      	ldr	r3, [pc, #240]	; (8006fbc <_strtod_l+0xb04>)
 8006eca:	f7f9 fd8f 	bl	80009ec <__aeabi_dcmplt>
 8006ece:	b9c8      	cbnz	r0, 8006f04 <_strtod_l+0xa4c>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	4b3c      	ldr	r3, [pc, #240]	; (8006fc8 <_strtod_l+0xb10>)
 8006ed8:	f7f9 fb16 	bl	8000508 <__aeabi_dmul>
 8006edc:	4604      	mov	r4, r0
 8006ede:	460d      	mov	r5, r1
 8006ee0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006ee4:	9416      	str	r4, [sp, #88]	; 0x58
 8006ee6:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ee8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006eec:	e7a2      	b.n	8006e34 <_strtod_l+0x97c>
 8006eee:	f1b8 0f01 	cmp.w	r8, #1
 8006ef2:	d103      	bne.n	8006efc <_strtod_l+0xa44>
 8006ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f43f ad92 	beq.w	8006a20 <_strtod_l+0x568>
 8006efc:	2600      	movs	r6, #0
 8006efe:	2400      	movs	r4, #0
 8006f00:	4f32      	ldr	r7, [pc, #200]	; (8006fcc <_strtod_l+0xb14>)
 8006f02:	e796      	b.n	8006e32 <_strtod_l+0x97a>
 8006f04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006f06:	4d30      	ldr	r5, [pc, #192]	; (8006fc8 <_strtod_l+0xb10>)
 8006f08:	e7ea      	b.n	8006ee0 <_strtod_l+0xa28>
 8006f0a:	4b2f      	ldr	r3, [pc, #188]	; (8006fc8 <_strtod_l+0xb10>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4630      	mov	r0, r6
 8006f10:	4639      	mov	r1, r7
 8006f12:	f7f9 faf9 	bl	8000508 <__aeabi_dmul>
 8006f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f18:	4604      	mov	r4, r0
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	b933      	cbnz	r3, 8006f2c <_strtod_l+0xa74>
 8006f1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f22:	9010      	str	r0, [sp, #64]	; 0x40
 8006f24:	9311      	str	r3, [sp, #68]	; 0x44
 8006f26:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006f2a:	e783      	b.n	8006e34 <_strtod_l+0x97c>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f34:	e7f7      	b.n	8006f26 <_strtod_l+0xa6e>
 8006f36:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006f3a:	9b05      	ldr	r3, [sp, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1a8      	bne.n	8006e92 <_strtod_l+0x9da>
 8006f40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f46:	0d1b      	lsrs	r3, r3, #20
 8006f48:	051b      	lsls	r3, r3, #20
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d1a1      	bne.n	8006e92 <_strtod_l+0x9da>
 8006f4e:	4620      	mov	r0, r4
 8006f50:	4629      	mov	r1, r5
 8006f52:	f7f9 fe39 	bl	8000bc8 <__aeabi_d2lz>
 8006f56:	f7f9 faa9 	bl	80004ac <__aeabi_l2d>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4629      	mov	r1, r5
 8006f62:	f7f9 f919 	bl	8000198 <__aeabi_dsub>
 8006f66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f6c:	ea43 0308 	orr.w	r3, r3, r8
 8006f70:	4313      	orrs	r3, r2
 8006f72:	4604      	mov	r4, r0
 8006f74:	460d      	mov	r5, r1
 8006f76:	d066      	beq.n	8007046 <_strtod_l+0xb8e>
 8006f78:	a309      	add	r3, pc, #36	; (adr r3, 8006fa0 <_strtod_l+0xae8>)
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	f7f9 fd35 	bl	80009ec <__aeabi_dcmplt>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f47f ace2 	bne.w	800694c <_strtod_l+0x494>
 8006f88:	a307      	add	r3, pc, #28	; (adr r3, 8006fa8 <_strtod_l+0xaf0>)
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	4620      	mov	r0, r4
 8006f90:	4629      	mov	r1, r5
 8006f92:	f7f9 fd49 	bl	8000a28 <__aeabi_dcmpgt>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f43f af7b 	beq.w	8006e92 <_strtod_l+0x9da>
 8006f9c:	e4d6      	b.n	800694c <_strtod_l+0x494>
 8006f9e:	bf00      	nop
 8006fa0:	94a03595 	.word	0x94a03595
 8006fa4:	3fdfffff 	.word	0x3fdfffff
 8006fa8:	35afe535 	.word	0x35afe535
 8006fac:	3fe00000 	.word	0x3fe00000
 8006fb0:	000fffff 	.word	0x000fffff
 8006fb4:	7ff00000 	.word	0x7ff00000
 8006fb8:	7fefffff 	.word	0x7fefffff
 8006fbc:	3ff00000 	.word	0x3ff00000
 8006fc0:	7fe00000 	.word	0x7fe00000
 8006fc4:	7c9fffff 	.word	0x7c9fffff
 8006fc8:	3fe00000 	.word	0x3fe00000
 8006fcc:	bff00000 	.word	0xbff00000
 8006fd0:	9b05      	ldr	r3, [sp, #20]
 8006fd2:	b313      	cbz	r3, 800701a <_strtod_l+0xb62>
 8006fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006fda:	d81e      	bhi.n	800701a <_strtod_l+0xb62>
 8006fdc:	a326      	add	r3, pc, #152	; (adr r3, 8007078 <_strtod_l+0xbc0>)
 8006fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	f7f9 fd0b 	bl	8000a00 <__aeabi_dcmple>
 8006fea:	b190      	cbz	r0, 8007012 <_strtod_l+0xb5a>
 8006fec:	4629      	mov	r1, r5
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7f9 fd62 	bl	8000ab8 <__aeabi_d2uiz>
 8006ff4:	2801      	cmp	r0, #1
 8006ff6:	bf38      	it	cc
 8006ff8:	2001      	movcc	r0, #1
 8006ffa:	f7f9 fa0b 	bl	8000414 <__aeabi_ui2d>
 8006ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007000:	4604      	mov	r4, r0
 8007002:	460d      	mov	r5, r1
 8007004:	b9d3      	cbnz	r3, 800703c <_strtod_l+0xb84>
 8007006:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800700a:	9012      	str	r0, [sp, #72]	; 0x48
 800700c:	9313      	str	r3, [sp, #76]	; 0x4c
 800700e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007012:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007014:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007018:	1a9f      	subs	r7, r3, r2
 800701a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800701e:	f001 fe41 	bl	8008ca4 <__ulp>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4630      	mov	r0, r6
 8007028:	4639      	mov	r1, r7
 800702a:	f7f9 fa6d 	bl	8000508 <__aeabi_dmul>
 800702e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007032:	f7f9 f8b3 	bl	800019c <__adddf3>
 8007036:	4680      	mov	r8, r0
 8007038:	4689      	mov	r9, r1
 800703a:	e77e      	b.n	8006f3a <_strtod_l+0xa82>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007044:	e7e3      	b.n	800700e <_strtod_l+0xb56>
 8007046:	a30e      	add	r3, pc, #56	; (adr r3, 8007080 <_strtod_l+0xbc8>)
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f7f9 fcce 	bl	80009ec <__aeabi_dcmplt>
 8007050:	e7a1      	b.n	8006f96 <_strtod_l+0xade>
 8007052:	2300      	movs	r3, #0
 8007054:	930a      	str	r3, [sp, #40]	; 0x28
 8007056:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007058:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	f7ff ba71 	b.w	8006542 <_strtod_l+0x8a>
 8007060:	2a65      	cmp	r2, #101	; 0x65
 8007062:	f43f ab63 	beq.w	800672c <_strtod_l+0x274>
 8007066:	2a45      	cmp	r2, #69	; 0x45
 8007068:	f43f ab60 	beq.w	800672c <_strtod_l+0x274>
 800706c:	2301      	movs	r3, #1
 800706e:	f7ff bb95 	b.w	800679c <_strtod_l+0x2e4>
 8007072:	bf00      	nop
 8007074:	f3af 8000 	nop.w
 8007078:	ffc00000 	.word	0xffc00000
 800707c:	41dfffff 	.word	0x41dfffff
 8007080:	94a03595 	.word	0x94a03595
 8007084:	3fcfffff 	.word	0x3fcfffff

08007088 <_strtod_r>:
 8007088:	4b01      	ldr	r3, [pc, #4]	; (8007090 <_strtod_r+0x8>)
 800708a:	f7ff ba15 	b.w	80064b8 <_strtod_l>
 800708e:	bf00      	nop
 8007090:	20000074 	.word	0x20000074

08007094 <_strtol_l.constprop.0>:
 8007094:	2b01      	cmp	r3, #1
 8007096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800709a:	4680      	mov	r8, r0
 800709c:	d001      	beq.n	80070a2 <_strtol_l.constprop.0+0xe>
 800709e:	2b24      	cmp	r3, #36	; 0x24
 80070a0:	d906      	bls.n	80070b0 <_strtol_l.constprop.0+0x1c>
 80070a2:	f7fe fb23 	bl	80056ec <__errno>
 80070a6:	2316      	movs	r3, #22
 80070a8:	6003      	str	r3, [r0, #0]
 80070aa:	2000      	movs	r0, #0
 80070ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b0:	460d      	mov	r5, r1
 80070b2:	4f35      	ldr	r7, [pc, #212]	; (8007188 <_strtol_l.constprop.0+0xf4>)
 80070b4:	4628      	mov	r0, r5
 80070b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070ba:	5de6      	ldrb	r6, [r4, r7]
 80070bc:	f016 0608 	ands.w	r6, r6, #8
 80070c0:	d1f8      	bne.n	80070b4 <_strtol_l.constprop.0+0x20>
 80070c2:	2c2d      	cmp	r4, #45	; 0x2d
 80070c4:	d12f      	bne.n	8007126 <_strtol_l.constprop.0+0x92>
 80070c6:	2601      	movs	r6, #1
 80070c8:	782c      	ldrb	r4, [r5, #0]
 80070ca:	1c85      	adds	r5, r0, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d057      	beq.n	8007180 <_strtol_l.constprop.0+0xec>
 80070d0:	2b10      	cmp	r3, #16
 80070d2:	d109      	bne.n	80070e8 <_strtol_l.constprop.0+0x54>
 80070d4:	2c30      	cmp	r4, #48	; 0x30
 80070d6:	d107      	bne.n	80070e8 <_strtol_l.constprop.0+0x54>
 80070d8:	7828      	ldrb	r0, [r5, #0]
 80070da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80070de:	2858      	cmp	r0, #88	; 0x58
 80070e0:	d149      	bne.n	8007176 <_strtol_l.constprop.0+0xe2>
 80070e2:	2310      	movs	r3, #16
 80070e4:	786c      	ldrb	r4, [r5, #1]
 80070e6:	3502      	adds	r5, #2
 80070e8:	2700      	movs	r7, #0
 80070ea:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80070ee:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80070f2:	fbbe f9f3 	udiv	r9, lr, r3
 80070f6:	4638      	mov	r0, r7
 80070f8:	fb03 ea19 	mls	sl, r3, r9, lr
 80070fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007100:	f1bc 0f09 	cmp.w	ip, #9
 8007104:	d814      	bhi.n	8007130 <_strtol_l.constprop.0+0x9c>
 8007106:	4664      	mov	r4, ip
 8007108:	42a3      	cmp	r3, r4
 800710a:	dd22      	ble.n	8007152 <_strtol_l.constprop.0+0xbe>
 800710c:	2f00      	cmp	r7, #0
 800710e:	db1d      	blt.n	800714c <_strtol_l.constprop.0+0xb8>
 8007110:	4581      	cmp	r9, r0
 8007112:	d31b      	bcc.n	800714c <_strtol_l.constprop.0+0xb8>
 8007114:	d101      	bne.n	800711a <_strtol_l.constprop.0+0x86>
 8007116:	45a2      	cmp	sl, r4
 8007118:	db18      	blt.n	800714c <_strtol_l.constprop.0+0xb8>
 800711a:	2701      	movs	r7, #1
 800711c:	fb00 4003 	mla	r0, r0, r3, r4
 8007120:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007124:	e7ea      	b.n	80070fc <_strtol_l.constprop.0+0x68>
 8007126:	2c2b      	cmp	r4, #43	; 0x2b
 8007128:	bf04      	itt	eq
 800712a:	782c      	ldrbeq	r4, [r5, #0]
 800712c:	1c85      	addeq	r5, r0, #2
 800712e:	e7cd      	b.n	80070cc <_strtol_l.constprop.0+0x38>
 8007130:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007134:	f1bc 0f19 	cmp.w	ip, #25
 8007138:	d801      	bhi.n	800713e <_strtol_l.constprop.0+0xaa>
 800713a:	3c37      	subs	r4, #55	; 0x37
 800713c:	e7e4      	b.n	8007108 <_strtol_l.constprop.0+0x74>
 800713e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007142:	f1bc 0f19 	cmp.w	ip, #25
 8007146:	d804      	bhi.n	8007152 <_strtol_l.constprop.0+0xbe>
 8007148:	3c57      	subs	r4, #87	; 0x57
 800714a:	e7dd      	b.n	8007108 <_strtol_l.constprop.0+0x74>
 800714c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007150:	e7e6      	b.n	8007120 <_strtol_l.constprop.0+0x8c>
 8007152:	2f00      	cmp	r7, #0
 8007154:	da07      	bge.n	8007166 <_strtol_l.constprop.0+0xd2>
 8007156:	2322      	movs	r3, #34	; 0x22
 8007158:	4670      	mov	r0, lr
 800715a:	f8c8 3000 	str.w	r3, [r8]
 800715e:	2a00      	cmp	r2, #0
 8007160:	d0a4      	beq.n	80070ac <_strtol_l.constprop.0+0x18>
 8007162:	1e69      	subs	r1, r5, #1
 8007164:	e005      	b.n	8007172 <_strtol_l.constprop.0+0xde>
 8007166:	b106      	cbz	r6, 800716a <_strtol_l.constprop.0+0xd6>
 8007168:	4240      	negs	r0, r0
 800716a:	2a00      	cmp	r2, #0
 800716c:	d09e      	beq.n	80070ac <_strtol_l.constprop.0+0x18>
 800716e:	2f00      	cmp	r7, #0
 8007170:	d1f7      	bne.n	8007162 <_strtol_l.constprop.0+0xce>
 8007172:	6011      	str	r1, [r2, #0]
 8007174:	e79a      	b.n	80070ac <_strtol_l.constprop.0+0x18>
 8007176:	2430      	movs	r4, #48	; 0x30
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1b5      	bne.n	80070e8 <_strtol_l.constprop.0+0x54>
 800717c:	2308      	movs	r3, #8
 800717e:	e7b3      	b.n	80070e8 <_strtol_l.constprop.0+0x54>
 8007180:	2c30      	cmp	r4, #48	; 0x30
 8007182:	d0a9      	beq.n	80070d8 <_strtol_l.constprop.0+0x44>
 8007184:	230a      	movs	r3, #10
 8007186:	e7af      	b.n	80070e8 <_strtol_l.constprop.0+0x54>
 8007188:	0800a159 	.word	0x0800a159

0800718c <_strtol_r>:
 800718c:	f7ff bf82 	b.w	8007094 <_strtol_l.constprop.0>

08007190 <quorem>:
 8007190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	6903      	ldr	r3, [r0, #16]
 8007196:	690c      	ldr	r4, [r1, #16]
 8007198:	4607      	mov	r7, r0
 800719a:	42a3      	cmp	r3, r4
 800719c:	f2c0 8082 	blt.w	80072a4 <quorem+0x114>
 80071a0:	3c01      	subs	r4, #1
 80071a2:	f100 0514 	add.w	r5, r0, #20
 80071a6:	f101 0814 	add.w	r8, r1, #20
 80071aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071b8:	3301      	adds	r3, #1
 80071ba:	429a      	cmp	r2, r3
 80071bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80071c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80071c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071c8:	d331      	bcc.n	800722e <quorem+0x9e>
 80071ca:	f04f 0e00 	mov.w	lr, #0
 80071ce:	4640      	mov	r0, r8
 80071d0:	46ac      	mov	ip, r5
 80071d2:	46f2      	mov	sl, lr
 80071d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80071d8:	b293      	uxth	r3, r2
 80071da:	fb06 e303 	mla	r3, r6, r3, lr
 80071de:	0c12      	lsrs	r2, r2, #16
 80071e0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	fb06 e202 	mla	r2, r6, r2, lr
 80071ea:	ebaa 0303 	sub.w	r3, sl, r3
 80071ee:	f8dc a000 	ldr.w	sl, [ip]
 80071f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071f6:	fa1f fa8a 	uxth.w	sl, sl
 80071fa:	4453      	add	r3, sl
 80071fc:	f8dc a000 	ldr.w	sl, [ip]
 8007200:	b292      	uxth	r2, r2
 8007202:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007206:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800720a:	b29b      	uxth	r3, r3
 800720c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007210:	4581      	cmp	r9, r0
 8007212:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007216:	f84c 3b04 	str.w	r3, [ip], #4
 800721a:	d2db      	bcs.n	80071d4 <quorem+0x44>
 800721c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007220:	b92b      	cbnz	r3, 800722e <quorem+0x9e>
 8007222:	9b01      	ldr	r3, [sp, #4]
 8007224:	3b04      	subs	r3, #4
 8007226:	429d      	cmp	r5, r3
 8007228:	461a      	mov	r2, r3
 800722a:	d32f      	bcc.n	800728c <quorem+0xfc>
 800722c:	613c      	str	r4, [r7, #16]
 800722e:	4638      	mov	r0, r7
 8007230:	f001 fc90 	bl	8008b54 <__mcmp>
 8007234:	2800      	cmp	r0, #0
 8007236:	db25      	blt.n	8007284 <quorem+0xf4>
 8007238:	4628      	mov	r0, r5
 800723a:	f04f 0c00 	mov.w	ip, #0
 800723e:	3601      	adds	r6, #1
 8007240:	f858 1b04 	ldr.w	r1, [r8], #4
 8007244:	f8d0 e000 	ldr.w	lr, [r0]
 8007248:	b28b      	uxth	r3, r1
 800724a:	ebac 0303 	sub.w	r3, ip, r3
 800724e:	fa1f f28e 	uxth.w	r2, lr
 8007252:	4413      	add	r3, r2
 8007254:	0c0a      	lsrs	r2, r1, #16
 8007256:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800725a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800725e:	b29b      	uxth	r3, r3
 8007260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007264:	45c1      	cmp	r9, r8
 8007266:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800726a:	f840 3b04 	str.w	r3, [r0], #4
 800726e:	d2e7      	bcs.n	8007240 <quorem+0xb0>
 8007270:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007274:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007278:	b922      	cbnz	r2, 8007284 <quorem+0xf4>
 800727a:	3b04      	subs	r3, #4
 800727c:	429d      	cmp	r5, r3
 800727e:	461a      	mov	r2, r3
 8007280:	d30a      	bcc.n	8007298 <quorem+0x108>
 8007282:	613c      	str	r4, [r7, #16]
 8007284:	4630      	mov	r0, r6
 8007286:	b003      	add	sp, #12
 8007288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728c:	6812      	ldr	r2, [r2, #0]
 800728e:	3b04      	subs	r3, #4
 8007290:	2a00      	cmp	r2, #0
 8007292:	d1cb      	bne.n	800722c <quorem+0x9c>
 8007294:	3c01      	subs	r4, #1
 8007296:	e7c6      	b.n	8007226 <quorem+0x96>
 8007298:	6812      	ldr	r2, [r2, #0]
 800729a:	3b04      	subs	r3, #4
 800729c:	2a00      	cmp	r2, #0
 800729e:	d1f0      	bne.n	8007282 <quorem+0xf2>
 80072a0:	3c01      	subs	r4, #1
 80072a2:	e7eb      	b.n	800727c <quorem+0xec>
 80072a4:	2000      	movs	r0, #0
 80072a6:	e7ee      	b.n	8007286 <quorem+0xf6>

080072a8 <_dtoa_r>:
 80072a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	4616      	mov	r6, r2
 80072ae:	461f      	mov	r7, r3
 80072b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80072b2:	b099      	sub	sp, #100	; 0x64
 80072b4:	4605      	mov	r5, r0
 80072b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80072ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80072be:	b974      	cbnz	r4, 80072de <_dtoa_r+0x36>
 80072c0:	2010      	movs	r0, #16
 80072c2:	f001 f949 	bl	8008558 <malloc>
 80072c6:	4602      	mov	r2, r0
 80072c8:	6268      	str	r0, [r5, #36]	; 0x24
 80072ca:	b920      	cbnz	r0, 80072d6 <_dtoa_r+0x2e>
 80072cc:	21ea      	movs	r1, #234	; 0xea
 80072ce:	4ba8      	ldr	r3, [pc, #672]	; (8007570 <_dtoa_r+0x2c8>)
 80072d0:	48a8      	ldr	r0, [pc, #672]	; (8007574 <_dtoa_r+0x2cc>)
 80072d2:	f002 f8b3 	bl	800943c <__assert_func>
 80072d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072da:	6004      	str	r4, [r0, #0]
 80072dc:	60c4      	str	r4, [r0, #12]
 80072de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072e0:	6819      	ldr	r1, [r3, #0]
 80072e2:	b151      	cbz	r1, 80072fa <_dtoa_r+0x52>
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	2301      	movs	r3, #1
 80072e8:	4093      	lsls	r3, r2
 80072ea:	604a      	str	r2, [r1, #4]
 80072ec:	608b      	str	r3, [r1, #8]
 80072ee:	4628      	mov	r0, r5
 80072f0:	f001 f9a8 	bl	8008644 <_Bfree>
 80072f4:	2200      	movs	r2, #0
 80072f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	1e3b      	subs	r3, r7, #0
 80072fc:	bfaf      	iteee	ge
 80072fe:	2300      	movge	r3, #0
 8007300:	2201      	movlt	r2, #1
 8007302:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007306:	9305      	strlt	r3, [sp, #20]
 8007308:	bfa8      	it	ge
 800730a:	f8c8 3000 	strge.w	r3, [r8]
 800730e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007312:	4b99      	ldr	r3, [pc, #612]	; (8007578 <_dtoa_r+0x2d0>)
 8007314:	bfb8      	it	lt
 8007316:	f8c8 2000 	strlt.w	r2, [r8]
 800731a:	ea33 0309 	bics.w	r3, r3, r9
 800731e:	d119      	bne.n	8007354 <_dtoa_r+0xac>
 8007320:	f242 730f 	movw	r3, #9999	; 0x270f
 8007324:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800732c:	4333      	orrs	r3, r6
 800732e:	f000 857f 	beq.w	8007e30 <_dtoa_r+0xb88>
 8007332:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007334:	b953      	cbnz	r3, 800734c <_dtoa_r+0xa4>
 8007336:	4b91      	ldr	r3, [pc, #580]	; (800757c <_dtoa_r+0x2d4>)
 8007338:	e022      	b.n	8007380 <_dtoa_r+0xd8>
 800733a:	4b91      	ldr	r3, [pc, #580]	; (8007580 <_dtoa_r+0x2d8>)
 800733c:	9303      	str	r3, [sp, #12]
 800733e:	3308      	adds	r3, #8
 8007340:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	9803      	ldr	r0, [sp, #12]
 8007346:	b019      	add	sp, #100	; 0x64
 8007348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734c:	4b8b      	ldr	r3, [pc, #556]	; (800757c <_dtoa_r+0x2d4>)
 800734e:	9303      	str	r3, [sp, #12]
 8007350:	3303      	adds	r3, #3
 8007352:	e7f5      	b.n	8007340 <_dtoa_r+0x98>
 8007354:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007358:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800735c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007360:	2200      	movs	r2, #0
 8007362:	2300      	movs	r3, #0
 8007364:	f7f9 fb38 	bl	80009d8 <__aeabi_dcmpeq>
 8007368:	4680      	mov	r8, r0
 800736a:	b158      	cbz	r0, 8007384 <_dtoa_r+0xdc>
 800736c:	2301      	movs	r3, #1
 800736e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8558 	beq.w	8007e2a <_dtoa_r+0xb82>
 800737a:	4882      	ldr	r0, [pc, #520]	; (8007584 <_dtoa_r+0x2dc>)
 800737c:	6018      	str	r0, [r3, #0]
 800737e:	1e43      	subs	r3, r0, #1
 8007380:	9303      	str	r3, [sp, #12]
 8007382:	e7df      	b.n	8007344 <_dtoa_r+0x9c>
 8007384:	ab16      	add	r3, sp, #88	; 0x58
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	ab17      	add	r3, sp, #92	; 0x5c
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	4628      	mov	r0, r5
 800738e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007392:	f001 fd01 	bl	8008d98 <__d2b>
 8007396:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800739a:	4683      	mov	fp, r0
 800739c:	2c00      	cmp	r4, #0
 800739e:	d07f      	beq.n	80074a0 <_dtoa_r+0x1f8>
 80073a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80073aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80073b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80073b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80073ba:	2200      	movs	r2, #0
 80073bc:	4b72      	ldr	r3, [pc, #456]	; (8007588 <_dtoa_r+0x2e0>)
 80073be:	f7f8 feeb 	bl	8000198 <__aeabi_dsub>
 80073c2:	a365      	add	r3, pc, #404	; (adr r3, 8007558 <_dtoa_r+0x2b0>)
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f7f9 f89e 	bl	8000508 <__aeabi_dmul>
 80073cc:	a364      	add	r3, pc, #400	; (adr r3, 8007560 <_dtoa_r+0x2b8>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f7f8 fee3 	bl	800019c <__adddf3>
 80073d6:	4606      	mov	r6, r0
 80073d8:	4620      	mov	r0, r4
 80073da:	460f      	mov	r7, r1
 80073dc:	f7f9 f82a 	bl	8000434 <__aeabi_i2d>
 80073e0:	a361      	add	r3, pc, #388	; (adr r3, 8007568 <_dtoa_r+0x2c0>)
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	f7f9 f88f 	bl	8000508 <__aeabi_dmul>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4630      	mov	r0, r6
 80073f0:	4639      	mov	r1, r7
 80073f2:	f7f8 fed3 	bl	800019c <__adddf3>
 80073f6:	4606      	mov	r6, r0
 80073f8:	460f      	mov	r7, r1
 80073fa:	f7f9 fb35 	bl	8000a68 <__aeabi_d2iz>
 80073fe:	2200      	movs	r2, #0
 8007400:	4682      	mov	sl, r0
 8007402:	2300      	movs	r3, #0
 8007404:	4630      	mov	r0, r6
 8007406:	4639      	mov	r1, r7
 8007408:	f7f9 faf0 	bl	80009ec <__aeabi_dcmplt>
 800740c:	b148      	cbz	r0, 8007422 <_dtoa_r+0x17a>
 800740e:	4650      	mov	r0, sl
 8007410:	f7f9 f810 	bl	8000434 <__aeabi_i2d>
 8007414:	4632      	mov	r2, r6
 8007416:	463b      	mov	r3, r7
 8007418:	f7f9 fade 	bl	80009d8 <__aeabi_dcmpeq>
 800741c:	b908      	cbnz	r0, 8007422 <_dtoa_r+0x17a>
 800741e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007422:	f1ba 0f16 	cmp.w	sl, #22
 8007426:	d858      	bhi.n	80074da <_dtoa_r+0x232>
 8007428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800742c:	4b57      	ldr	r3, [pc, #348]	; (800758c <_dtoa_r+0x2e4>)
 800742e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007436:	f7f9 fad9 	bl	80009ec <__aeabi_dcmplt>
 800743a:	2800      	cmp	r0, #0
 800743c:	d04f      	beq.n	80074de <_dtoa_r+0x236>
 800743e:	2300      	movs	r3, #0
 8007440:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007444:	930f      	str	r3, [sp, #60]	; 0x3c
 8007446:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007448:	1b1c      	subs	r4, r3, r4
 800744a:	1e63      	subs	r3, r4, #1
 800744c:	9309      	str	r3, [sp, #36]	; 0x24
 800744e:	bf49      	itett	mi
 8007450:	f1c4 0301 	rsbmi	r3, r4, #1
 8007454:	2300      	movpl	r3, #0
 8007456:	9306      	strmi	r3, [sp, #24]
 8007458:	2300      	movmi	r3, #0
 800745a:	bf54      	ite	pl
 800745c:	9306      	strpl	r3, [sp, #24]
 800745e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007460:	f1ba 0f00 	cmp.w	sl, #0
 8007464:	db3d      	blt.n	80074e2 <_dtoa_r+0x23a>
 8007466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007468:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800746c:	4453      	add	r3, sl
 800746e:	9309      	str	r3, [sp, #36]	; 0x24
 8007470:	2300      	movs	r3, #0
 8007472:	930a      	str	r3, [sp, #40]	; 0x28
 8007474:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007476:	2b09      	cmp	r3, #9
 8007478:	f200 808c 	bhi.w	8007594 <_dtoa_r+0x2ec>
 800747c:	2b05      	cmp	r3, #5
 800747e:	bfc4      	itt	gt
 8007480:	3b04      	subgt	r3, #4
 8007482:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007484:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007486:	bfc8      	it	gt
 8007488:	2400      	movgt	r4, #0
 800748a:	f1a3 0302 	sub.w	r3, r3, #2
 800748e:	bfd8      	it	le
 8007490:	2401      	movle	r4, #1
 8007492:	2b03      	cmp	r3, #3
 8007494:	f200 808a 	bhi.w	80075ac <_dtoa_r+0x304>
 8007498:	e8df f003 	tbb	[pc, r3]
 800749c:	5b4d4f2d 	.word	0x5b4d4f2d
 80074a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80074a4:	441c      	add	r4, r3
 80074a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	bfc3      	ittte	gt
 80074ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80074b2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80074b6:	fa09 f303 	lslgt.w	r3, r9, r3
 80074ba:	f1c3 0320 	rsble	r3, r3, #32
 80074be:	bfc6      	itte	gt
 80074c0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80074c4:	4318      	orrgt	r0, r3
 80074c6:	fa06 f003 	lslle.w	r0, r6, r3
 80074ca:	f7f8 ffa3 	bl	8000414 <__aeabi_ui2d>
 80074ce:	2301      	movs	r3, #1
 80074d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80074d4:	3c01      	subs	r4, #1
 80074d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80074d8:	e76f      	b.n	80073ba <_dtoa_r+0x112>
 80074da:	2301      	movs	r3, #1
 80074dc:	e7b2      	b.n	8007444 <_dtoa_r+0x19c>
 80074de:	900f      	str	r0, [sp, #60]	; 0x3c
 80074e0:	e7b1      	b.n	8007446 <_dtoa_r+0x19e>
 80074e2:	9b06      	ldr	r3, [sp, #24]
 80074e4:	eba3 030a 	sub.w	r3, r3, sl
 80074e8:	9306      	str	r3, [sp, #24]
 80074ea:	f1ca 0300 	rsb	r3, sl, #0
 80074ee:	930a      	str	r3, [sp, #40]	; 0x28
 80074f0:	2300      	movs	r3, #0
 80074f2:	930e      	str	r3, [sp, #56]	; 0x38
 80074f4:	e7be      	b.n	8007474 <_dtoa_r+0x1cc>
 80074f6:	2300      	movs	r3, #0
 80074f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	dc58      	bgt.n	80075b2 <_dtoa_r+0x30a>
 8007500:	f04f 0901 	mov.w	r9, #1
 8007504:	464b      	mov	r3, r9
 8007506:	f8cd 9020 	str.w	r9, [sp, #32]
 800750a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800750e:	2200      	movs	r2, #0
 8007510:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007512:	6042      	str	r2, [r0, #4]
 8007514:	2204      	movs	r2, #4
 8007516:	f102 0614 	add.w	r6, r2, #20
 800751a:	429e      	cmp	r6, r3
 800751c:	6841      	ldr	r1, [r0, #4]
 800751e:	d94e      	bls.n	80075be <_dtoa_r+0x316>
 8007520:	4628      	mov	r0, r5
 8007522:	f001 f84f 	bl	80085c4 <_Balloc>
 8007526:	9003      	str	r0, [sp, #12]
 8007528:	2800      	cmp	r0, #0
 800752a:	d14c      	bne.n	80075c6 <_dtoa_r+0x31e>
 800752c:	4602      	mov	r2, r0
 800752e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007532:	4b17      	ldr	r3, [pc, #92]	; (8007590 <_dtoa_r+0x2e8>)
 8007534:	e6cc      	b.n	80072d0 <_dtoa_r+0x28>
 8007536:	2301      	movs	r3, #1
 8007538:	e7de      	b.n	80074f8 <_dtoa_r+0x250>
 800753a:	2300      	movs	r3, #0
 800753c:	930b      	str	r3, [sp, #44]	; 0x2c
 800753e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007540:	eb0a 0903 	add.w	r9, sl, r3
 8007544:	f109 0301 	add.w	r3, r9, #1
 8007548:	2b01      	cmp	r3, #1
 800754a:	9308      	str	r3, [sp, #32]
 800754c:	bfb8      	it	lt
 800754e:	2301      	movlt	r3, #1
 8007550:	e7dd      	b.n	800750e <_dtoa_r+0x266>
 8007552:	2301      	movs	r3, #1
 8007554:	e7f2      	b.n	800753c <_dtoa_r+0x294>
 8007556:	bf00      	nop
 8007558:	636f4361 	.word	0x636f4361
 800755c:	3fd287a7 	.word	0x3fd287a7
 8007560:	8b60c8b3 	.word	0x8b60c8b3
 8007564:	3fc68a28 	.word	0x3fc68a28
 8007568:	509f79fb 	.word	0x509f79fb
 800756c:	3fd34413 	.word	0x3fd34413
 8007570:	0800a266 	.word	0x0800a266
 8007574:	0800a27d 	.word	0x0800a27d
 8007578:	7ff00000 	.word	0x7ff00000
 800757c:	0800a262 	.word	0x0800a262
 8007580:	0800a259 	.word	0x0800a259
 8007584:	0800a0dd 	.word	0x0800a0dd
 8007588:	3ff80000 	.word	0x3ff80000
 800758c:	0800a3e8 	.word	0x0800a3e8
 8007590:	0800a2d8 	.word	0x0800a2d8
 8007594:	2401      	movs	r4, #1
 8007596:	2300      	movs	r3, #0
 8007598:	940b      	str	r4, [sp, #44]	; 0x2c
 800759a:	9322      	str	r3, [sp, #136]	; 0x88
 800759c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80075a0:	2200      	movs	r2, #0
 80075a2:	2312      	movs	r3, #18
 80075a4:	f8cd 9020 	str.w	r9, [sp, #32]
 80075a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80075aa:	e7b0      	b.n	800750e <_dtoa_r+0x266>
 80075ac:	2301      	movs	r3, #1
 80075ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80075b0:	e7f4      	b.n	800759c <_dtoa_r+0x2f4>
 80075b2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80075b6:	464b      	mov	r3, r9
 80075b8:	f8cd 9020 	str.w	r9, [sp, #32]
 80075bc:	e7a7      	b.n	800750e <_dtoa_r+0x266>
 80075be:	3101      	adds	r1, #1
 80075c0:	6041      	str	r1, [r0, #4]
 80075c2:	0052      	lsls	r2, r2, #1
 80075c4:	e7a7      	b.n	8007516 <_dtoa_r+0x26e>
 80075c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075c8:	9a03      	ldr	r2, [sp, #12]
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	9b08      	ldr	r3, [sp, #32]
 80075ce:	2b0e      	cmp	r3, #14
 80075d0:	f200 80a8 	bhi.w	8007724 <_dtoa_r+0x47c>
 80075d4:	2c00      	cmp	r4, #0
 80075d6:	f000 80a5 	beq.w	8007724 <_dtoa_r+0x47c>
 80075da:	f1ba 0f00 	cmp.w	sl, #0
 80075de:	dd34      	ble.n	800764a <_dtoa_r+0x3a2>
 80075e0:	4a9a      	ldr	r2, [pc, #616]	; (800784c <_dtoa_r+0x5a4>)
 80075e2:	f00a 030f 	and.w	r3, sl, #15
 80075e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80075ea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80075ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80075f6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80075fa:	d016      	beq.n	800762a <_dtoa_r+0x382>
 80075fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007600:	4b93      	ldr	r3, [pc, #588]	; (8007850 <_dtoa_r+0x5a8>)
 8007602:	2703      	movs	r7, #3
 8007604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007608:	f7f9 f8a8 	bl	800075c <__aeabi_ddiv>
 800760c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007610:	f004 040f 	and.w	r4, r4, #15
 8007614:	4e8e      	ldr	r6, [pc, #568]	; (8007850 <_dtoa_r+0x5a8>)
 8007616:	b954      	cbnz	r4, 800762e <_dtoa_r+0x386>
 8007618:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800761c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007620:	f7f9 f89c 	bl	800075c <__aeabi_ddiv>
 8007624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007628:	e029      	b.n	800767e <_dtoa_r+0x3d6>
 800762a:	2702      	movs	r7, #2
 800762c:	e7f2      	b.n	8007614 <_dtoa_r+0x36c>
 800762e:	07e1      	lsls	r1, r4, #31
 8007630:	d508      	bpl.n	8007644 <_dtoa_r+0x39c>
 8007632:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007636:	e9d6 2300 	ldrd	r2, r3, [r6]
 800763a:	f7f8 ff65 	bl	8000508 <__aeabi_dmul>
 800763e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007642:	3701      	adds	r7, #1
 8007644:	1064      	asrs	r4, r4, #1
 8007646:	3608      	adds	r6, #8
 8007648:	e7e5      	b.n	8007616 <_dtoa_r+0x36e>
 800764a:	f000 80a5 	beq.w	8007798 <_dtoa_r+0x4f0>
 800764e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007652:	f1ca 0400 	rsb	r4, sl, #0
 8007656:	4b7d      	ldr	r3, [pc, #500]	; (800784c <_dtoa_r+0x5a4>)
 8007658:	f004 020f 	and.w	r2, r4, #15
 800765c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007664:	f7f8 ff50 	bl	8000508 <__aeabi_dmul>
 8007668:	2702      	movs	r7, #2
 800766a:	2300      	movs	r3, #0
 800766c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007670:	4e77      	ldr	r6, [pc, #476]	; (8007850 <_dtoa_r+0x5a8>)
 8007672:	1124      	asrs	r4, r4, #4
 8007674:	2c00      	cmp	r4, #0
 8007676:	f040 8084 	bne.w	8007782 <_dtoa_r+0x4da>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1d2      	bne.n	8007624 <_dtoa_r+0x37c>
 800767e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 808b 	beq.w	800779c <_dtoa_r+0x4f4>
 8007686:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800768a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800768e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007692:	2200      	movs	r2, #0
 8007694:	4b6f      	ldr	r3, [pc, #444]	; (8007854 <_dtoa_r+0x5ac>)
 8007696:	f7f9 f9a9 	bl	80009ec <__aeabi_dcmplt>
 800769a:	2800      	cmp	r0, #0
 800769c:	d07e      	beq.n	800779c <_dtoa_r+0x4f4>
 800769e:	9b08      	ldr	r3, [sp, #32]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d07b      	beq.n	800779c <_dtoa_r+0x4f4>
 80076a4:	f1b9 0f00 	cmp.w	r9, #0
 80076a8:	dd38      	ble.n	800771c <_dtoa_r+0x474>
 80076aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076ae:	2200      	movs	r2, #0
 80076b0:	4b69      	ldr	r3, [pc, #420]	; (8007858 <_dtoa_r+0x5b0>)
 80076b2:	f7f8 ff29 	bl	8000508 <__aeabi_dmul>
 80076b6:	464c      	mov	r4, r9
 80076b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076bc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80076c0:	3701      	adds	r7, #1
 80076c2:	4638      	mov	r0, r7
 80076c4:	f7f8 feb6 	bl	8000434 <__aeabi_i2d>
 80076c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076cc:	f7f8 ff1c 	bl	8000508 <__aeabi_dmul>
 80076d0:	2200      	movs	r2, #0
 80076d2:	4b62      	ldr	r3, [pc, #392]	; (800785c <_dtoa_r+0x5b4>)
 80076d4:	f7f8 fd62 	bl	800019c <__adddf3>
 80076d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80076dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076e0:	9611      	str	r6, [sp, #68]	; 0x44
 80076e2:	2c00      	cmp	r4, #0
 80076e4:	d15d      	bne.n	80077a2 <_dtoa_r+0x4fa>
 80076e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ea:	2200      	movs	r2, #0
 80076ec:	4b5c      	ldr	r3, [pc, #368]	; (8007860 <_dtoa_r+0x5b8>)
 80076ee:	f7f8 fd53 	bl	8000198 <__aeabi_dsub>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076fa:	4633      	mov	r3, r6
 80076fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076fe:	f7f9 f993 	bl	8000a28 <__aeabi_dcmpgt>
 8007702:	2800      	cmp	r0, #0
 8007704:	f040 829c 	bne.w	8007c40 <_dtoa_r+0x998>
 8007708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800770c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800770e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007712:	f7f9 f96b 	bl	80009ec <__aeabi_dcmplt>
 8007716:	2800      	cmp	r0, #0
 8007718:	f040 8290 	bne.w	8007c3c <_dtoa_r+0x994>
 800771c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007720:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007726:	2b00      	cmp	r3, #0
 8007728:	f2c0 8152 	blt.w	80079d0 <_dtoa_r+0x728>
 800772c:	f1ba 0f0e 	cmp.w	sl, #14
 8007730:	f300 814e 	bgt.w	80079d0 <_dtoa_r+0x728>
 8007734:	4b45      	ldr	r3, [pc, #276]	; (800784c <_dtoa_r+0x5a4>)
 8007736:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800773a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800773e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007742:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007744:	2b00      	cmp	r3, #0
 8007746:	f280 80db 	bge.w	8007900 <_dtoa_r+0x658>
 800774a:	9b08      	ldr	r3, [sp, #32]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f300 80d7 	bgt.w	8007900 <_dtoa_r+0x658>
 8007752:	f040 8272 	bne.w	8007c3a <_dtoa_r+0x992>
 8007756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800775a:	2200      	movs	r2, #0
 800775c:	4b40      	ldr	r3, [pc, #256]	; (8007860 <_dtoa_r+0x5b8>)
 800775e:	f7f8 fed3 	bl	8000508 <__aeabi_dmul>
 8007762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007766:	f7f9 f955 	bl	8000a14 <__aeabi_dcmpge>
 800776a:	9c08      	ldr	r4, [sp, #32]
 800776c:	4626      	mov	r6, r4
 800776e:	2800      	cmp	r0, #0
 8007770:	f040 8248 	bne.w	8007c04 <_dtoa_r+0x95c>
 8007774:	2331      	movs	r3, #49	; 0x31
 8007776:	9f03      	ldr	r7, [sp, #12]
 8007778:	f10a 0a01 	add.w	sl, sl, #1
 800777c:	f807 3b01 	strb.w	r3, [r7], #1
 8007780:	e244      	b.n	8007c0c <_dtoa_r+0x964>
 8007782:	07e2      	lsls	r2, r4, #31
 8007784:	d505      	bpl.n	8007792 <_dtoa_r+0x4ea>
 8007786:	e9d6 2300 	ldrd	r2, r3, [r6]
 800778a:	f7f8 febd 	bl	8000508 <__aeabi_dmul>
 800778e:	2301      	movs	r3, #1
 8007790:	3701      	adds	r7, #1
 8007792:	1064      	asrs	r4, r4, #1
 8007794:	3608      	adds	r6, #8
 8007796:	e76d      	b.n	8007674 <_dtoa_r+0x3cc>
 8007798:	2702      	movs	r7, #2
 800779a:	e770      	b.n	800767e <_dtoa_r+0x3d6>
 800779c:	46d0      	mov	r8, sl
 800779e:	9c08      	ldr	r4, [sp, #32]
 80077a0:	e78f      	b.n	80076c2 <_dtoa_r+0x41a>
 80077a2:	9903      	ldr	r1, [sp, #12]
 80077a4:	4b29      	ldr	r3, [pc, #164]	; (800784c <_dtoa_r+0x5a4>)
 80077a6:	4421      	add	r1, r4
 80077a8:	9112      	str	r1, [sp, #72]	; 0x48
 80077aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80077b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077b8:	2900      	cmp	r1, #0
 80077ba:	d055      	beq.n	8007868 <_dtoa_r+0x5c0>
 80077bc:	2000      	movs	r0, #0
 80077be:	4929      	ldr	r1, [pc, #164]	; (8007864 <_dtoa_r+0x5bc>)
 80077c0:	f7f8 ffcc 	bl	800075c <__aeabi_ddiv>
 80077c4:	463b      	mov	r3, r7
 80077c6:	4632      	mov	r2, r6
 80077c8:	f7f8 fce6 	bl	8000198 <__aeabi_dsub>
 80077cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077d0:	9f03      	ldr	r7, [sp, #12]
 80077d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077d6:	f7f9 f947 	bl	8000a68 <__aeabi_d2iz>
 80077da:	4604      	mov	r4, r0
 80077dc:	f7f8 fe2a 	bl	8000434 <__aeabi_i2d>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077e8:	f7f8 fcd6 	bl	8000198 <__aeabi_dsub>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	3430      	adds	r4, #48	; 0x30
 80077f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077fa:	f807 4b01 	strb.w	r4, [r7], #1
 80077fe:	f7f9 f8f5 	bl	80009ec <__aeabi_dcmplt>
 8007802:	2800      	cmp	r0, #0
 8007804:	d174      	bne.n	80078f0 <_dtoa_r+0x648>
 8007806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800780a:	2000      	movs	r0, #0
 800780c:	4911      	ldr	r1, [pc, #68]	; (8007854 <_dtoa_r+0x5ac>)
 800780e:	f7f8 fcc3 	bl	8000198 <__aeabi_dsub>
 8007812:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007816:	f7f9 f8e9 	bl	80009ec <__aeabi_dcmplt>
 800781a:	2800      	cmp	r0, #0
 800781c:	f040 80b7 	bne.w	800798e <_dtoa_r+0x6e6>
 8007820:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007822:	429f      	cmp	r7, r3
 8007824:	f43f af7a 	beq.w	800771c <_dtoa_r+0x474>
 8007828:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800782c:	2200      	movs	r2, #0
 800782e:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <_dtoa_r+0x5b0>)
 8007830:	f7f8 fe6a 	bl	8000508 <__aeabi_dmul>
 8007834:	2200      	movs	r2, #0
 8007836:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800783a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800783e:	4b06      	ldr	r3, [pc, #24]	; (8007858 <_dtoa_r+0x5b0>)
 8007840:	f7f8 fe62 	bl	8000508 <__aeabi_dmul>
 8007844:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007848:	e7c3      	b.n	80077d2 <_dtoa_r+0x52a>
 800784a:	bf00      	nop
 800784c:	0800a3e8 	.word	0x0800a3e8
 8007850:	0800a3c0 	.word	0x0800a3c0
 8007854:	3ff00000 	.word	0x3ff00000
 8007858:	40240000 	.word	0x40240000
 800785c:	401c0000 	.word	0x401c0000
 8007860:	40140000 	.word	0x40140000
 8007864:	3fe00000 	.word	0x3fe00000
 8007868:	4630      	mov	r0, r6
 800786a:	4639      	mov	r1, r7
 800786c:	f7f8 fe4c 	bl	8000508 <__aeabi_dmul>
 8007870:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007872:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007876:	9c03      	ldr	r4, [sp, #12]
 8007878:	9314      	str	r3, [sp, #80]	; 0x50
 800787a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800787e:	f7f9 f8f3 	bl	8000a68 <__aeabi_d2iz>
 8007882:	9015      	str	r0, [sp, #84]	; 0x54
 8007884:	f7f8 fdd6 	bl	8000434 <__aeabi_i2d>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007890:	f7f8 fc82 	bl	8000198 <__aeabi_dsub>
 8007894:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007896:	4606      	mov	r6, r0
 8007898:	3330      	adds	r3, #48	; 0x30
 800789a:	f804 3b01 	strb.w	r3, [r4], #1
 800789e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078a0:	460f      	mov	r7, r1
 80078a2:	429c      	cmp	r4, r3
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	d124      	bne.n	80078f4 <_dtoa_r+0x64c>
 80078aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078ae:	4bb0      	ldr	r3, [pc, #704]	; (8007b70 <_dtoa_r+0x8c8>)
 80078b0:	f7f8 fc74 	bl	800019c <__adddf3>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4630      	mov	r0, r6
 80078ba:	4639      	mov	r1, r7
 80078bc:	f7f9 f8b4 	bl	8000a28 <__aeabi_dcmpgt>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d163      	bne.n	800798c <_dtoa_r+0x6e4>
 80078c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078c8:	2000      	movs	r0, #0
 80078ca:	49a9      	ldr	r1, [pc, #676]	; (8007b70 <_dtoa_r+0x8c8>)
 80078cc:	f7f8 fc64 	bl	8000198 <__aeabi_dsub>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	4630      	mov	r0, r6
 80078d6:	4639      	mov	r1, r7
 80078d8:	f7f9 f888 	bl	80009ec <__aeabi_dcmplt>
 80078dc:	2800      	cmp	r0, #0
 80078de:	f43f af1d 	beq.w	800771c <_dtoa_r+0x474>
 80078e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80078e4:	1e7b      	subs	r3, r7, #1
 80078e6:	9314      	str	r3, [sp, #80]	; 0x50
 80078e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80078ec:	2b30      	cmp	r3, #48	; 0x30
 80078ee:	d0f8      	beq.n	80078e2 <_dtoa_r+0x63a>
 80078f0:	46c2      	mov	sl, r8
 80078f2:	e03b      	b.n	800796c <_dtoa_r+0x6c4>
 80078f4:	4b9f      	ldr	r3, [pc, #636]	; (8007b74 <_dtoa_r+0x8cc>)
 80078f6:	f7f8 fe07 	bl	8000508 <__aeabi_dmul>
 80078fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078fe:	e7bc      	b.n	800787a <_dtoa_r+0x5d2>
 8007900:	9f03      	ldr	r7, [sp, #12]
 8007902:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007906:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800790a:	4640      	mov	r0, r8
 800790c:	4649      	mov	r1, r9
 800790e:	f7f8 ff25 	bl	800075c <__aeabi_ddiv>
 8007912:	f7f9 f8a9 	bl	8000a68 <__aeabi_d2iz>
 8007916:	4604      	mov	r4, r0
 8007918:	f7f8 fd8c 	bl	8000434 <__aeabi_i2d>
 800791c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007920:	f7f8 fdf2 	bl	8000508 <__aeabi_dmul>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	4640      	mov	r0, r8
 800792a:	4649      	mov	r1, r9
 800792c:	f7f8 fc34 	bl	8000198 <__aeabi_dsub>
 8007930:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007934:	f807 6b01 	strb.w	r6, [r7], #1
 8007938:	9e03      	ldr	r6, [sp, #12]
 800793a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800793e:	1bbe      	subs	r6, r7, r6
 8007940:	45b4      	cmp	ip, r6
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	d136      	bne.n	80079b6 <_dtoa_r+0x70e>
 8007948:	f7f8 fc28 	bl	800019c <__adddf3>
 800794c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007950:	4680      	mov	r8, r0
 8007952:	4689      	mov	r9, r1
 8007954:	f7f9 f868 	bl	8000a28 <__aeabi_dcmpgt>
 8007958:	bb58      	cbnz	r0, 80079b2 <_dtoa_r+0x70a>
 800795a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800795e:	4640      	mov	r0, r8
 8007960:	4649      	mov	r1, r9
 8007962:	f7f9 f839 	bl	80009d8 <__aeabi_dcmpeq>
 8007966:	b108      	cbz	r0, 800796c <_dtoa_r+0x6c4>
 8007968:	07e1      	lsls	r1, r4, #31
 800796a:	d422      	bmi.n	80079b2 <_dtoa_r+0x70a>
 800796c:	4628      	mov	r0, r5
 800796e:	4659      	mov	r1, fp
 8007970:	f000 fe68 	bl	8008644 <_Bfree>
 8007974:	2300      	movs	r3, #0
 8007976:	703b      	strb	r3, [r7, #0]
 8007978:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800797a:	f10a 0001 	add.w	r0, sl, #1
 800797e:	6018      	str	r0, [r3, #0]
 8007980:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007982:	2b00      	cmp	r3, #0
 8007984:	f43f acde 	beq.w	8007344 <_dtoa_r+0x9c>
 8007988:	601f      	str	r7, [r3, #0]
 800798a:	e4db      	b.n	8007344 <_dtoa_r+0x9c>
 800798c:	4627      	mov	r7, r4
 800798e:	463b      	mov	r3, r7
 8007990:	461f      	mov	r7, r3
 8007992:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007996:	2a39      	cmp	r2, #57	; 0x39
 8007998:	d107      	bne.n	80079aa <_dtoa_r+0x702>
 800799a:	9a03      	ldr	r2, [sp, #12]
 800799c:	429a      	cmp	r2, r3
 800799e:	d1f7      	bne.n	8007990 <_dtoa_r+0x6e8>
 80079a0:	2230      	movs	r2, #48	; 0x30
 80079a2:	9903      	ldr	r1, [sp, #12]
 80079a4:	f108 0801 	add.w	r8, r8, #1
 80079a8:	700a      	strb	r2, [r1, #0]
 80079aa:	781a      	ldrb	r2, [r3, #0]
 80079ac:	3201      	adds	r2, #1
 80079ae:	701a      	strb	r2, [r3, #0]
 80079b0:	e79e      	b.n	80078f0 <_dtoa_r+0x648>
 80079b2:	46d0      	mov	r8, sl
 80079b4:	e7eb      	b.n	800798e <_dtoa_r+0x6e6>
 80079b6:	2200      	movs	r2, #0
 80079b8:	4b6e      	ldr	r3, [pc, #440]	; (8007b74 <_dtoa_r+0x8cc>)
 80079ba:	f7f8 fda5 	bl	8000508 <__aeabi_dmul>
 80079be:	2200      	movs	r2, #0
 80079c0:	2300      	movs	r3, #0
 80079c2:	4680      	mov	r8, r0
 80079c4:	4689      	mov	r9, r1
 80079c6:	f7f9 f807 	bl	80009d8 <__aeabi_dcmpeq>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d09b      	beq.n	8007906 <_dtoa_r+0x65e>
 80079ce:	e7cd      	b.n	800796c <_dtoa_r+0x6c4>
 80079d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079d2:	2a00      	cmp	r2, #0
 80079d4:	f000 80d0 	beq.w	8007b78 <_dtoa_r+0x8d0>
 80079d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80079da:	2a01      	cmp	r2, #1
 80079dc:	f300 80ae 	bgt.w	8007b3c <_dtoa_r+0x894>
 80079e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	f000 80a6 	beq.w	8007b34 <_dtoa_r+0x88c>
 80079e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079ee:	9f06      	ldr	r7, [sp, #24]
 80079f0:	9a06      	ldr	r2, [sp, #24]
 80079f2:	2101      	movs	r1, #1
 80079f4:	441a      	add	r2, r3
 80079f6:	9206      	str	r2, [sp, #24]
 80079f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079fa:	4628      	mov	r0, r5
 80079fc:	441a      	add	r2, r3
 80079fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007a00:	f000 ff20 	bl	8008844 <__i2b>
 8007a04:	4606      	mov	r6, r0
 8007a06:	2f00      	cmp	r7, #0
 8007a08:	dd0c      	ble.n	8007a24 <_dtoa_r+0x77c>
 8007a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	dd09      	ble.n	8007a24 <_dtoa_r+0x77c>
 8007a10:	42bb      	cmp	r3, r7
 8007a12:	bfa8      	it	ge
 8007a14:	463b      	movge	r3, r7
 8007a16:	9a06      	ldr	r2, [sp, #24]
 8007a18:	1aff      	subs	r7, r7, r3
 8007a1a:	1ad2      	subs	r2, r2, r3
 8007a1c:	9206      	str	r2, [sp, #24]
 8007a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	9309      	str	r3, [sp, #36]	; 0x24
 8007a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a26:	b1f3      	cbz	r3, 8007a66 <_dtoa_r+0x7be>
 8007a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80a8 	beq.w	8007b80 <_dtoa_r+0x8d8>
 8007a30:	2c00      	cmp	r4, #0
 8007a32:	dd10      	ble.n	8007a56 <_dtoa_r+0x7ae>
 8007a34:	4631      	mov	r1, r6
 8007a36:	4622      	mov	r2, r4
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f000 ffc1 	bl	80089c0 <__pow5mult>
 8007a3e:	465a      	mov	r2, fp
 8007a40:	4601      	mov	r1, r0
 8007a42:	4606      	mov	r6, r0
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 ff13 	bl	8008870 <__multiply>
 8007a4a:	4680      	mov	r8, r0
 8007a4c:	4659      	mov	r1, fp
 8007a4e:	4628      	mov	r0, r5
 8007a50:	f000 fdf8 	bl	8008644 <_Bfree>
 8007a54:	46c3      	mov	fp, r8
 8007a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a58:	1b1a      	subs	r2, r3, r4
 8007a5a:	d004      	beq.n	8007a66 <_dtoa_r+0x7be>
 8007a5c:	4659      	mov	r1, fp
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f000 ffae 	bl	80089c0 <__pow5mult>
 8007a64:	4683      	mov	fp, r0
 8007a66:	2101      	movs	r1, #1
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 feeb 	bl	8008844 <__i2b>
 8007a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a70:	4604      	mov	r4, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f340 8086 	ble.w	8007b84 <_dtoa_r+0x8dc>
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4601      	mov	r1, r0
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	f000 ff9f 	bl	80089c0 <__pow5mult>
 8007a82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a84:	4604      	mov	r4, r0
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	dd7f      	ble.n	8007b8a <_dtoa_r+0x8e2>
 8007a8a:	f04f 0800 	mov.w	r8, #0
 8007a8e:	6923      	ldr	r3, [r4, #16]
 8007a90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a94:	6918      	ldr	r0, [r3, #16]
 8007a96:	f000 fe87 	bl	80087a8 <__hi0bits>
 8007a9a:	f1c0 0020 	rsb	r0, r0, #32
 8007a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa0:	4418      	add	r0, r3
 8007aa2:	f010 001f 	ands.w	r0, r0, #31
 8007aa6:	f000 8092 	beq.w	8007bce <_dtoa_r+0x926>
 8007aaa:	f1c0 0320 	rsb	r3, r0, #32
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	f340 808a 	ble.w	8007bc8 <_dtoa_r+0x920>
 8007ab4:	f1c0 001c 	rsb	r0, r0, #28
 8007ab8:	9b06      	ldr	r3, [sp, #24]
 8007aba:	4407      	add	r7, r0
 8007abc:	4403      	add	r3, r0
 8007abe:	9306      	str	r3, [sp, #24]
 8007ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac2:	4403      	add	r3, r0
 8007ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac6:	9b06      	ldr	r3, [sp, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	dd05      	ble.n	8007ad8 <_dtoa_r+0x830>
 8007acc:	4659      	mov	r1, fp
 8007ace:	461a      	mov	r2, r3
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f000 ffcf 	bl	8008a74 <__lshift>
 8007ad6:	4683      	mov	fp, r0
 8007ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	dd05      	ble.n	8007aea <_dtoa_r+0x842>
 8007ade:	4621      	mov	r1, r4
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f000 ffc6 	bl	8008a74 <__lshift>
 8007ae8:	4604      	mov	r4, r0
 8007aea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d070      	beq.n	8007bd2 <_dtoa_r+0x92a>
 8007af0:	4621      	mov	r1, r4
 8007af2:	4658      	mov	r0, fp
 8007af4:	f001 f82e 	bl	8008b54 <__mcmp>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	da6a      	bge.n	8007bd2 <_dtoa_r+0x92a>
 8007afc:	2300      	movs	r3, #0
 8007afe:	4659      	mov	r1, fp
 8007b00:	220a      	movs	r2, #10
 8007b02:	4628      	mov	r0, r5
 8007b04:	f000 fdc0 	bl	8008688 <__multadd>
 8007b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b0a:	4683      	mov	fp, r0
 8007b0c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8194 	beq.w	8007e3e <_dtoa_r+0xb96>
 8007b16:	4631      	mov	r1, r6
 8007b18:	2300      	movs	r3, #0
 8007b1a:	220a      	movs	r2, #10
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f000 fdb3 	bl	8008688 <__multadd>
 8007b22:	f1b9 0f00 	cmp.w	r9, #0
 8007b26:	4606      	mov	r6, r0
 8007b28:	f300 8093 	bgt.w	8007c52 <_dtoa_r+0x9aa>
 8007b2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	dc57      	bgt.n	8007be2 <_dtoa_r+0x93a>
 8007b32:	e08e      	b.n	8007c52 <_dtoa_r+0x9aa>
 8007b34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b3a:	e757      	b.n	80079ec <_dtoa_r+0x744>
 8007b3c:	9b08      	ldr	r3, [sp, #32]
 8007b3e:	1e5c      	subs	r4, r3, #1
 8007b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b42:	42a3      	cmp	r3, r4
 8007b44:	bfb7      	itett	lt
 8007b46:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b48:	1b1c      	subge	r4, r3, r4
 8007b4a:	1ae2      	sublt	r2, r4, r3
 8007b4c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007b4e:	bfbe      	ittt	lt
 8007b50:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007b52:	189b      	addlt	r3, r3, r2
 8007b54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007b56:	9b08      	ldr	r3, [sp, #32]
 8007b58:	bfb8      	it	lt
 8007b5a:	2400      	movlt	r4, #0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bfbb      	ittet	lt
 8007b60:	9b06      	ldrlt	r3, [sp, #24]
 8007b62:	9a08      	ldrlt	r2, [sp, #32]
 8007b64:	9f06      	ldrge	r7, [sp, #24]
 8007b66:	1a9f      	sublt	r7, r3, r2
 8007b68:	bfac      	ite	ge
 8007b6a:	9b08      	ldrge	r3, [sp, #32]
 8007b6c:	2300      	movlt	r3, #0
 8007b6e:	e73f      	b.n	80079f0 <_dtoa_r+0x748>
 8007b70:	3fe00000 	.word	0x3fe00000
 8007b74:	40240000 	.word	0x40240000
 8007b78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b7a:	9f06      	ldr	r7, [sp, #24]
 8007b7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007b7e:	e742      	b.n	8007a06 <_dtoa_r+0x75e>
 8007b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b82:	e76b      	b.n	8007a5c <_dtoa_r+0x7b4>
 8007b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	dc19      	bgt.n	8007bbe <_dtoa_r+0x916>
 8007b8a:	9b04      	ldr	r3, [sp, #16]
 8007b8c:	b9bb      	cbnz	r3, 8007bbe <_dtoa_r+0x916>
 8007b8e:	9b05      	ldr	r3, [sp, #20]
 8007b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b94:	b99b      	cbnz	r3, 8007bbe <_dtoa_r+0x916>
 8007b96:	9b05      	ldr	r3, [sp, #20]
 8007b98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b9c:	0d1b      	lsrs	r3, r3, #20
 8007b9e:	051b      	lsls	r3, r3, #20
 8007ba0:	b183      	cbz	r3, 8007bc4 <_dtoa_r+0x91c>
 8007ba2:	f04f 0801 	mov.w	r8, #1
 8007ba6:	9b06      	ldr	r3, [sp, #24]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	9306      	str	r3, [sp, #24]
 8007bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bae:	3301      	adds	r3, #1
 8007bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f47f af6a 	bne.w	8007a8e <_dtoa_r+0x7e6>
 8007bba:	2001      	movs	r0, #1
 8007bbc:	e76f      	b.n	8007a9e <_dtoa_r+0x7f6>
 8007bbe:	f04f 0800 	mov.w	r8, #0
 8007bc2:	e7f6      	b.n	8007bb2 <_dtoa_r+0x90a>
 8007bc4:	4698      	mov	r8, r3
 8007bc6:	e7f4      	b.n	8007bb2 <_dtoa_r+0x90a>
 8007bc8:	f43f af7d 	beq.w	8007ac6 <_dtoa_r+0x81e>
 8007bcc:	4618      	mov	r0, r3
 8007bce:	301c      	adds	r0, #28
 8007bd0:	e772      	b.n	8007ab8 <_dtoa_r+0x810>
 8007bd2:	9b08      	ldr	r3, [sp, #32]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dc36      	bgt.n	8007c46 <_dtoa_r+0x99e>
 8007bd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	dd33      	ble.n	8007c46 <_dtoa_r+0x99e>
 8007bde:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007be2:	f1b9 0f00 	cmp.w	r9, #0
 8007be6:	d10d      	bne.n	8007c04 <_dtoa_r+0x95c>
 8007be8:	4621      	mov	r1, r4
 8007bea:	464b      	mov	r3, r9
 8007bec:	2205      	movs	r2, #5
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fd4a 	bl	8008688 <__multadd>
 8007bf4:	4601      	mov	r1, r0
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	4658      	mov	r0, fp
 8007bfa:	f000 ffab 	bl	8008b54 <__mcmp>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	f73f adb8 	bgt.w	8007774 <_dtoa_r+0x4cc>
 8007c04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c06:	9f03      	ldr	r7, [sp, #12]
 8007c08:	ea6f 0a03 	mvn.w	sl, r3
 8007c0c:	f04f 0800 	mov.w	r8, #0
 8007c10:	4621      	mov	r1, r4
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 fd16 	bl	8008644 <_Bfree>
 8007c18:	2e00      	cmp	r6, #0
 8007c1a:	f43f aea7 	beq.w	800796c <_dtoa_r+0x6c4>
 8007c1e:	f1b8 0f00 	cmp.w	r8, #0
 8007c22:	d005      	beq.n	8007c30 <_dtoa_r+0x988>
 8007c24:	45b0      	cmp	r8, r6
 8007c26:	d003      	beq.n	8007c30 <_dtoa_r+0x988>
 8007c28:	4641      	mov	r1, r8
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f000 fd0a 	bl	8008644 <_Bfree>
 8007c30:	4631      	mov	r1, r6
 8007c32:	4628      	mov	r0, r5
 8007c34:	f000 fd06 	bl	8008644 <_Bfree>
 8007c38:	e698      	b.n	800796c <_dtoa_r+0x6c4>
 8007c3a:	2400      	movs	r4, #0
 8007c3c:	4626      	mov	r6, r4
 8007c3e:	e7e1      	b.n	8007c04 <_dtoa_r+0x95c>
 8007c40:	46c2      	mov	sl, r8
 8007c42:	4626      	mov	r6, r4
 8007c44:	e596      	b.n	8007774 <_dtoa_r+0x4cc>
 8007c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 80fd 	beq.w	8007e4c <_dtoa_r+0xba4>
 8007c52:	2f00      	cmp	r7, #0
 8007c54:	dd05      	ble.n	8007c62 <_dtoa_r+0x9ba>
 8007c56:	4631      	mov	r1, r6
 8007c58:	463a      	mov	r2, r7
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 ff0a 	bl	8008a74 <__lshift>
 8007c60:	4606      	mov	r6, r0
 8007c62:	f1b8 0f00 	cmp.w	r8, #0
 8007c66:	d05c      	beq.n	8007d22 <_dtoa_r+0xa7a>
 8007c68:	4628      	mov	r0, r5
 8007c6a:	6871      	ldr	r1, [r6, #4]
 8007c6c:	f000 fcaa 	bl	80085c4 <_Balloc>
 8007c70:	4607      	mov	r7, r0
 8007c72:	b928      	cbnz	r0, 8007c80 <_dtoa_r+0x9d8>
 8007c74:	4602      	mov	r2, r0
 8007c76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c7a:	4b7f      	ldr	r3, [pc, #508]	; (8007e78 <_dtoa_r+0xbd0>)
 8007c7c:	f7ff bb28 	b.w	80072d0 <_dtoa_r+0x28>
 8007c80:	6932      	ldr	r2, [r6, #16]
 8007c82:	f106 010c 	add.w	r1, r6, #12
 8007c86:	3202      	adds	r2, #2
 8007c88:	0092      	lsls	r2, r2, #2
 8007c8a:	300c      	adds	r0, #12
 8007c8c:	f000 fc8c 	bl	80085a8 <memcpy>
 8007c90:	2201      	movs	r2, #1
 8007c92:	4639      	mov	r1, r7
 8007c94:	4628      	mov	r0, r5
 8007c96:	f000 feed 	bl	8008a74 <__lshift>
 8007c9a:	46b0      	mov	r8, r6
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	9b03      	ldr	r3, [sp, #12]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	9308      	str	r3, [sp, #32]
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	444b      	add	r3, r9
 8007ca8:	930a      	str	r3, [sp, #40]	; 0x28
 8007caa:	9b04      	ldr	r3, [sp, #16]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb2:	9b08      	ldr	r3, [sp, #32]
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	4658      	mov	r0, fp
 8007cba:	9304      	str	r3, [sp, #16]
 8007cbc:	f7ff fa68 	bl	8007190 <quorem>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	4641      	mov	r1, r8
 8007cc4:	3330      	adds	r3, #48	; 0x30
 8007cc6:	9006      	str	r0, [sp, #24]
 8007cc8:	4658      	mov	r0, fp
 8007cca:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ccc:	f000 ff42 	bl	8008b54 <__mcmp>
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	4681      	mov	r9, r0
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f000 ff58 	bl	8008b8c <__mdiff>
 8007cdc:	68c2      	ldr	r2, [r0, #12]
 8007cde:	4607      	mov	r7, r0
 8007ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce2:	bb02      	cbnz	r2, 8007d26 <_dtoa_r+0xa7e>
 8007ce4:	4601      	mov	r1, r0
 8007ce6:	4658      	mov	r0, fp
 8007ce8:	f000 ff34 	bl	8008b54 <__mcmp>
 8007cec:	4602      	mov	r2, r0
 8007cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cf0:	4639      	mov	r1, r7
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007cf8:	f000 fca4 	bl	8008644 <_Bfree>
 8007cfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d00:	9f08      	ldr	r7, [sp, #32]
 8007d02:	ea43 0102 	orr.w	r1, r3, r2
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d0c:	d10d      	bne.n	8007d2a <_dtoa_r+0xa82>
 8007d0e:	2b39      	cmp	r3, #57	; 0x39
 8007d10:	d029      	beq.n	8007d66 <_dtoa_r+0xabe>
 8007d12:	f1b9 0f00 	cmp.w	r9, #0
 8007d16:	dd01      	ble.n	8007d1c <_dtoa_r+0xa74>
 8007d18:	9b06      	ldr	r3, [sp, #24]
 8007d1a:	3331      	adds	r3, #49	; 0x31
 8007d1c:	9a04      	ldr	r2, [sp, #16]
 8007d1e:	7013      	strb	r3, [r2, #0]
 8007d20:	e776      	b.n	8007c10 <_dtoa_r+0x968>
 8007d22:	4630      	mov	r0, r6
 8007d24:	e7b9      	b.n	8007c9a <_dtoa_r+0x9f2>
 8007d26:	2201      	movs	r2, #1
 8007d28:	e7e2      	b.n	8007cf0 <_dtoa_r+0xa48>
 8007d2a:	f1b9 0f00 	cmp.w	r9, #0
 8007d2e:	db06      	blt.n	8007d3e <_dtoa_r+0xa96>
 8007d30:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007d32:	ea41 0909 	orr.w	r9, r1, r9
 8007d36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d38:	ea59 0101 	orrs.w	r1, r9, r1
 8007d3c:	d120      	bne.n	8007d80 <_dtoa_r+0xad8>
 8007d3e:	2a00      	cmp	r2, #0
 8007d40:	ddec      	ble.n	8007d1c <_dtoa_r+0xa74>
 8007d42:	4659      	mov	r1, fp
 8007d44:	2201      	movs	r2, #1
 8007d46:	4628      	mov	r0, r5
 8007d48:	9308      	str	r3, [sp, #32]
 8007d4a:	f000 fe93 	bl	8008a74 <__lshift>
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4683      	mov	fp, r0
 8007d52:	f000 feff 	bl	8008b54 <__mcmp>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	9b08      	ldr	r3, [sp, #32]
 8007d5a:	dc02      	bgt.n	8007d62 <_dtoa_r+0xaba>
 8007d5c:	d1de      	bne.n	8007d1c <_dtoa_r+0xa74>
 8007d5e:	07da      	lsls	r2, r3, #31
 8007d60:	d5dc      	bpl.n	8007d1c <_dtoa_r+0xa74>
 8007d62:	2b39      	cmp	r3, #57	; 0x39
 8007d64:	d1d8      	bne.n	8007d18 <_dtoa_r+0xa70>
 8007d66:	2339      	movs	r3, #57	; 0x39
 8007d68:	9a04      	ldr	r2, [sp, #16]
 8007d6a:	7013      	strb	r3, [r2, #0]
 8007d6c:	463b      	mov	r3, r7
 8007d6e:	461f      	mov	r7, r3
 8007d70:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	2a39      	cmp	r2, #57	; 0x39
 8007d78:	d050      	beq.n	8007e1c <_dtoa_r+0xb74>
 8007d7a:	3201      	adds	r2, #1
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e747      	b.n	8007c10 <_dtoa_r+0x968>
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	dd03      	ble.n	8007d8c <_dtoa_r+0xae4>
 8007d84:	2b39      	cmp	r3, #57	; 0x39
 8007d86:	d0ee      	beq.n	8007d66 <_dtoa_r+0xabe>
 8007d88:	3301      	adds	r3, #1
 8007d8a:	e7c7      	b.n	8007d1c <_dtoa_r+0xa74>
 8007d8c:	9a08      	ldr	r2, [sp, #32]
 8007d8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d90:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d94:	428a      	cmp	r2, r1
 8007d96:	d02a      	beq.n	8007dee <_dtoa_r+0xb46>
 8007d98:	4659      	mov	r1, fp
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	220a      	movs	r2, #10
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f000 fc72 	bl	8008688 <__multadd>
 8007da4:	45b0      	cmp	r8, r6
 8007da6:	4683      	mov	fp, r0
 8007da8:	f04f 0300 	mov.w	r3, #0
 8007dac:	f04f 020a 	mov.w	r2, #10
 8007db0:	4641      	mov	r1, r8
 8007db2:	4628      	mov	r0, r5
 8007db4:	d107      	bne.n	8007dc6 <_dtoa_r+0xb1e>
 8007db6:	f000 fc67 	bl	8008688 <__multadd>
 8007dba:	4680      	mov	r8, r0
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	9b08      	ldr	r3, [sp, #32]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	9308      	str	r3, [sp, #32]
 8007dc4:	e775      	b.n	8007cb2 <_dtoa_r+0xa0a>
 8007dc6:	f000 fc5f 	bl	8008688 <__multadd>
 8007dca:	4631      	mov	r1, r6
 8007dcc:	4680      	mov	r8, r0
 8007dce:	2300      	movs	r3, #0
 8007dd0:	220a      	movs	r2, #10
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 fc58 	bl	8008688 <__multadd>
 8007dd8:	4606      	mov	r6, r0
 8007dda:	e7f0      	b.n	8007dbe <_dtoa_r+0xb16>
 8007ddc:	f1b9 0f00 	cmp.w	r9, #0
 8007de0:	bfcc      	ite	gt
 8007de2:	464f      	movgt	r7, r9
 8007de4:	2701      	movle	r7, #1
 8007de6:	f04f 0800 	mov.w	r8, #0
 8007dea:	9a03      	ldr	r2, [sp, #12]
 8007dec:	4417      	add	r7, r2
 8007dee:	4659      	mov	r1, fp
 8007df0:	2201      	movs	r2, #1
 8007df2:	4628      	mov	r0, r5
 8007df4:	9308      	str	r3, [sp, #32]
 8007df6:	f000 fe3d 	bl	8008a74 <__lshift>
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4683      	mov	fp, r0
 8007dfe:	f000 fea9 	bl	8008b54 <__mcmp>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	dcb2      	bgt.n	8007d6c <_dtoa_r+0xac4>
 8007e06:	d102      	bne.n	8007e0e <_dtoa_r+0xb66>
 8007e08:	9b08      	ldr	r3, [sp, #32]
 8007e0a:	07db      	lsls	r3, r3, #31
 8007e0c:	d4ae      	bmi.n	8007d6c <_dtoa_r+0xac4>
 8007e0e:	463b      	mov	r3, r7
 8007e10:	461f      	mov	r7, r3
 8007e12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e16:	2a30      	cmp	r2, #48	; 0x30
 8007e18:	d0fa      	beq.n	8007e10 <_dtoa_r+0xb68>
 8007e1a:	e6f9      	b.n	8007c10 <_dtoa_r+0x968>
 8007e1c:	9a03      	ldr	r2, [sp, #12]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d1a5      	bne.n	8007d6e <_dtoa_r+0xac6>
 8007e22:	2331      	movs	r3, #49	; 0x31
 8007e24:	f10a 0a01 	add.w	sl, sl, #1
 8007e28:	e779      	b.n	8007d1e <_dtoa_r+0xa76>
 8007e2a:	4b14      	ldr	r3, [pc, #80]	; (8007e7c <_dtoa_r+0xbd4>)
 8007e2c:	f7ff baa8 	b.w	8007380 <_dtoa_r+0xd8>
 8007e30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f47f aa81 	bne.w	800733a <_dtoa_r+0x92>
 8007e38:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <_dtoa_r+0xbd8>)
 8007e3a:	f7ff baa1 	b.w	8007380 <_dtoa_r+0xd8>
 8007e3e:	f1b9 0f00 	cmp.w	r9, #0
 8007e42:	dc03      	bgt.n	8007e4c <_dtoa_r+0xba4>
 8007e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	f73f aecb 	bgt.w	8007be2 <_dtoa_r+0x93a>
 8007e4c:	9f03      	ldr	r7, [sp, #12]
 8007e4e:	4621      	mov	r1, r4
 8007e50:	4658      	mov	r0, fp
 8007e52:	f7ff f99d 	bl	8007190 <quorem>
 8007e56:	9a03      	ldr	r2, [sp, #12]
 8007e58:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007e5c:	f807 3b01 	strb.w	r3, [r7], #1
 8007e60:	1aba      	subs	r2, r7, r2
 8007e62:	4591      	cmp	r9, r2
 8007e64:	ddba      	ble.n	8007ddc <_dtoa_r+0xb34>
 8007e66:	4659      	mov	r1, fp
 8007e68:	2300      	movs	r3, #0
 8007e6a:	220a      	movs	r2, #10
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f000 fc0b 	bl	8008688 <__multadd>
 8007e72:	4683      	mov	fp, r0
 8007e74:	e7eb      	b.n	8007e4e <_dtoa_r+0xba6>
 8007e76:	bf00      	nop
 8007e78:	0800a2d8 	.word	0x0800a2d8
 8007e7c:	0800a0dc 	.word	0x0800a0dc
 8007e80:	0800a259 	.word	0x0800a259

08007e84 <rshift>:
 8007e84:	6903      	ldr	r3, [r0, #16]
 8007e86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e8e:	f100 0414 	add.w	r4, r0, #20
 8007e92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e96:	dd46      	ble.n	8007f26 <rshift+0xa2>
 8007e98:	f011 011f 	ands.w	r1, r1, #31
 8007e9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ea0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ea4:	d10c      	bne.n	8007ec0 <rshift+0x3c>
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	f100 0710 	add.w	r7, r0, #16
 8007eac:	42b1      	cmp	r1, r6
 8007eae:	d335      	bcc.n	8007f1c <rshift+0x98>
 8007eb0:	1a9b      	subs	r3, r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	1eea      	subs	r2, r5, #3
 8007eb6:	4296      	cmp	r6, r2
 8007eb8:	bf38      	it	cc
 8007eba:	2300      	movcc	r3, #0
 8007ebc:	4423      	add	r3, r4
 8007ebe:	e015      	b.n	8007eec <rshift+0x68>
 8007ec0:	46a1      	mov	r9, r4
 8007ec2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ec6:	f1c1 0820 	rsb	r8, r1, #32
 8007eca:	40cf      	lsrs	r7, r1
 8007ecc:	f105 0e04 	add.w	lr, r5, #4
 8007ed0:	4576      	cmp	r6, lr
 8007ed2:	46f4      	mov	ip, lr
 8007ed4:	d816      	bhi.n	8007f04 <rshift+0x80>
 8007ed6:	1a9a      	subs	r2, r3, r2
 8007ed8:	0092      	lsls	r2, r2, #2
 8007eda:	3a04      	subs	r2, #4
 8007edc:	3501      	adds	r5, #1
 8007ede:	42ae      	cmp	r6, r5
 8007ee0:	bf38      	it	cc
 8007ee2:	2200      	movcc	r2, #0
 8007ee4:	18a3      	adds	r3, r4, r2
 8007ee6:	50a7      	str	r7, [r4, r2]
 8007ee8:	b107      	cbz	r7, 8007eec <rshift+0x68>
 8007eea:	3304      	adds	r3, #4
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	eba3 0204 	sub.w	r2, r3, r4
 8007ef2:	bf08      	it	eq
 8007ef4:	2300      	moveq	r3, #0
 8007ef6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007efa:	6102      	str	r2, [r0, #16]
 8007efc:	bf08      	it	eq
 8007efe:	6143      	streq	r3, [r0, #20]
 8007f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f04:	f8dc c000 	ldr.w	ip, [ip]
 8007f08:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f0c:	ea4c 0707 	orr.w	r7, ip, r7
 8007f10:	f849 7b04 	str.w	r7, [r9], #4
 8007f14:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f18:	40cf      	lsrs	r7, r1
 8007f1a:	e7d9      	b.n	8007ed0 <rshift+0x4c>
 8007f1c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f20:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f24:	e7c2      	b.n	8007eac <rshift+0x28>
 8007f26:	4623      	mov	r3, r4
 8007f28:	e7e0      	b.n	8007eec <rshift+0x68>

08007f2a <__hexdig_fun>:
 8007f2a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f2e:	2b09      	cmp	r3, #9
 8007f30:	d802      	bhi.n	8007f38 <__hexdig_fun+0xe>
 8007f32:	3820      	subs	r0, #32
 8007f34:	b2c0      	uxtb	r0, r0
 8007f36:	4770      	bx	lr
 8007f38:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f3c:	2b05      	cmp	r3, #5
 8007f3e:	d801      	bhi.n	8007f44 <__hexdig_fun+0x1a>
 8007f40:	3847      	subs	r0, #71	; 0x47
 8007f42:	e7f7      	b.n	8007f34 <__hexdig_fun+0xa>
 8007f44:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f48:	2b05      	cmp	r3, #5
 8007f4a:	d801      	bhi.n	8007f50 <__hexdig_fun+0x26>
 8007f4c:	3827      	subs	r0, #39	; 0x27
 8007f4e:	e7f1      	b.n	8007f34 <__hexdig_fun+0xa>
 8007f50:	2000      	movs	r0, #0
 8007f52:	4770      	bx	lr

08007f54 <__gethex>:
 8007f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	b08b      	sub	sp, #44	; 0x2c
 8007f5a:	9305      	str	r3, [sp, #20]
 8007f5c:	4bb2      	ldr	r3, [pc, #712]	; (8008228 <__gethex+0x2d4>)
 8007f5e:	9002      	str	r0, [sp, #8]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	468b      	mov	fp, r1
 8007f64:	4618      	mov	r0, r3
 8007f66:	4690      	mov	r8, r2
 8007f68:	9303      	str	r3, [sp, #12]
 8007f6a:	f7f8 f909 	bl	8000180 <strlen>
 8007f6e:	4682      	mov	sl, r0
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	f8db 2000 	ldr.w	r2, [fp]
 8007f76:	4403      	add	r3, r0
 8007f78:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007f7c:	9306      	str	r3, [sp, #24]
 8007f7e:	1c93      	adds	r3, r2, #2
 8007f80:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007f84:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007f88:	32fe      	adds	r2, #254	; 0xfe
 8007f8a:	18d1      	adds	r1, r2, r3
 8007f8c:	461f      	mov	r7, r3
 8007f8e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f92:	9101      	str	r1, [sp, #4]
 8007f94:	2830      	cmp	r0, #48	; 0x30
 8007f96:	d0f8      	beq.n	8007f8a <__gethex+0x36>
 8007f98:	f7ff ffc7 	bl	8007f2a <__hexdig_fun>
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d13a      	bne.n	8008018 <__gethex+0xc4>
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	9903      	ldr	r1, [sp, #12]
 8007fa8:	f001 fa26 	bl	80093f8 <strncmp>
 8007fac:	4605      	mov	r5, r0
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d166      	bne.n	8008080 <__gethex+0x12c>
 8007fb2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007fb6:	eb07 060a 	add.w	r6, r7, sl
 8007fba:	f7ff ffb6 	bl	8007f2a <__hexdig_fun>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d060      	beq.n	8008084 <__gethex+0x130>
 8007fc2:	4633      	mov	r3, r6
 8007fc4:	7818      	ldrb	r0, [r3, #0]
 8007fc6:	461f      	mov	r7, r3
 8007fc8:	2830      	cmp	r0, #48	; 0x30
 8007fca:	f103 0301 	add.w	r3, r3, #1
 8007fce:	d0f9      	beq.n	8007fc4 <__gethex+0x70>
 8007fd0:	f7ff ffab 	bl	8007f2a <__hexdig_fun>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	fab0 f480 	clz	r4, r0
 8007fda:	4635      	mov	r5, r6
 8007fdc:	0964      	lsrs	r4, r4, #5
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	463a      	mov	r2, r7
 8007fe2:	4616      	mov	r6, r2
 8007fe4:	7830      	ldrb	r0, [r6, #0]
 8007fe6:	3201      	adds	r2, #1
 8007fe8:	f7ff ff9f 	bl	8007f2a <__hexdig_fun>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d1f8      	bne.n	8007fe2 <__gethex+0x8e>
 8007ff0:	4652      	mov	r2, sl
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	9903      	ldr	r1, [sp, #12]
 8007ff6:	f001 f9ff 	bl	80093f8 <strncmp>
 8007ffa:	b980      	cbnz	r0, 800801e <__gethex+0xca>
 8007ffc:	b94d      	cbnz	r5, 8008012 <__gethex+0xbe>
 8007ffe:	eb06 050a 	add.w	r5, r6, sl
 8008002:	462a      	mov	r2, r5
 8008004:	4616      	mov	r6, r2
 8008006:	7830      	ldrb	r0, [r6, #0]
 8008008:	3201      	adds	r2, #1
 800800a:	f7ff ff8e 	bl	8007f2a <__hexdig_fun>
 800800e:	2800      	cmp	r0, #0
 8008010:	d1f8      	bne.n	8008004 <__gethex+0xb0>
 8008012:	1bad      	subs	r5, r5, r6
 8008014:	00ad      	lsls	r5, r5, #2
 8008016:	e004      	b.n	8008022 <__gethex+0xce>
 8008018:	2400      	movs	r4, #0
 800801a:	4625      	mov	r5, r4
 800801c:	e7e0      	b.n	8007fe0 <__gethex+0x8c>
 800801e:	2d00      	cmp	r5, #0
 8008020:	d1f7      	bne.n	8008012 <__gethex+0xbe>
 8008022:	7833      	ldrb	r3, [r6, #0]
 8008024:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008028:	2b50      	cmp	r3, #80	; 0x50
 800802a:	d139      	bne.n	80080a0 <__gethex+0x14c>
 800802c:	7873      	ldrb	r3, [r6, #1]
 800802e:	2b2b      	cmp	r3, #43	; 0x2b
 8008030:	d02a      	beq.n	8008088 <__gethex+0x134>
 8008032:	2b2d      	cmp	r3, #45	; 0x2d
 8008034:	d02c      	beq.n	8008090 <__gethex+0x13c>
 8008036:	f04f 0900 	mov.w	r9, #0
 800803a:	1c71      	adds	r1, r6, #1
 800803c:	7808      	ldrb	r0, [r1, #0]
 800803e:	f7ff ff74 	bl	8007f2a <__hexdig_fun>
 8008042:	1e43      	subs	r3, r0, #1
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b18      	cmp	r3, #24
 8008048:	d82a      	bhi.n	80080a0 <__gethex+0x14c>
 800804a:	f1a0 0210 	sub.w	r2, r0, #16
 800804e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008052:	f7ff ff6a 	bl	8007f2a <__hexdig_fun>
 8008056:	1e43      	subs	r3, r0, #1
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b18      	cmp	r3, #24
 800805c:	d91b      	bls.n	8008096 <__gethex+0x142>
 800805e:	f1b9 0f00 	cmp.w	r9, #0
 8008062:	d000      	beq.n	8008066 <__gethex+0x112>
 8008064:	4252      	negs	r2, r2
 8008066:	4415      	add	r5, r2
 8008068:	f8cb 1000 	str.w	r1, [fp]
 800806c:	b1d4      	cbz	r4, 80080a4 <__gethex+0x150>
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	bf14      	ite	ne
 8008074:	2700      	movne	r7, #0
 8008076:	2706      	moveq	r7, #6
 8008078:	4638      	mov	r0, r7
 800807a:	b00b      	add	sp, #44	; 0x2c
 800807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008080:	463e      	mov	r6, r7
 8008082:	4625      	mov	r5, r4
 8008084:	2401      	movs	r4, #1
 8008086:	e7cc      	b.n	8008022 <__gethex+0xce>
 8008088:	f04f 0900 	mov.w	r9, #0
 800808c:	1cb1      	adds	r1, r6, #2
 800808e:	e7d5      	b.n	800803c <__gethex+0xe8>
 8008090:	f04f 0901 	mov.w	r9, #1
 8008094:	e7fa      	b.n	800808c <__gethex+0x138>
 8008096:	230a      	movs	r3, #10
 8008098:	fb03 0202 	mla	r2, r3, r2, r0
 800809c:	3a10      	subs	r2, #16
 800809e:	e7d6      	b.n	800804e <__gethex+0xfa>
 80080a0:	4631      	mov	r1, r6
 80080a2:	e7e1      	b.n	8008068 <__gethex+0x114>
 80080a4:	4621      	mov	r1, r4
 80080a6:	1bf3      	subs	r3, r6, r7
 80080a8:	3b01      	subs	r3, #1
 80080aa:	2b07      	cmp	r3, #7
 80080ac:	dc0a      	bgt.n	80080c4 <__gethex+0x170>
 80080ae:	9802      	ldr	r0, [sp, #8]
 80080b0:	f000 fa88 	bl	80085c4 <_Balloc>
 80080b4:	4604      	mov	r4, r0
 80080b6:	b940      	cbnz	r0, 80080ca <__gethex+0x176>
 80080b8:	4602      	mov	r2, r0
 80080ba:	21de      	movs	r1, #222	; 0xde
 80080bc:	4b5b      	ldr	r3, [pc, #364]	; (800822c <__gethex+0x2d8>)
 80080be:	485c      	ldr	r0, [pc, #368]	; (8008230 <__gethex+0x2dc>)
 80080c0:	f001 f9bc 	bl	800943c <__assert_func>
 80080c4:	3101      	adds	r1, #1
 80080c6:	105b      	asrs	r3, r3, #1
 80080c8:	e7ef      	b.n	80080aa <__gethex+0x156>
 80080ca:	f04f 0b00 	mov.w	fp, #0
 80080ce:	f100 0914 	add.w	r9, r0, #20
 80080d2:	f1ca 0301 	rsb	r3, sl, #1
 80080d6:	f8cd 9010 	str.w	r9, [sp, #16]
 80080da:	f8cd b004 	str.w	fp, [sp, #4]
 80080de:	9308      	str	r3, [sp, #32]
 80080e0:	42b7      	cmp	r7, r6
 80080e2:	d33f      	bcc.n	8008164 <__gethex+0x210>
 80080e4:	9f04      	ldr	r7, [sp, #16]
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	f847 3b04 	str.w	r3, [r7], #4
 80080ec:	eba7 0709 	sub.w	r7, r7, r9
 80080f0:	10bf      	asrs	r7, r7, #2
 80080f2:	6127      	str	r7, [r4, #16]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fb57 	bl	80087a8 <__hi0bits>
 80080fa:	017f      	lsls	r7, r7, #5
 80080fc:	f8d8 6000 	ldr.w	r6, [r8]
 8008100:	1a3f      	subs	r7, r7, r0
 8008102:	42b7      	cmp	r7, r6
 8008104:	dd62      	ble.n	80081cc <__gethex+0x278>
 8008106:	1bbf      	subs	r7, r7, r6
 8008108:	4639      	mov	r1, r7
 800810a:	4620      	mov	r0, r4
 800810c:	f000 fef1 	bl	8008ef2 <__any_on>
 8008110:	4682      	mov	sl, r0
 8008112:	b1a8      	cbz	r0, 8008140 <__gethex+0x1ec>
 8008114:	f04f 0a01 	mov.w	sl, #1
 8008118:	1e7b      	subs	r3, r7, #1
 800811a:	1159      	asrs	r1, r3, #5
 800811c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008120:	f003 021f 	and.w	r2, r3, #31
 8008124:	fa0a f202 	lsl.w	r2, sl, r2
 8008128:	420a      	tst	r2, r1
 800812a:	d009      	beq.n	8008140 <__gethex+0x1ec>
 800812c:	4553      	cmp	r3, sl
 800812e:	dd05      	ble.n	800813c <__gethex+0x1e8>
 8008130:	4620      	mov	r0, r4
 8008132:	1eb9      	subs	r1, r7, #2
 8008134:	f000 fedd 	bl	8008ef2 <__any_on>
 8008138:	2800      	cmp	r0, #0
 800813a:	d144      	bne.n	80081c6 <__gethex+0x272>
 800813c:	f04f 0a02 	mov.w	sl, #2
 8008140:	4639      	mov	r1, r7
 8008142:	4620      	mov	r0, r4
 8008144:	f7ff fe9e 	bl	8007e84 <rshift>
 8008148:	443d      	add	r5, r7
 800814a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800814e:	42ab      	cmp	r3, r5
 8008150:	da4a      	bge.n	80081e8 <__gethex+0x294>
 8008152:	4621      	mov	r1, r4
 8008154:	9802      	ldr	r0, [sp, #8]
 8008156:	f000 fa75 	bl	8008644 <_Bfree>
 800815a:	2300      	movs	r3, #0
 800815c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800815e:	27a3      	movs	r7, #163	; 0xa3
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	e789      	b.n	8008078 <__gethex+0x124>
 8008164:	1e73      	subs	r3, r6, #1
 8008166:	9a06      	ldr	r2, [sp, #24]
 8008168:	9307      	str	r3, [sp, #28]
 800816a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800816e:	4293      	cmp	r3, r2
 8008170:	d019      	beq.n	80081a6 <__gethex+0x252>
 8008172:	f1bb 0f20 	cmp.w	fp, #32
 8008176:	d107      	bne.n	8008188 <__gethex+0x234>
 8008178:	9b04      	ldr	r3, [sp, #16]
 800817a:	9a01      	ldr	r2, [sp, #4]
 800817c:	f843 2b04 	str.w	r2, [r3], #4
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	2300      	movs	r3, #0
 8008184:	469b      	mov	fp, r3
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800818c:	f7ff fecd 	bl	8007f2a <__hexdig_fun>
 8008190:	9b01      	ldr	r3, [sp, #4]
 8008192:	f000 000f 	and.w	r0, r0, #15
 8008196:	fa00 f00b 	lsl.w	r0, r0, fp
 800819a:	4303      	orrs	r3, r0
 800819c:	9301      	str	r3, [sp, #4]
 800819e:	f10b 0b04 	add.w	fp, fp, #4
 80081a2:	9b07      	ldr	r3, [sp, #28]
 80081a4:	e00d      	b.n	80081c2 <__gethex+0x26e>
 80081a6:	9a08      	ldr	r2, [sp, #32]
 80081a8:	1e73      	subs	r3, r6, #1
 80081aa:	4413      	add	r3, r2
 80081ac:	42bb      	cmp	r3, r7
 80081ae:	d3e0      	bcc.n	8008172 <__gethex+0x21e>
 80081b0:	4618      	mov	r0, r3
 80081b2:	4652      	mov	r2, sl
 80081b4:	9903      	ldr	r1, [sp, #12]
 80081b6:	9309      	str	r3, [sp, #36]	; 0x24
 80081b8:	f001 f91e 	bl	80093f8 <strncmp>
 80081bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081be:	2800      	cmp	r0, #0
 80081c0:	d1d7      	bne.n	8008172 <__gethex+0x21e>
 80081c2:	461e      	mov	r6, r3
 80081c4:	e78c      	b.n	80080e0 <__gethex+0x18c>
 80081c6:	f04f 0a03 	mov.w	sl, #3
 80081ca:	e7b9      	b.n	8008140 <__gethex+0x1ec>
 80081cc:	da09      	bge.n	80081e2 <__gethex+0x28e>
 80081ce:	1bf7      	subs	r7, r6, r7
 80081d0:	4621      	mov	r1, r4
 80081d2:	463a      	mov	r2, r7
 80081d4:	9802      	ldr	r0, [sp, #8]
 80081d6:	f000 fc4d 	bl	8008a74 <__lshift>
 80081da:	4604      	mov	r4, r0
 80081dc:	1bed      	subs	r5, r5, r7
 80081de:	f100 0914 	add.w	r9, r0, #20
 80081e2:	f04f 0a00 	mov.w	sl, #0
 80081e6:	e7b0      	b.n	800814a <__gethex+0x1f6>
 80081e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80081ec:	42a8      	cmp	r0, r5
 80081ee:	dd72      	ble.n	80082d6 <__gethex+0x382>
 80081f0:	1b45      	subs	r5, r0, r5
 80081f2:	42ae      	cmp	r6, r5
 80081f4:	dc35      	bgt.n	8008262 <__gethex+0x30e>
 80081f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d029      	beq.n	8008252 <__gethex+0x2fe>
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d02b      	beq.n	800825a <__gethex+0x306>
 8008202:	2b01      	cmp	r3, #1
 8008204:	d11c      	bne.n	8008240 <__gethex+0x2ec>
 8008206:	42ae      	cmp	r6, r5
 8008208:	d11a      	bne.n	8008240 <__gethex+0x2ec>
 800820a:	2e01      	cmp	r6, #1
 800820c:	d112      	bne.n	8008234 <__gethex+0x2e0>
 800820e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008212:	9a05      	ldr	r2, [sp, #20]
 8008214:	2762      	movs	r7, #98	; 0x62
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	2301      	movs	r3, #1
 800821a:	6123      	str	r3, [r4, #16]
 800821c:	f8c9 3000 	str.w	r3, [r9]
 8008220:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008222:	601c      	str	r4, [r3, #0]
 8008224:	e728      	b.n	8008078 <__gethex+0x124>
 8008226:	bf00      	nop
 8008228:	0800a350 	.word	0x0800a350
 800822c:	0800a2d8 	.word	0x0800a2d8
 8008230:	0800a2e9 	.word	0x0800a2e9
 8008234:	4620      	mov	r0, r4
 8008236:	1e71      	subs	r1, r6, #1
 8008238:	f000 fe5b 	bl	8008ef2 <__any_on>
 800823c:	2800      	cmp	r0, #0
 800823e:	d1e6      	bne.n	800820e <__gethex+0x2ba>
 8008240:	4621      	mov	r1, r4
 8008242:	9802      	ldr	r0, [sp, #8]
 8008244:	f000 f9fe 	bl	8008644 <_Bfree>
 8008248:	2300      	movs	r3, #0
 800824a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800824c:	2750      	movs	r7, #80	; 0x50
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	e712      	b.n	8008078 <__gethex+0x124>
 8008252:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1f3      	bne.n	8008240 <__gethex+0x2ec>
 8008258:	e7d9      	b.n	800820e <__gethex+0x2ba>
 800825a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1d6      	bne.n	800820e <__gethex+0x2ba>
 8008260:	e7ee      	b.n	8008240 <__gethex+0x2ec>
 8008262:	1e6f      	subs	r7, r5, #1
 8008264:	f1ba 0f00 	cmp.w	sl, #0
 8008268:	d132      	bne.n	80082d0 <__gethex+0x37c>
 800826a:	b127      	cbz	r7, 8008276 <__gethex+0x322>
 800826c:	4639      	mov	r1, r7
 800826e:	4620      	mov	r0, r4
 8008270:	f000 fe3f 	bl	8008ef2 <__any_on>
 8008274:	4682      	mov	sl, r0
 8008276:	2101      	movs	r1, #1
 8008278:	117b      	asrs	r3, r7, #5
 800827a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800827e:	f007 071f 	and.w	r7, r7, #31
 8008282:	fa01 f707 	lsl.w	r7, r1, r7
 8008286:	421f      	tst	r7, r3
 8008288:	f04f 0702 	mov.w	r7, #2
 800828c:	4629      	mov	r1, r5
 800828e:	4620      	mov	r0, r4
 8008290:	bf18      	it	ne
 8008292:	f04a 0a02 	orrne.w	sl, sl, #2
 8008296:	1b76      	subs	r6, r6, r5
 8008298:	f7ff fdf4 	bl	8007e84 <rshift>
 800829c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80082a0:	f1ba 0f00 	cmp.w	sl, #0
 80082a4:	d048      	beq.n	8008338 <__gethex+0x3e4>
 80082a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d015      	beq.n	80082da <__gethex+0x386>
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d017      	beq.n	80082e2 <__gethex+0x38e>
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d109      	bne.n	80082ca <__gethex+0x376>
 80082b6:	f01a 0f02 	tst.w	sl, #2
 80082ba:	d006      	beq.n	80082ca <__gethex+0x376>
 80082bc:	f8d9 0000 	ldr.w	r0, [r9]
 80082c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80082c4:	f01a 0f01 	tst.w	sl, #1
 80082c8:	d10e      	bne.n	80082e8 <__gethex+0x394>
 80082ca:	f047 0710 	orr.w	r7, r7, #16
 80082ce:	e033      	b.n	8008338 <__gethex+0x3e4>
 80082d0:	f04f 0a01 	mov.w	sl, #1
 80082d4:	e7cf      	b.n	8008276 <__gethex+0x322>
 80082d6:	2701      	movs	r7, #1
 80082d8:	e7e2      	b.n	80082a0 <__gethex+0x34c>
 80082da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082dc:	f1c3 0301 	rsb	r3, r3, #1
 80082e0:	9315      	str	r3, [sp, #84]	; 0x54
 80082e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d0f0      	beq.n	80082ca <__gethex+0x376>
 80082e8:	f04f 0c00 	mov.w	ip, #0
 80082ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80082f0:	f104 0314 	add.w	r3, r4, #20
 80082f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80082f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008302:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008306:	d01c      	beq.n	8008342 <__gethex+0x3ee>
 8008308:	3201      	adds	r2, #1
 800830a:	6002      	str	r2, [r0, #0]
 800830c:	2f02      	cmp	r7, #2
 800830e:	f104 0314 	add.w	r3, r4, #20
 8008312:	d13d      	bne.n	8008390 <__gethex+0x43c>
 8008314:	f8d8 2000 	ldr.w	r2, [r8]
 8008318:	3a01      	subs	r2, #1
 800831a:	42b2      	cmp	r2, r6
 800831c:	d10a      	bne.n	8008334 <__gethex+0x3e0>
 800831e:	2201      	movs	r2, #1
 8008320:	1171      	asrs	r1, r6, #5
 8008322:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008326:	f006 061f 	and.w	r6, r6, #31
 800832a:	fa02 f606 	lsl.w	r6, r2, r6
 800832e:	421e      	tst	r6, r3
 8008330:	bf18      	it	ne
 8008332:	4617      	movne	r7, r2
 8008334:	f047 0720 	orr.w	r7, r7, #32
 8008338:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800833a:	601c      	str	r4, [r3, #0]
 800833c:	9b05      	ldr	r3, [sp, #20]
 800833e:	601d      	str	r5, [r3, #0]
 8008340:	e69a      	b.n	8008078 <__gethex+0x124>
 8008342:	4299      	cmp	r1, r3
 8008344:	f843 cc04 	str.w	ip, [r3, #-4]
 8008348:	d8d8      	bhi.n	80082fc <__gethex+0x3a8>
 800834a:	68a3      	ldr	r3, [r4, #8]
 800834c:	459b      	cmp	fp, r3
 800834e:	db17      	blt.n	8008380 <__gethex+0x42c>
 8008350:	6861      	ldr	r1, [r4, #4]
 8008352:	9802      	ldr	r0, [sp, #8]
 8008354:	3101      	adds	r1, #1
 8008356:	f000 f935 	bl	80085c4 <_Balloc>
 800835a:	4681      	mov	r9, r0
 800835c:	b918      	cbnz	r0, 8008366 <__gethex+0x412>
 800835e:	4602      	mov	r2, r0
 8008360:	2184      	movs	r1, #132	; 0x84
 8008362:	4b19      	ldr	r3, [pc, #100]	; (80083c8 <__gethex+0x474>)
 8008364:	e6ab      	b.n	80080be <__gethex+0x16a>
 8008366:	6922      	ldr	r2, [r4, #16]
 8008368:	f104 010c 	add.w	r1, r4, #12
 800836c:	3202      	adds	r2, #2
 800836e:	0092      	lsls	r2, r2, #2
 8008370:	300c      	adds	r0, #12
 8008372:	f000 f919 	bl	80085a8 <memcpy>
 8008376:	4621      	mov	r1, r4
 8008378:	9802      	ldr	r0, [sp, #8]
 800837a:	f000 f963 	bl	8008644 <_Bfree>
 800837e:	464c      	mov	r4, r9
 8008380:	6923      	ldr	r3, [r4, #16]
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	6122      	str	r2, [r4, #16]
 8008386:	2201      	movs	r2, #1
 8008388:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800838c:	615a      	str	r2, [r3, #20]
 800838e:	e7bd      	b.n	800830c <__gethex+0x3b8>
 8008390:	6922      	ldr	r2, [r4, #16]
 8008392:	455a      	cmp	r2, fp
 8008394:	dd0b      	ble.n	80083ae <__gethex+0x45a>
 8008396:	2101      	movs	r1, #1
 8008398:	4620      	mov	r0, r4
 800839a:	f7ff fd73 	bl	8007e84 <rshift>
 800839e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083a2:	3501      	adds	r5, #1
 80083a4:	42ab      	cmp	r3, r5
 80083a6:	f6ff aed4 	blt.w	8008152 <__gethex+0x1fe>
 80083aa:	2701      	movs	r7, #1
 80083ac:	e7c2      	b.n	8008334 <__gethex+0x3e0>
 80083ae:	f016 061f 	ands.w	r6, r6, #31
 80083b2:	d0fa      	beq.n	80083aa <__gethex+0x456>
 80083b4:	4453      	add	r3, sl
 80083b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80083ba:	f000 f9f5 	bl	80087a8 <__hi0bits>
 80083be:	f1c6 0620 	rsb	r6, r6, #32
 80083c2:	42b0      	cmp	r0, r6
 80083c4:	dbe7      	blt.n	8008396 <__gethex+0x442>
 80083c6:	e7f0      	b.n	80083aa <__gethex+0x456>
 80083c8:	0800a2d8 	.word	0x0800a2d8

080083cc <L_shift>:
 80083cc:	f1c2 0208 	rsb	r2, r2, #8
 80083d0:	0092      	lsls	r2, r2, #2
 80083d2:	b570      	push	{r4, r5, r6, lr}
 80083d4:	f1c2 0620 	rsb	r6, r2, #32
 80083d8:	6843      	ldr	r3, [r0, #4]
 80083da:	6804      	ldr	r4, [r0, #0]
 80083dc:	fa03 f506 	lsl.w	r5, r3, r6
 80083e0:	432c      	orrs	r4, r5
 80083e2:	40d3      	lsrs	r3, r2
 80083e4:	6004      	str	r4, [r0, #0]
 80083e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80083ea:	4288      	cmp	r0, r1
 80083ec:	d3f4      	bcc.n	80083d8 <L_shift+0xc>
 80083ee:	bd70      	pop	{r4, r5, r6, pc}

080083f0 <__match>:
 80083f0:	b530      	push	{r4, r5, lr}
 80083f2:	6803      	ldr	r3, [r0, #0]
 80083f4:	3301      	adds	r3, #1
 80083f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083fa:	b914      	cbnz	r4, 8008402 <__match+0x12>
 80083fc:	6003      	str	r3, [r0, #0]
 80083fe:	2001      	movs	r0, #1
 8008400:	bd30      	pop	{r4, r5, pc}
 8008402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008406:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800840a:	2d19      	cmp	r5, #25
 800840c:	bf98      	it	ls
 800840e:	3220      	addls	r2, #32
 8008410:	42a2      	cmp	r2, r4
 8008412:	d0f0      	beq.n	80083f6 <__match+0x6>
 8008414:	2000      	movs	r0, #0
 8008416:	e7f3      	b.n	8008400 <__match+0x10>

08008418 <__hexnan>:
 8008418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	2500      	movs	r5, #0
 800841e:	680b      	ldr	r3, [r1, #0]
 8008420:	4682      	mov	sl, r0
 8008422:	115e      	asrs	r6, r3, #5
 8008424:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008428:	f013 031f 	ands.w	r3, r3, #31
 800842c:	bf18      	it	ne
 800842e:	3604      	addne	r6, #4
 8008430:	1f37      	subs	r7, r6, #4
 8008432:	46b9      	mov	r9, r7
 8008434:	463c      	mov	r4, r7
 8008436:	46ab      	mov	fp, r5
 8008438:	b087      	sub	sp, #28
 800843a:	4690      	mov	r8, r2
 800843c:	6802      	ldr	r2, [r0, #0]
 800843e:	9301      	str	r3, [sp, #4]
 8008440:	f846 5c04 	str.w	r5, [r6, #-4]
 8008444:	9502      	str	r5, [sp, #8]
 8008446:	7851      	ldrb	r1, [r2, #1]
 8008448:	1c53      	adds	r3, r2, #1
 800844a:	9303      	str	r3, [sp, #12]
 800844c:	b341      	cbz	r1, 80084a0 <__hexnan+0x88>
 800844e:	4608      	mov	r0, r1
 8008450:	9205      	str	r2, [sp, #20]
 8008452:	9104      	str	r1, [sp, #16]
 8008454:	f7ff fd69 	bl	8007f2a <__hexdig_fun>
 8008458:	2800      	cmp	r0, #0
 800845a:	d14f      	bne.n	80084fc <__hexnan+0xe4>
 800845c:	9904      	ldr	r1, [sp, #16]
 800845e:	9a05      	ldr	r2, [sp, #20]
 8008460:	2920      	cmp	r1, #32
 8008462:	d818      	bhi.n	8008496 <__hexnan+0x7e>
 8008464:	9b02      	ldr	r3, [sp, #8]
 8008466:	459b      	cmp	fp, r3
 8008468:	dd13      	ble.n	8008492 <__hexnan+0x7a>
 800846a:	454c      	cmp	r4, r9
 800846c:	d206      	bcs.n	800847c <__hexnan+0x64>
 800846e:	2d07      	cmp	r5, #7
 8008470:	dc04      	bgt.n	800847c <__hexnan+0x64>
 8008472:	462a      	mov	r2, r5
 8008474:	4649      	mov	r1, r9
 8008476:	4620      	mov	r0, r4
 8008478:	f7ff ffa8 	bl	80083cc <L_shift>
 800847c:	4544      	cmp	r4, r8
 800847e:	d950      	bls.n	8008522 <__hexnan+0x10a>
 8008480:	2300      	movs	r3, #0
 8008482:	f1a4 0904 	sub.w	r9, r4, #4
 8008486:	f844 3c04 	str.w	r3, [r4, #-4]
 800848a:	461d      	mov	r5, r3
 800848c:	464c      	mov	r4, r9
 800848e:	f8cd b008 	str.w	fp, [sp, #8]
 8008492:	9a03      	ldr	r2, [sp, #12]
 8008494:	e7d7      	b.n	8008446 <__hexnan+0x2e>
 8008496:	2929      	cmp	r1, #41	; 0x29
 8008498:	d156      	bne.n	8008548 <__hexnan+0x130>
 800849a:	3202      	adds	r2, #2
 800849c:	f8ca 2000 	str.w	r2, [sl]
 80084a0:	f1bb 0f00 	cmp.w	fp, #0
 80084a4:	d050      	beq.n	8008548 <__hexnan+0x130>
 80084a6:	454c      	cmp	r4, r9
 80084a8:	d206      	bcs.n	80084b8 <__hexnan+0xa0>
 80084aa:	2d07      	cmp	r5, #7
 80084ac:	dc04      	bgt.n	80084b8 <__hexnan+0xa0>
 80084ae:	462a      	mov	r2, r5
 80084b0:	4649      	mov	r1, r9
 80084b2:	4620      	mov	r0, r4
 80084b4:	f7ff ff8a 	bl	80083cc <L_shift>
 80084b8:	4544      	cmp	r4, r8
 80084ba:	d934      	bls.n	8008526 <__hexnan+0x10e>
 80084bc:	4623      	mov	r3, r4
 80084be:	f1a8 0204 	sub.w	r2, r8, #4
 80084c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80084c6:	429f      	cmp	r7, r3
 80084c8:	f842 1f04 	str.w	r1, [r2, #4]!
 80084cc:	d2f9      	bcs.n	80084c2 <__hexnan+0xaa>
 80084ce:	1b3b      	subs	r3, r7, r4
 80084d0:	f023 0303 	bic.w	r3, r3, #3
 80084d4:	3304      	adds	r3, #4
 80084d6:	3401      	adds	r4, #1
 80084d8:	3e03      	subs	r6, #3
 80084da:	42b4      	cmp	r4, r6
 80084dc:	bf88      	it	hi
 80084de:	2304      	movhi	r3, #4
 80084e0:	2200      	movs	r2, #0
 80084e2:	4443      	add	r3, r8
 80084e4:	f843 2b04 	str.w	r2, [r3], #4
 80084e8:	429f      	cmp	r7, r3
 80084ea:	d2fb      	bcs.n	80084e4 <__hexnan+0xcc>
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	b91b      	cbnz	r3, 80084f8 <__hexnan+0xe0>
 80084f0:	4547      	cmp	r7, r8
 80084f2:	d127      	bne.n	8008544 <__hexnan+0x12c>
 80084f4:	2301      	movs	r3, #1
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	2005      	movs	r0, #5
 80084fa:	e026      	b.n	800854a <__hexnan+0x132>
 80084fc:	3501      	adds	r5, #1
 80084fe:	2d08      	cmp	r5, #8
 8008500:	f10b 0b01 	add.w	fp, fp, #1
 8008504:	dd06      	ble.n	8008514 <__hexnan+0xfc>
 8008506:	4544      	cmp	r4, r8
 8008508:	d9c3      	bls.n	8008492 <__hexnan+0x7a>
 800850a:	2300      	movs	r3, #0
 800850c:	2501      	movs	r5, #1
 800850e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008512:	3c04      	subs	r4, #4
 8008514:	6822      	ldr	r2, [r4, #0]
 8008516:	f000 000f 	and.w	r0, r0, #15
 800851a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800851e:	6022      	str	r2, [r4, #0]
 8008520:	e7b7      	b.n	8008492 <__hexnan+0x7a>
 8008522:	2508      	movs	r5, #8
 8008524:	e7b5      	b.n	8008492 <__hexnan+0x7a>
 8008526:	9b01      	ldr	r3, [sp, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d0df      	beq.n	80084ec <__hexnan+0xd4>
 800852c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008530:	f1c3 0320 	rsb	r3, r3, #32
 8008534:	fa22 f303 	lsr.w	r3, r2, r3
 8008538:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800853c:	401a      	ands	r2, r3
 800853e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008542:	e7d3      	b.n	80084ec <__hexnan+0xd4>
 8008544:	3f04      	subs	r7, #4
 8008546:	e7d1      	b.n	80084ec <__hexnan+0xd4>
 8008548:	2004      	movs	r0, #4
 800854a:	b007      	add	sp, #28
 800854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008550 <_localeconv_r>:
 8008550:	4800      	ldr	r0, [pc, #0]	; (8008554 <_localeconv_r+0x4>)
 8008552:	4770      	bx	lr
 8008554:	20000164 	.word	0x20000164

08008558 <malloc>:
 8008558:	4b02      	ldr	r3, [pc, #8]	; (8008564 <malloc+0xc>)
 800855a:	4601      	mov	r1, r0
 800855c:	6818      	ldr	r0, [r3, #0]
 800855e:	f000 bd65 	b.w	800902c <_malloc_r>
 8008562:	bf00      	nop
 8008564:	2000000c 	.word	0x2000000c

08008568 <__ascii_mbtowc>:
 8008568:	b082      	sub	sp, #8
 800856a:	b901      	cbnz	r1, 800856e <__ascii_mbtowc+0x6>
 800856c:	a901      	add	r1, sp, #4
 800856e:	b142      	cbz	r2, 8008582 <__ascii_mbtowc+0x1a>
 8008570:	b14b      	cbz	r3, 8008586 <__ascii_mbtowc+0x1e>
 8008572:	7813      	ldrb	r3, [r2, #0]
 8008574:	600b      	str	r3, [r1, #0]
 8008576:	7812      	ldrb	r2, [r2, #0]
 8008578:	1e10      	subs	r0, r2, #0
 800857a:	bf18      	it	ne
 800857c:	2001      	movne	r0, #1
 800857e:	b002      	add	sp, #8
 8008580:	4770      	bx	lr
 8008582:	4610      	mov	r0, r2
 8008584:	e7fb      	b.n	800857e <__ascii_mbtowc+0x16>
 8008586:	f06f 0001 	mvn.w	r0, #1
 800858a:	e7f8      	b.n	800857e <__ascii_mbtowc+0x16>

0800858c <memchr>:
 800858c:	4603      	mov	r3, r0
 800858e:	b510      	push	{r4, lr}
 8008590:	b2c9      	uxtb	r1, r1
 8008592:	4402      	add	r2, r0
 8008594:	4293      	cmp	r3, r2
 8008596:	4618      	mov	r0, r3
 8008598:	d101      	bne.n	800859e <memchr+0x12>
 800859a:	2000      	movs	r0, #0
 800859c:	e003      	b.n	80085a6 <memchr+0x1a>
 800859e:	7804      	ldrb	r4, [r0, #0]
 80085a0:	3301      	adds	r3, #1
 80085a2:	428c      	cmp	r4, r1
 80085a4:	d1f6      	bne.n	8008594 <memchr+0x8>
 80085a6:	bd10      	pop	{r4, pc}

080085a8 <memcpy>:
 80085a8:	440a      	add	r2, r1
 80085aa:	4291      	cmp	r1, r2
 80085ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80085b0:	d100      	bne.n	80085b4 <memcpy+0xc>
 80085b2:	4770      	bx	lr
 80085b4:	b510      	push	{r4, lr}
 80085b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ba:	4291      	cmp	r1, r2
 80085bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085c0:	d1f9      	bne.n	80085b6 <memcpy+0xe>
 80085c2:	bd10      	pop	{r4, pc}

080085c4 <_Balloc>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085c8:	4604      	mov	r4, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	b976      	cbnz	r6, 80085ec <_Balloc+0x28>
 80085ce:	2010      	movs	r0, #16
 80085d0:	f7ff ffc2 	bl	8008558 <malloc>
 80085d4:	4602      	mov	r2, r0
 80085d6:	6260      	str	r0, [r4, #36]	; 0x24
 80085d8:	b920      	cbnz	r0, 80085e4 <_Balloc+0x20>
 80085da:	2166      	movs	r1, #102	; 0x66
 80085dc:	4b17      	ldr	r3, [pc, #92]	; (800863c <_Balloc+0x78>)
 80085de:	4818      	ldr	r0, [pc, #96]	; (8008640 <_Balloc+0x7c>)
 80085e0:	f000 ff2c 	bl	800943c <__assert_func>
 80085e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085e8:	6006      	str	r6, [r0, #0]
 80085ea:	60c6      	str	r6, [r0, #12]
 80085ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085ee:	68f3      	ldr	r3, [r6, #12]
 80085f0:	b183      	cbz	r3, 8008614 <_Balloc+0x50>
 80085f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085fa:	b9b8      	cbnz	r0, 800862c <_Balloc+0x68>
 80085fc:	2101      	movs	r1, #1
 80085fe:	fa01 f605 	lsl.w	r6, r1, r5
 8008602:	1d72      	adds	r2, r6, #5
 8008604:	4620      	mov	r0, r4
 8008606:	0092      	lsls	r2, r2, #2
 8008608:	f000 fc94 	bl	8008f34 <_calloc_r>
 800860c:	b160      	cbz	r0, 8008628 <_Balloc+0x64>
 800860e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008612:	e00e      	b.n	8008632 <_Balloc+0x6e>
 8008614:	2221      	movs	r2, #33	; 0x21
 8008616:	2104      	movs	r1, #4
 8008618:	4620      	mov	r0, r4
 800861a:	f000 fc8b 	bl	8008f34 <_calloc_r>
 800861e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008620:	60f0      	str	r0, [r6, #12]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e4      	bne.n	80085f2 <_Balloc+0x2e>
 8008628:	2000      	movs	r0, #0
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	6802      	ldr	r2, [r0, #0]
 800862e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008632:	2300      	movs	r3, #0
 8008634:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008638:	e7f7      	b.n	800862a <_Balloc+0x66>
 800863a:	bf00      	nop
 800863c:	0800a266 	.word	0x0800a266
 8008640:	0800a364 	.word	0x0800a364

08008644 <_Bfree>:
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008648:	4605      	mov	r5, r0
 800864a:	460c      	mov	r4, r1
 800864c:	b976      	cbnz	r6, 800866c <_Bfree+0x28>
 800864e:	2010      	movs	r0, #16
 8008650:	f7ff ff82 	bl	8008558 <malloc>
 8008654:	4602      	mov	r2, r0
 8008656:	6268      	str	r0, [r5, #36]	; 0x24
 8008658:	b920      	cbnz	r0, 8008664 <_Bfree+0x20>
 800865a:	218a      	movs	r1, #138	; 0x8a
 800865c:	4b08      	ldr	r3, [pc, #32]	; (8008680 <_Bfree+0x3c>)
 800865e:	4809      	ldr	r0, [pc, #36]	; (8008684 <_Bfree+0x40>)
 8008660:	f000 feec 	bl	800943c <__assert_func>
 8008664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008668:	6006      	str	r6, [r0, #0]
 800866a:	60c6      	str	r6, [r0, #12]
 800866c:	b13c      	cbz	r4, 800867e <_Bfree+0x3a>
 800866e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008670:	6862      	ldr	r2, [r4, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008678:	6021      	str	r1, [r4, #0]
 800867a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	0800a266 	.word	0x0800a266
 8008684:	0800a364 	.word	0x0800a364

08008688 <__multadd>:
 8008688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868c:	4607      	mov	r7, r0
 800868e:	460c      	mov	r4, r1
 8008690:	461e      	mov	r6, r3
 8008692:	2000      	movs	r0, #0
 8008694:	690d      	ldr	r5, [r1, #16]
 8008696:	f101 0c14 	add.w	ip, r1, #20
 800869a:	f8dc 3000 	ldr.w	r3, [ip]
 800869e:	3001      	adds	r0, #1
 80086a0:	b299      	uxth	r1, r3
 80086a2:	fb02 6101 	mla	r1, r2, r1, r6
 80086a6:	0c1e      	lsrs	r6, r3, #16
 80086a8:	0c0b      	lsrs	r3, r1, #16
 80086aa:	fb02 3306 	mla	r3, r2, r6, r3
 80086ae:	b289      	uxth	r1, r1
 80086b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086b4:	4285      	cmp	r5, r0
 80086b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086ba:	f84c 1b04 	str.w	r1, [ip], #4
 80086be:	dcec      	bgt.n	800869a <__multadd+0x12>
 80086c0:	b30e      	cbz	r6, 8008706 <__multadd+0x7e>
 80086c2:	68a3      	ldr	r3, [r4, #8]
 80086c4:	42ab      	cmp	r3, r5
 80086c6:	dc19      	bgt.n	80086fc <__multadd+0x74>
 80086c8:	6861      	ldr	r1, [r4, #4]
 80086ca:	4638      	mov	r0, r7
 80086cc:	3101      	adds	r1, #1
 80086ce:	f7ff ff79 	bl	80085c4 <_Balloc>
 80086d2:	4680      	mov	r8, r0
 80086d4:	b928      	cbnz	r0, 80086e2 <__multadd+0x5a>
 80086d6:	4602      	mov	r2, r0
 80086d8:	21b5      	movs	r1, #181	; 0xb5
 80086da:	4b0c      	ldr	r3, [pc, #48]	; (800870c <__multadd+0x84>)
 80086dc:	480c      	ldr	r0, [pc, #48]	; (8008710 <__multadd+0x88>)
 80086de:	f000 fead 	bl	800943c <__assert_func>
 80086e2:	6922      	ldr	r2, [r4, #16]
 80086e4:	f104 010c 	add.w	r1, r4, #12
 80086e8:	3202      	adds	r2, #2
 80086ea:	0092      	lsls	r2, r2, #2
 80086ec:	300c      	adds	r0, #12
 80086ee:	f7ff ff5b 	bl	80085a8 <memcpy>
 80086f2:	4621      	mov	r1, r4
 80086f4:	4638      	mov	r0, r7
 80086f6:	f7ff ffa5 	bl	8008644 <_Bfree>
 80086fa:	4644      	mov	r4, r8
 80086fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008700:	3501      	adds	r5, #1
 8008702:	615e      	str	r6, [r3, #20]
 8008704:	6125      	str	r5, [r4, #16]
 8008706:	4620      	mov	r0, r4
 8008708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800870c:	0800a2d8 	.word	0x0800a2d8
 8008710:	0800a364 	.word	0x0800a364

08008714 <__s2b>:
 8008714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008718:	4615      	mov	r5, r2
 800871a:	2209      	movs	r2, #9
 800871c:	461f      	mov	r7, r3
 800871e:	3308      	adds	r3, #8
 8008720:	460c      	mov	r4, r1
 8008722:	fb93 f3f2 	sdiv	r3, r3, r2
 8008726:	4606      	mov	r6, r0
 8008728:	2201      	movs	r2, #1
 800872a:	2100      	movs	r1, #0
 800872c:	429a      	cmp	r2, r3
 800872e:	db09      	blt.n	8008744 <__s2b+0x30>
 8008730:	4630      	mov	r0, r6
 8008732:	f7ff ff47 	bl	80085c4 <_Balloc>
 8008736:	b940      	cbnz	r0, 800874a <__s2b+0x36>
 8008738:	4602      	mov	r2, r0
 800873a:	21ce      	movs	r1, #206	; 0xce
 800873c:	4b18      	ldr	r3, [pc, #96]	; (80087a0 <__s2b+0x8c>)
 800873e:	4819      	ldr	r0, [pc, #100]	; (80087a4 <__s2b+0x90>)
 8008740:	f000 fe7c 	bl	800943c <__assert_func>
 8008744:	0052      	lsls	r2, r2, #1
 8008746:	3101      	adds	r1, #1
 8008748:	e7f0      	b.n	800872c <__s2b+0x18>
 800874a:	9b08      	ldr	r3, [sp, #32]
 800874c:	2d09      	cmp	r5, #9
 800874e:	6143      	str	r3, [r0, #20]
 8008750:	f04f 0301 	mov.w	r3, #1
 8008754:	6103      	str	r3, [r0, #16]
 8008756:	dd16      	ble.n	8008786 <__s2b+0x72>
 8008758:	f104 0909 	add.w	r9, r4, #9
 800875c:	46c8      	mov	r8, r9
 800875e:	442c      	add	r4, r5
 8008760:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008764:	4601      	mov	r1, r0
 8008766:	220a      	movs	r2, #10
 8008768:	4630      	mov	r0, r6
 800876a:	3b30      	subs	r3, #48	; 0x30
 800876c:	f7ff ff8c 	bl	8008688 <__multadd>
 8008770:	45a0      	cmp	r8, r4
 8008772:	d1f5      	bne.n	8008760 <__s2b+0x4c>
 8008774:	f1a5 0408 	sub.w	r4, r5, #8
 8008778:	444c      	add	r4, r9
 800877a:	1b2d      	subs	r5, r5, r4
 800877c:	1963      	adds	r3, r4, r5
 800877e:	42bb      	cmp	r3, r7
 8008780:	db04      	blt.n	800878c <__s2b+0x78>
 8008782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008786:	2509      	movs	r5, #9
 8008788:	340a      	adds	r4, #10
 800878a:	e7f6      	b.n	800877a <__s2b+0x66>
 800878c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008790:	4601      	mov	r1, r0
 8008792:	220a      	movs	r2, #10
 8008794:	4630      	mov	r0, r6
 8008796:	3b30      	subs	r3, #48	; 0x30
 8008798:	f7ff ff76 	bl	8008688 <__multadd>
 800879c:	e7ee      	b.n	800877c <__s2b+0x68>
 800879e:	bf00      	nop
 80087a0:	0800a2d8 	.word	0x0800a2d8
 80087a4:	0800a364 	.word	0x0800a364

080087a8 <__hi0bits>:
 80087a8:	0c02      	lsrs	r2, r0, #16
 80087aa:	0412      	lsls	r2, r2, #16
 80087ac:	4603      	mov	r3, r0
 80087ae:	b9ca      	cbnz	r2, 80087e4 <__hi0bits+0x3c>
 80087b0:	0403      	lsls	r3, r0, #16
 80087b2:	2010      	movs	r0, #16
 80087b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80087b8:	bf04      	itt	eq
 80087ba:	021b      	lsleq	r3, r3, #8
 80087bc:	3008      	addeq	r0, #8
 80087be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80087c2:	bf04      	itt	eq
 80087c4:	011b      	lsleq	r3, r3, #4
 80087c6:	3004      	addeq	r0, #4
 80087c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80087cc:	bf04      	itt	eq
 80087ce:	009b      	lsleq	r3, r3, #2
 80087d0:	3002      	addeq	r0, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	db05      	blt.n	80087e2 <__hi0bits+0x3a>
 80087d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80087da:	f100 0001 	add.w	r0, r0, #1
 80087de:	bf08      	it	eq
 80087e0:	2020      	moveq	r0, #32
 80087e2:	4770      	bx	lr
 80087e4:	2000      	movs	r0, #0
 80087e6:	e7e5      	b.n	80087b4 <__hi0bits+0xc>

080087e8 <__lo0bits>:
 80087e8:	6803      	ldr	r3, [r0, #0]
 80087ea:	4602      	mov	r2, r0
 80087ec:	f013 0007 	ands.w	r0, r3, #7
 80087f0:	d00b      	beq.n	800880a <__lo0bits+0x22>
 80087f2:	07d9      	lsls	r1, r3, #31
 80087f4:	d421      	bmi.n	800883a <__lo0bits+0x52>
 80087f6:	0798      	lsls	r0, r3, #30
 80087f8:	bf49      	itett	mi
 80087fa:	085b      	lsrmi	r3, r3, #1
 80087fc:	089b      	lsrpl	r3, r3, #2
 80087fe:	2001      	movmi	r0, #1
 8008800:	6013      	strmi	r3, [r2, #0]
 8008802:	bf5c      	itt	pl
 8008804:	2002      	movpl	r0, #2
 8008806:	6013      	strpl	r3, [r2, #0]
 8008808:	4770      	bx	lr
 800880a:	b299      	uxth	r1, r3
 800880c:	b909      	cbnz	r1, 8008812 <__lo0bits+0x2a>
 800880e:	2010      	movs	r0, #16
 8008810:	0c1b      	lsrs	r3, r3, #16
 8008812:	b2d9      	uxtb	r1, r3
 8008814:	b909      	cbnz	r1, 800881a <__lo0bits+0x32>
 8008816:	3008      	adds	r0, #8
 8008818:	0a1b      	lsrs	r3, r3, #8
 800881a:	0719      	lsls	r1, r3, #28
 800881c:	bf04      	itt	eq
 800881e:	091b      	lsreq	r3, r3, #4
 8008820:	3004      	addeq	r0, #4
 8008822:	0799      	lsls	r1, r3, #30
 8008824:	bf04      	itt	eq
 8008826:	089b      	lsreq	r3, r3, #2
 8008828:	3002      	addeq	r0, #2
 800882a:	07d9      	lsls	r1, r3, #31
 800882c:	d403      	bmi.n	8008836 <__lo0bits+0x4e>
 800882e:	085b      	lsrs	r3, r3, #1
 8008830:	f100 0001 	add.w	r0, r0, #1
 8008834:	d003      	beq.n	800883e <__lo0bits+0x56>
 8008836:	6013      	str	r3, [r2, #0]
 8008838:	4770      	bx	lr
 800883a:	2000      	movs	r0, #0
 800883c:	4770      	bx	lr
 800883e:	2020      	movs	r0, #32
 8008840:	4770      	bx	lr
	...

08008844 <__i2b>:
 8008844:	b510      	push	{r4, lr}
 8008846:	460c      	mov	r4, r1
 8008848:	2101      	movs	r1, #1
 800884a:	f7ff febb 	bl	80085c4 <_Balloc>
 800884e:	4602      	mov	r2, r0
 8008850:	b928      	cbnz	r0, 800885e <__i2b+0x1a>
 8008852:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008856:	4b04      	ldr	r3, [pc, #16]	; (8008868 <__i2b+0x24>)
 8008858:	4804      	ldr	r0, [pc, #16]	; (800886c <__i2b+0x28>)
 800885a:	f000 fdef 	bl	800943c <__assert_func>
 800885e:	2301      	movs	r3, #1
 8008860:	6144      	str	r4, [r0, #20]
 8008862:	6103      	str	r3, [r0, #16]
 8008864:	bd10      	pop	{r4, pc}
 8008866:	bf00      	nop
 8008868:	0800a2d8 	.word	0x0800a2d8
 800886c:	0800a364 	.word	0x0800a364

08008870 <__multiply>:
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	4691      	mov	r9, r2
 8008876:	690a      	ldr	r2, [r1, #16]
 8008878:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800887c:	460c      	mov	r4, r1
 800887e:	429a      	cmp	r2, r3
 8008880:	bfbe      	ittt	lt
 8008882:	460b      	movlt	r3, r1
 8008884:	464c      	movlt	r4, r9
 8008886:	4699      	movlt	r9, r3
 8008888:	6927      	ldr	r7, [r4, #16]
 800888a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	6861      	ldr	r1, [r4, #4]
 8008892:	eb07 060a 	add.w	r6, r7, sl
 8008896:	42b3      	cmp	r3, r6
 8008898:	b085      	sub	sp, #20
 800889a:	bfb8      	it	lt
 800889c:	3101      	addlt	r1, #1
 800889e:	f7ff fe91 	bl	80085c4 <_Balloc>
 80088a2:	b930      	cbnz	r0, 80088b2 <__multiply+0x42>
 80088a4:	4602      	mov	r2, r0
 80088a6:	f240 115d 	movw	r1, #349	; 0x15d
 80088aa:	4b43      	ldr	r3, [pc, #268]	; (80089b8 <__multiply+0x148>)
 80088ac:	4843      	ldr	r0, [pc, #268]	; (80089bc <__multiply+0x14c>)
 80088ae:	f000 fdc5 	bl	800943c <__assert_func>
 80088b2:	f100 0514 	add.w	r5, r0, #20
 80088b6:	462b      	mov	r3, r5
 80088b8:	2200      	movs	r2, #0
 80088ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088be:	4543      	cmp	r3, r8
 80088c0:	d321      	bcc.n	8008906 <__multiply+0x96>
 80088c2:	f104 0314 	add.w	r3, r4, #20
 80088c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80088ca:	f109 0314 	add.w	r3, r9, #20
 80088ce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80088d2:	9202      	str	r2, [sp, #8]
 80088d4:	1b3a      	subs	r2, r7, r4
 80088d6:	3a15      	subs	r2, #21
 80088d8:	f022 0203 	bic.w	r2, r2, #3
 80088dc:	3204      	adds	r2, #4
 80088de:	f104 0115 	add.w	r1, r4, #21
 80088e2:	428f      	cmp	r7, r1
 80088e4:	bf38      	it	cc
 80088e6:	2204      	movcc	r2, #4
 80088e8:	9201      	str	r2, [sp, #4]
 80088ea:	9a02      	ldr	r2, [sp, #8]
 80088ec:	9303      	str	r3, [sp, #12]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d80c      	bhi.n	800890c <__multiply+0x9c>
 80088f2:	2e00      	cmp	r6, #0
 80088f4:	dd03      	ble.n	80088fe <__multiply+0x8e>
 80088f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d059      	beq.n	80089b2 <__multiply+0x142>
 80088fe:	6106      	str	r6, [r0, #16]
 8008900:	b005      	add	sp, #20
 8008902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008906:	f843 2b04 	str.w	r2, [r3], #4
 800890a:	e7d8      	b.n	80088be <__multiply+0x4e>
 800890c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008910:	f1ba 0f00 	cmp.w	sl, #0
 8008914:	d023      	beq.n	800895e <__multiply+0xee>
 8008916:	46a9      	mov	r9, r5
 8008918:	f04f 0c00 	mov.w	ip, #0
 800891c:	f104 0e14 	add.w	lr, r4, #20
 8008920:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008924:	f8d9 1000 	ldr.w	r1, [r9]
 8008928:	fa1f fb82 	uxth.w	fp, r2
 800892c:	b289      	uxth	r1, r1
 800892e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008932:	4461      	add	r1, ip
 8008934:	f8d9 c000 	ldr.w	ip, [r9]
 8008938:	0c12      	lsrs	r2, r2, #16
 800893a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800893e:	fb0a c202 	mla	r2, sl, r2, ip
 8008942:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008946:	b289      	uxth	r1, r1
 8008948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800894c:	4577      	cmp	r7, lr
 800894e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008952:	f849 1b04 	str.w	r1, [r9], #4
 8008956:	d8e3      	bhi.n	8008920 <__multiply+0xb0>
 8008958:	9a01      	ldr	r2, [sp, #4]
 800895a:	f845 c002 	str.w	ip, [r5, r2]
 800895e:	9a03      	ldr	r2, [sp, #12]
 8008960:	3304      	adds	r3, #4
 8008962:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008966:	f1b9 0f00 	cmp.w	r9, #0
 800896a:	d020      	beq.n	80089ae <__multiply+0x13e>
 800896c:	46ae      	mov	lr, r5
 800896e:	f04f 0a00 	mov.w	sl, #0
 8008972:	6829      	ldr	r1, [r5, #0]
 8008974:	f104 0c14 	add.w	ip, r4, #20
 8008978:	f8bc b000 	ldrh.w	fp, [ip]
 800897c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008980:	b289      	uxth	r1, r1
 8008982:	fb09 220b 	mla	r2, r9, fp, r2
 8008986:	4492      	add	sl, r2
 8008988:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800898c:	f84e 1b04 	str.w	r1, [lr], #4
 8008990:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008994:	f8be 1000 	ldrh.w	r1, [lr]
 8008998:	0c12      	lsrs	r2, r2, #16
 800899a:	fb09 1102 	mla	r1, r9, r2, r1
 800899e:	4567      	cmp	r7, ip
 80089a0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80089a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089a8:	d8e6      	bhi.n	8008978 <__multiply+0x108>
 80089aa:	9a01      	ldr	r2, [sp, #4]
 80089ac:	50a9      	str	r1, [r5, r2]
 80089ae:	3504      	adds	r5, #4
 80089b0:	e79b      	b.n	80088ea <__multiply+0x7a>
 80089b2:	3e01      	subs	r6, #1
 80089b4:	e79d      	b.n	80088f2 <__multiply+0x82>
 80089b6:	bf00      	nop
 80089b8:	0800a2d8 	.word	0x0800a2d8
 80089bc:	0800a364 	.word	0x0800a364

080089c0 <__pow5mult>:
 80089c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c4:	4615      	mov	r5, r2
 80089c6:	f012 0203 	ands.w	r2, r2, #3
 80089ca:	4606      	mov	r6, r0
 80089cc:	460f      	mov	r7, r1
 80089ce:	d007      	beq.n	80089e0 <__pow5mult+0x20>
 80089d0:	4c25      	ldr	r4, [pc, #148]	; (8008a68 <__pow5mult+0xa8>)
 80089d2:	3a01      	subs	r2, #1
 80089d4:	2300      	movs	r3, #0
 80089d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089da:	f7ff fe55 	bl	8008688 <__multadd>
 80089de:	4607      	mov	r7, r0
 80089e0:	10ad      	asrs	r5, r5, #2
 80089e2:	d03d      	beq.n	8008a60 <__pow5mult+0xa0>
 80089e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089e6:	b97c      	cbnz	r4, 8008a08 <__pow5mult+0x48>
 80089e8:	2010      	movs	r0, #16
 80089ea:	f7ff fdb5 	bl	8008558 <malloc>
 80089ee:	4602      	mov	r2, r0
 80089f0:	6270      	str	r0, [r6, #36]	; 0x24
 80089f2:	b928      	cbnz	r0, 8008a00 <__pow5mult+0x40>
 80089f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089f8:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <__pow5mult+0xac>)
 80089fa:	481d      	ldr	r0, [pc, #116]	; (8008a70 <__pow5mult+0xb0>)
 80089fc:	f000 fd1e 	bl	800943c <__assert_func>
 8008a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a04:	6004      	str	r4, [r0, #0]
 8008a06:	60c4      	str	r4, [r0, #12]
 8008a08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a10:	b94c      	cbnz	r4, 8008a26 <__pow5mult+0x66>
 8008a12:	f240 2171 	movw	r1, #625	; 0x271
 8008a16:	4630      	mov	r0, r6
 8008a18:	f7ff ff14 	bl	8008844 <__i2b>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4604      	mov	r4, r0
 8008a20:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a24:	6003      	str	r3, [r0, #0]
 8008a26:	f04f 0900 	mov.w	r9, #0
 8008a2a:	07eb      	lsls	r3, r5, #31
 8008a2c:	d50a      	bpl.n	8008a44 <__pow5mult+0x84>
 8008a2e:	4639      	mov	r1, r7
 8008a30:	4622      	mov	r2, r4
 8008a32:	4630      	mov	r0, r6
 8008a34:	f7ff ff1c 	bl	8008870 <__multiply>
 8008a38:	4680      	mov	r8, r0
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f7ff fe01 	bl	8008644 <_Bfree>
 8008a42:	4647      	mov	r7, r8
 8008a44:	106d      	asrs	r5, r5, #1
 8008a46:	d00b      	beq.n	8008a60 <__pow5mult+0xa0>
 8008a48:	6820      	ldr	r0, [r4, #0]
 8008a4a:	b938      	cbnz	r0, 8008a5c <__pow5mult+0x9c>
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4630      	mov	r0, r6
 8008a52:	f7ff ff0d 	bl	8008870 <__multiply>
 8008a56:	6020      	str	r0, [r4, #0]
 8008a58:	f8c0 9000 	str.w	r9, [r0]
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	e7e4      	b.n	8008a2a <__pow5mult+0x6a>
 8008a60:	4638      	mov	r0, r7
 8008a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a66:	bf00      	nop
 8008a68:	0800a4b0 	.word	0x0800a4b0
 8008a6c:	0800a266 	.word	0x0800a266
 8008a70:	0800a364 	.word	0x0800a364

08008a74 <__lshift>:
 8008a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a78:	460c      	mov	r4, r1
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	4691      	mov	r9, r2
 8008a7e:	6923      	ldr	r3, [r4, #16]
 8008a80:	6849      	ldr	r1, [r1, #4]
 8008a82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a86:	68a3      	ldr	r3, [r4, #8]
 8008a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a8c:	f108 0601 	add.w	r6, r8, #1
 8008a90:	42b3      	cmp	r3, r6
 8008a92:	db0b      	blt.n	8008aac <__lshift+0x38>
 8008a94:	4638      	mov	r0, r7
 8008a96:	f7ff fd95 	bl	80085c4 <_Balloc>
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	b948      	cbnz	r0, 8008ab2 <__lshift+0x3e>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008aa4:	4b29      	ldr	r3, [pc, #164]	; (8008b4c <__lshift+0xd8>)
 8008aa6:	482a      	ldr	r0, [pc, #168]	; (8008b50 <__lshift+0xdc>)
 8008aa8:	f000 fcc8 	bl	800943c <__assert_func>
 8008aac:	3101      	adds	r1, #1
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	e7ee      	b.n	8008a90 <__lshift+0x1c>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f100 0114 	add.w	r1, r0, #20
 8008ab8:	f100 0210 	add.w	r2, r0, #16
 8008abc:	4618      	mov	r0, r3
 8008abe:	4553      	cmp	r3, sl
 8008ac0:	db37      	blt.n	8008b32 <__lshift+0xbe>
 8008ac2:	6920      	ldr	r0, [r4, #16]
 8008ac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ac8:	f104 0314 	add.w	r3, r4, #20
 8008acc:	f019 091f 	ands.w	r9, r9, #31
 8008ad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ad4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ad8:	d02f      	beq.n	8008b3a <__lshift+0xc6>
 8008ada:	468a      	mov	sl, r1
 8008adc:	f04f 0c00 	mov.w	ip, #0
 8008ae0:	f1c9 0e20 	rsb	lr, r9, #32
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	fa02 f209 	lsl.w	r2, r2, r9
 8008aea:	ea42 020c 	orr.w	r2, r2, ip
 8008aee:	f84a 2b04 	str.w	r2, [sl], #4
 8008af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af6:	4298      	cmp	r0, r3
 8008af8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008afc:	d8f2      	bhi.n	8008ae4 <__lshift+0x70>
 8008afe:	1b03      	subs	r3, r0, r4
 8008b00:	3b15      	subs	r3, #21
 8008b02:	f023 0303 	bic.w	r3, r3, #3
 8008b06:	3304      	adds	r3, #4
 8008b08:	f104 0215 	add.w	r2, r4, #21
 8008b0c:	4290      	cmp	r0, r2
 8008b0e:	bf38      	it	cc
 8008b10:	2304      	movcc	r3, #4
 8008b12:	f841 c003 	str.w	ip, [r1, r3]
 8008b16:	f1bc 0f00 	cmp.w	ip, #0
 8008b1a:	d001      	beq.n	8008b20 <__lshift+0xac>
 8008b1c:	f108 0602 	add.w	r6, r8, #2
 8008b20:	3e01      	subs	r6, #1
 8008b22:	4638      	mov	r0, r7
 8008b24:	4621      	mov	r1, r4
 8008b26:	612e      	str	r6, [r5, #16]
 8008b28:	f7ff fd8c 	bl	8008644 <_Bfree>
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b32:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b36:	3301      	adds	r3, #1
 8008b38:	e7c1      	b.n	8008abe <__lshift+0x4a>
 8008b3a:	3904      	subs	r1, #4
 8008b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b40:	4298      	cmp	r0, r3
 8008b42:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b46:	d8f9      	bhi.n	8008b3c <__lshift+0xc8>
 8008b48:	e7ea      	b.n	8008b20 <__lshift+0xac>
 8008b4a:	bf00      	nop
 8008b4c:	0800a2d8 	.word	0x0800a2d8
 8008b50:	0800a364 	.word	0x0800a364

08008b54 <__mcmp>:
 8008b54:	4603      	mov	r3, r0
 8008b56:	690a      	ldr	r2, [r1, #16]
 8008b58:	6900      	ldr	r0, [r0, #16]
 8008b5a:	b530      	push	{r4, r5, lr}
 8008b5c:	1a80      	subs	r0, r0, r2
 8008b5e:	d10d      	bne.n	8008b7c <__mcmp+0x28>
 8008b60:	3314      	adds	r3, #20
 8008b62:	3114      	adds	r1, #20
 8008b64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b74:	4295      	cmp	r5, r2
 8008b76:	d002      	beq.n	8008b7e <__mcmp+0x2a>
 8008b78:	d304      	bcc.n	8008b84 <__mcmp+0x30>
 8008b7a:	2001      	movs	r0, #1
 8008b7c:	bd30      	pop	{r4, r5, pc}
 8008b7e:	42a3      	cmp	r3, r4
 8008b80:	d3f4      	bcc.n	8008b6c <__mcmp+0x18>
 8008b82:	e7fb      	b.n	8008b7c <__mcmp+0x28>
 8008b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b88:	e7f8      	b.n	8008b7c <__mcmp+0x28>
	...

08008b8c <__mdiff>:
 8008b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b90:	460d      	mov	r5, r1
 8008b92:	4607      	mov	r7, r0
 8008b94:	4611      	mov	r1, r2
 8008b96:	4628      	mov	r0, r5
 8008b98:	4614      	mov	r4, r2
 8008b9a:	f7ff ffdb 	bl	8008b54 <__mcmp>
 8008b9e:	1e06      	subs	r6, r0, #0
 8008ba0:	d111      	bne.n	8008bc6 <__mdiff+0x3a>
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	f7ff fd0d 	bl	80085c4 <_Balloc>
 8008baa:	4602      	mov	r2, r0
 8008bac:	b928      	cbnz	r0, 8008bba <__mdiff+0x2e>
 8008bae:	f240 2132 	movw	r1, #562	; 0x232
 8008bb2:	4b3a      	ldr	r3, [pc, #232]	; (8008c9c <__mdiff+0x110>)
 8008bb4:	483a      	ldr	r0, [pc, #232]	; (8008ca0 <__mdiff+0x114>)
 8008bb6:	f000 fc41 	bl	800943c <__assert_func>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc6:	bfa4      	itt	ge
 8008bc8:	4623      	movge	r3, r4
 8008bca:	462c      	movge	r4, r5
 8008bcc:	4638      	mov	r0, r7
 8008bce:	6861      	ldr	r1, [r4, #4]
 8008bd0:	bfa6      	itte	ge
 8008bd2:	461d      	movge	r5, r3
 8008bd4:	2600      	movge	r6, #0
 8008bd6:	2601      	movlt	r6, #1
 8008bd8:	f7ff fcf4 	bl	80085c4 <_Balloc>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	b918      	cbnz	r0, 8008be8 <__mdiff+0x5c>
 8008be0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008be4:	4b2d      	ldr	r3, [pc, #180]	; (8008c9c <__mdiff+0x110>)
 8008be6:	e7e5      	b.n	8008bb4 <__mdiff+0x28>
 8008be8:	f102 0814 	add.w	r8, r2, #20
 8008bec:	46c2      	mov	sl, r8
 8008bee:	f04f 0c00 	mov.w	ip, #0
 8008bf2:	6927      	ldr	r7, [r4, #16]
 8008bf4:	60c6      	str	r6, [r0, #12]
 8008bf6:	692e      	ldr	r6, [r5, #16]
 8008bf8:	f104 0014 	add.w	r0, r4, #20
 8008bfc:	f105 0914 	add.w	r9, r5, #20
 8008c00:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008c04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c08:	3410      	adds	r4, #16
 8008c0a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008c0e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c12:	fa1f f18b 	uxth.w	r1, fp
 8008c16:	448c      	add	ip, r1
 8008c18:	b299      	uxth	r1, r3
 8008c1a:	0c1b      	lsrs	r3, r3, #16
 8008c1c:	ebac 0101 	sub.w	r1, ip, r1
 8008c20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c24:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008c28:	b289      	uxth	r1, r1
 8008c2a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008c2e:	454e      	cmp	r6, r9
 8008c30:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008c34:	f84a 3b04 	str.w	r3, [sl], #4
 8008c38:	d8e7      	bhi.n	8008c0a <__mdiff+0x7e>
 8008c3a:	1b73      	subs	r3, r6, r5
 8008c3c:	3b15      	subs	r3, #21
 8008c3e:	f023 0303 	bic.w	r3, r3, #3
 8008c42:	3515      	adds	r5, #21
 8008c44:	3304      	adds	r3, #4
 8008c46:	42ae      	cmp	r6, r5
 8008c48:	bf38      	it	cc
 8008c4a:	2304      	movcc	r3, #4
 8008c4c:	4418      	add	r0, r3
 8008c4e:	4443      	add	r3, r8
 8008c50:	461e      	mov	r6, r3
 8008c52:	4605      	mov	r5, r0
 8008c54:	4575      	cmp	r5, lr
 8008c56:	d30e      	bcc.n	8008c76 <__mdiff+0xea>
 8008c58:	f10e 0103 	add.w	r1, lr, #3
 8008c5c:	1a09      	subs	r1, r1, r0
 8008c5e:	f021 0103 	bic.w	r1, r1, #3
 8008c62:	3803      	subs	r0, #3
 8008c64:	4586      	cmp	lr, r0
 8008c66:	bf38      	it	cc
 8008c68:	2100      	movcc	r1, #0
 8008c6a:	4419      	add	r1, r3
 8008c6c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008c70:	b18b      	cbz	r3, 8008c96 <__mdiff+0x10a>
 8008c72:	6117      	str	r7, [r2, #16]
 8008c74:	e7a4      	b.n	8008bc0 <__mdiff+0x34>
 8008c76:	f855 8b04 	ldr.w	r8, [r5], #4
 8008c7a:	fa1f f188 	uxth.w	r1, r8
 8008c7e:	4461      	add	r1, ip
 8008c80:	140c      	asrs	r4, r1, #16
 8008c82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c86:	b289      	uxth	r1, r1
 8008c88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008c8c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008c90:	f846 1b04 	str.w	r1, [r6], #4
 8008c94:	e7de      	b.n	8008c54 <__mdiff+0xc8>
 8008c96:	3f01      	subs	r7, #1
 8008c98:	e7e8      	b.n	8008c6c <__mdiff+0xe0>
 8008c9a:	bf00      	nop
 8008c9c:	0800a2d8 	.word	0x0800a2d8
 8008ca0:	0800a364 	.word	0x0800a364

08008ca4 <__ulp>:
 8008ca4:	4b11      	ldr	r3, [pc, #68]	; (8008cec <__ulp+0x48>)
 8008ca6:	400b      	ands	r3, r1
 8008ca8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dd02      	ble.n	8008cb6 <__ulp+0x12>
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	4770      	bx	lr
 8008cb6:	425b      	negs	r3, r3
 8008cb8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008cbc:	f04f 0000 	mov.w	r0, #0
 8008cc0:	f04f 0100 	mov.w	r1, #0
 8008cc4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008cc8:	da04      	bge.n	8008cd4 <__ulp+0x30>
 8008cca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008cce:	fa43 f102 	asr.w	r1, r3, r2
 8008cd2:	4770      	bx	lr
 8008cd4:	f1a2 0314 	sub.w	r3, r2, #20
 8008cd8:	2b1e      	cmp	r3, #30
 8008cda:	bfd6      	itet	le
 8008cdc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008ce0:	2301      	movgt	r3, #1
 8008ce2:	fa22 f303 	lsrle.w	r3, r2, r3
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	7ff00000 	.word	0x7ff00000

08008cf0 <__b2d>:
 8008cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cf4:	6907      	ldr	r7, [r0, #16]
 8008cf6:	f100 0914 	add.w	r9, r0, #20
 8008cfa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008cfe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008d02:	f1a7 0804 	sub.w	r8, r7, #4
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7ff fd4e 	bl	80087a8 <__hi0bits>
 8008d0c:	f1c0 0320 	rsb	r3, r0, #32
 8008d10:	280a      	cmp	r0, #10
 8008d12:	600b      	str	r3, [r1, #0]
 8008d14:	491f      	ldr	r1, [pc, #124]	; (8008d94 <__b2d+0xa4>)
 8008d16:	dc17      	bgt.n	8008d48 <__b2d+0x58>
 8008d18:	45c1      	cmp	r9, r8
 8008d1a:	bf28      	it	cs
 8008d1c:	2200      	movcs	r2, #0
 8008d1e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008d22:	fa26 f30c 	lsr.w	r3, r6, ip
 8008d26:	bf38      	it	cc
 8008d28:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008d2c:	ea43 0501 	orr.w	r5, r3, r1
 8008d30:	f100 0315 	add.w	r3, r0, #21
 8008d34:	fa06 f303 	lsl.w	r3, r6, r3
 8008d38:	fa22 f20c 	lsr.w	r2, r2, ip
 8008d3c:	ea43 0402 	orr.w	r4, r3, r2
 8008d40:	4620      	mov	r0, r4
 8008d42:	4629      	mov	r1, r5
 8008d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d48:	45c1      	cmp	r9, r8
 8008d4a:	bf2e      	itee	cs
 8008d4c:	2200      	movcs	r2, #0
 8008d4e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008d52:	f1a7 0808 	subcc.w	r8, r7, #8
 8008d56:	f1b0 030b 	subs.w	r3, r0, #11
 8008d5a:	d016      	beq.n	8008d8a <__b2d+0x9a>
 8008d5c:	f1c3 0720 	rsb	r7, r3, #32
 8008d60:	fa22 f107 	lsr.w	r1, r2, r7
 8008d64:	45c8      	cmp	r8, r9
 8008d66:	fa06 f603 	lsl.w	r6, r6, r3
 8008d6a:	ea46 0601 	orr.w	r6, r6, r1
 8008d6e:	bf94      	ite	ls
 8008d70:	2100      	movls	r1, #0
 8008d72:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008d76:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008d7a:	fa02 f003 	lsl.w	r0, r2, r3
 8008d7e:	40f9      	lsrs	r1, r7
 8008d80:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008d84:	ea40 0401 	orr.w	r4, r0, r1
 8008d88:	e7da      	b.n	8008d40 <__b2d+0x50>
 8008d8a:	4614      	mov	r4, r2
 8008d8c:	ea46 0501 	orr.w	r5, r6, r1
 8008d90:	e7d6      	b.n	8008d40 <__b2d+0x50>
 8008d92:	bf00      	nop
 8008d94:	3ff00000 	.word	0x3ff00000

08008d98 <__d2b>:
 8008d98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008da2:	4690      	mov	r8, r2
 8008da4:	461d      	mov	r5, r3
 8008da6:	f7ff fc0d 	bl	80085c4 <_Balloc>
 8008daa:	4604      	mov	r4, r0
 8008dac:	b930      	cbnz	r0, 8008dbc <__d2b+0x24>
 8008dae:	4602      	mov	r2, r0
 8008db0:	f240 310a 	movw	r1, #778	; 0x30a
 8008db4:	4b24      	ldr	r3, [pc, #144]	; (8008e48 <__d2b+0xb0>)
 8008db6:	4825      	ldr	r0, [pc, #148]	; (8008e4c <__d2b+0xb4>)
 8008db8:	f000 fb40 	bl	800943c <__assert_func>
 8008dbc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008dc0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008dc4:	bb2d      	cbnz	r5, 8008e12 <__d2b+0x7a>
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	f1b8 0300 	subs.w	r3, r8, #0
 8008dcc:	d026      	beq.n	8008e1c <__d2b+0x84>
 8008dce:	4668      	mov	r0, sp
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	f7ff fd09 	bl	80087e8 <__lo0bits>
 8008dd6:	9900      	ldr	r1, [sp, #0]
 8008dd8:	b1f0      	cbz	r0, 8008e18 <__d2b+0x80>
 8008dda:	9a01      	ldr	r2, [sp, #4]
 8008ddc:	f1c0 0320 	rsb	r3, r0, #32
 8008de0:	fa02 f303 	lsl.w	r3, r2, r3
 8008de4:	430b      	orrs	r3, r1
 8008de6:	40c2      	lsrs	r2, r0
 8008de8:	6163      	str	r3, [r4, #20]
 8008dea:	9201      	str	r2, [sp, #4]
 8008dec:	9b01      	ldr	r3, [sp, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	bf14      	ite	ne
 8008df2:	2102      	movne	r1, #2
 8008df4:	2101      	moveq	r1, #1
 8008df6:	61a3      	str	r3, [r4, #24]
 8008df8:	6121      	str	r1, [r4, #16]
 8008dfa:	b1c5      	cbz	r5, 8008e2e <__d2b+0x96>
 8008dfc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e00:	4405      	add	r5, r0
 8008e02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e06:	603d      	str	r5, [r7, #0]
 8008e08:	6030      	str	r0, [r6, #0]
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	b002      	add	sp, #8
 8008e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e16:	e7d6      	b.n	8008dc6 <__d2b+0x2e>
 8008e18:	6161      	str	r1, [r4, #20]
 8008e1a:	e7e7      	b.n	8008dec <__d2b+0x54>
 8008e1c:	a801      	add	r0, sp, #4
 8008e1e:	f7ff fce3 	bl	80087e8 <__lo0bits>
 8008e22:	2101      	movs	r1, #1
 8008e24:	9b01      	ldr	r3, [sp, #4]
 8008e26:	6121      	str	r1, [r4, #16]
 8008e28:	6163      	str	r3, [r4, #20]
 8008e2a:	3020      	adds	r0, #32
 8008e2c:	e7e5      	b.n	8008dfa <__d2b+0x62>
 8008e2e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008e32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e36:	6038      	str	r0, [r7, #0]
 8008e38:	6918      	ldr	r0, [r3, #16]
 8008e3a:	f7ff fcb5 	bl	80087a8 <__hi0bits>
 8008e3e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008e42:	6031      	str	r1, [r6, #0]
 8008e44:	e7e1      	b.n	8008e0a <__d2b+0x72>
 8008e46:	bf00      	nop
 8008e48:	0800a2d8 	.word	0x0800a2d8
 8008e4c:	0800a364 	.word	0x0800a364

08008e50 <__ratio>:
 8008e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	4688      	mov	r8, r1
 8008e56:	4669      	mov	r1, sp
 8008e58:	4681      	mov	r9, r0
 8008e5a:	f7ff ff49 	bl	8008cf0 <__b2d>
 8008e5e:	460f      	mov	r7, r1
 8008e60:	4604      	mov	r4, r0
 8008e62:	460d      	mov	r5, r1
 8008e64:	4640      	mov	r0, r8
 8008e66:	a901      	add	r1, sp, #4
 8008e68:	f7ff ff42 	bl	8008cf0 <__b2d>
 8008e6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e70:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008e74:	468b      	mov	fp, r1
 8008e76:	eba3 0c02 	sub.w	ip, r3, r2
 8008e7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e7e:	1a9b      	subs	r3, r3, r2
 8008e80:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	bfd5      	itete	le
 8008e88:	460a      	movle	r2, r1
 8008e8a:	462a      	movgt	r2, r5
 8008e8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e90:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e94:	bfd8      	it	le
 8008e96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008e9a:	465b      	mov	r3, fp
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f7f7 fc5b 	bl	800075c <__aeabi_ddiv>
 8008ea6:	b003      	add	sp, #12
 8008ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008eac <__copybits>:
 8008eac:	3901      	subs	r1, #1
 8008eae:	b570      	push	{r4, r5, r6, lr}
 8008eb0:	1149      	asrs	r1, r1, #5
 8008eb2:	6914      	ldr	r4, [r2, #16]
 8008eb4:	3101      	adds	r1, #1
 8008eb6:	f102 0314 	add.w	r3, r2, #20
 8008eba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ebe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ec2:	1f05      	subs	r5, r0, #4
 8008ec4:	42a3      	cmp	r3, r4
 8008ec6:	d30c      	bcc.n	8008ee2 <__copybits+0x36>
 8008ec8:	1aa3      	subs	r3, r4, r2
 8008eca:	3b11      	subs	r3, #17
 8008ecc:	f023 0303 	bic.w	r3, r3, #3
 8008ed0:	3211      	adds	r2, #17
 8008ed2:	42a2      	cmp	r2, r4
 8008ed4:	bf88      	it	hi
 8008ed6:	2300      	movhi	r3, #0
 8008ed8:	4418      	add	r0, r3
 8008eda:	2300      	movs	r3, #0
 8008edc:	4288      	cmp	r0, r1
 8008ede:	d305      	bcc.n	8008eec <__copybits+0x40>
 8008ee0:	bd70      	pop	{r4, r5, r6, pc}
 8008ee2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008ee6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008eea:	e7eb      	b.n	8008ec4 <__copybits+0x18>
 8008eec:	f840 3b04 	str.w	r3, [r0], #4
 8008ef0:	e7f4      	b.n	8008edc <__copybits+0x30>

08008ef2 <__any_on>:
 8008ef2:	f100 0214 	add.w	r2, r0, #20
 8008ef6:	6900      	ldr	r0, [r0, #16]
 8008ef8:	114b      	asrs	r3, r1, #5
 8008efa:	4298      	cmp	r0, r3
 8008efc:	b510      	push	{r4, lr}
 8008efe:	db11      	blt.n	8008f24 <__any_on+0x32>
 8008f00:	dd0a      	ble.n	8008f18 <__any_on+0x26>
 8008f02:	f011 011f 	ands.w	r1, r1, #31
 8008f06:	d007      	beq.n	8008f18 <__any_on+0x26>
 8008f08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f0c:	fa24 f001 	lsr.w	r0, r4, r1
 8008f10:	fa00 f101 	lsl.w	r1, r0, r1
 8008f14:	428c      	cmp	r4, r1
 8008f16:	d10b      	bne.n	8008f30 <__any_on+0x3e>
 8008f18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d803      	bhi.n	8008f28 <__any_on+0x36>
 8008f20:	2000      	movs	r0, #0
 8008f22:	bd10      	pop	{r4, pc}
 8008f24:	4603      	mov	r3, r0
 8008f26:	e7f7      	b.n	8008f18 <__any_on+0x26>
 8008f28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	d0f5      	beq.n	8008f1c <__any_on+0x2a>
 8008f30:	2001      	movs	r0, #1
 8008f32:	e7f6      	b.n	8008f22 <__any_on+0x30>

08008f34 <_calloc_r>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	fba1 5402 	umull	r5, r4, r1, r2
 8008f3a:	b934      	cbnz	r4, 8008f4a <_calloc_r+0x16>
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	f000 f875 	bl	800902c <_malloc_r>
 8008f42:	4606      	mov	r6, r0
 8008f44:	b928      	cbnz	r0, 8008f52 <_calloc_r+0x1e>
 8008f46:	4630      	mov	r0, r6
 8008f48:	bd70      	pop	{r4, r5, r6, pc}
 8008f4a:	220c      	movs	r2, #12
 8008f4c:	2600      	movs	r6, #0
 8008f4e:	6002      	str	r2, [r0, #0]
 8008f50:	e7f9      	b.n	8008f46 <_calloc_r+0x12>
 8008f52:	462a      	mov	r2, r5
 8008f54:	4621      	mov	r1, r4
 8008f56:	f7fc fbf3 	bl	8005740 <memset>
 8008f5a:	e7f4      	b.n	8008f46 <_calloc_r+0x12>

08008f5c <_free_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4605      	mov	r5, r0
 8008f60:	2900      	cmp	r1, #0
 8008f62:	d040      	beq.n	8008fe6 <_free_r+0x8a>
 8008f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f68:	1f0c      	subs	r4, r1, #4
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	bfb8      	it	lt
 8008f6e:	18e4      	addlt	r4, r4, r3
 8008f70:	f000 faae 	bl	80094d0 <__malloc_lock>
 8008f74:	4a1c      	ldr	r2, [pc, #112]	; (8008fe8 <_free_r+0x8c>)
 8008f76:	6813      	ldr	r3, [r2, #0]
 8008f78:	b933      	cbnz	r3, 8008f88 <_free_r+0x2c>
 8008f7a:	6063      	str	r3, [r4, #4]
 8008f7c:	6014      	str	r4, [r2, #0]
 8008f7e:	4628      	mov	r0, r5
 8008f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f84:	f000 baaa 	b.w	80094dc <__malloc_unlock>
 8008f88:	42a3      	cmp	r3, r4
 8008f8a:	d908      	bls.n	8008f9e <_free_r+0x42>
 8008f8c:	6820      	ldr	r0, [r4, #0]
 8008f8e:	1821      	adds	r1, r4, r0
 8008f90:	428b      	cmp	r3, r1
 8008f92:	bf01      	itttt	eq
 8008f94:	6819      	ldreq	r1, [r3, #0]
 8008f96:	685b      	ldreq	r3, [r3, #4]
 8008f98:	1809      	addeq	r1, r1, r0
 8008f9a:	6021      	streq	r1, [r4, #0]
 8008f9c:	e7ed      	b.n	8008f7a <_free_r+0x1e>
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	b10b      	cbz	r3, 8008fa8 <_free_r+0x4c>
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	d9fa      	bls.n	8008f9e <_free_r+0x42>
 8008fa8:	6811      	ldr	r1, [r2, #0]
 8008faa:	1850      	adds	r0, r2, r1
 8008fac:	42a0      	cmp	r0, r4
 8008fae:	d10b      	bne.n	8008fc8 <_free_r+0x6c>
 8008fb0:	6820      	ldr	r0, [r4, #0]
 8008fb2:	4401      	add	r1, r0
 8008fb4:	1850      	adds	r0, r2, r1
 8008fb6:	4283      	cmp	r3, r0
 8008fb8:	6011      	str	r1, [r2, #0]
 8008fba:	d1e0      	bne.n	8008f7e <_free_r+0x22>
 8008fbc:	6818      	ldr	r0, [r3, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	4401      	add	r1, r0
 8008fc2:	6011      	str	r1, [r2, #0]
 8008fc4:	6053      	str	r3, [r2, #4]
 8008fc6:	e7da      	b.n	8008f7e <_free_r+0x22>
 8008fc8:	d902      	bls.n	8008fd0 <_free_r+0x74>
 8008fca:	230c      	movs	r3, #12
 8008fcc:	602b      	str	r3, [r5, #0]
 8008fce:	e7d6      	b.n	8008f7e <_free_r+0x22>
 8008fd0:	6820      	ldr	r0, [r4, #0]
 8008fd2:	1821      	adds	r1, r4, r0
 8008fd4:	428b      	cmp	r3, r1
 8008fd6:	bf01      	itttt	eq
 8008fd8:	6819      	ldreq	r1, [r3, #0]
 8008fda:	685b      	ldreq	r3, [r3, #4]
 8008fdc:	1809      	addeq	r1, r1, r0
 8008fde:	6021      	streq	r1, [r4, #0]
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	6054      	str	r4, [r2, #4]
 8008fe4:	e7cb      	b.n	8008f7e <_free_r+0x22>
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	20000374 	.word	0x20000374

08008fec <sbrk_aligned>:
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	4e0e      	ldr	r6, [pc, #56]	; (8009028 <sbrk_aligned+0x3c>)
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	6831      	ldr	r1, [r6, #0]
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	b911      	cbnz	r1, 8008ffe <sbrk_aligned+0x12>
 8008ff8:	f000 f9ee 	bl	80093d8 <_sbrk_r>
 8008ffc:	6030      	str	r0, [r6, #0]
 8008ffe:	4621      	mov	r1, r4
 8009000:	4628      	mov	r0, r5
 8009002:	f000 f9e9 	bl	80093d8 <_sbrk_r>
 8009006:	1c43      	adds	r3, r0, #1
 8009008:	d00a      	beq.n	8009020 <sbrk_aligned+0x34>
 800900a:	1cc4      	adds	r4, r0, #3
 800900c:	f024 0403 	bic.w	r4, r4, #3
 8009010:	42a0      	cmp	r0, r4
 8009012:	d007      	beq.n	8009024 <sbrk_aligned+0x38>
 8009014:	1a21      	subs	r1, r4, r0
 8009016:	4628      	mov	r0, r5
 8009018:	f000 f9de 	bl	80093d8 <_sbrk_r>
 800901c:	3001      	adds	r0, #1
 800901e:	d101      	bne.n	8009024 <sbrk_aligned+0x38>
 8009020:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009024:	4620      	mov	r0, r4
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	20000378 	.word	0x20000378

0800902c <_malloc_r>:
 800902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009030:	1ccd      	adds	r5, r1, #3
 8009032:	f025 0503 	bic.w	r5, r5, #3
 8009036:	3508      	adds	r5, #8
 8009038:	2d0c      	cmp	r5, #12
 800903a:	bf38      	it	cc
 800903c:	250c      	movcc	r5, #12
 800903e:	2d00      	cmp	r5, #0
 8009040:	4607      	mov	r7, r0
 8009042:	db01      	blt.n	8009048 <_malloc_r+0x1c>
 8009044:	42a9      	cmp	r1, r5
 8009046:	d905      	bls.n	8009054 <_malloc_r+0x28>
 8009048:	230c      	movs	r3, #12
 800904a:	2600      	movs	r6, #0
 800904c:	603b      	str	r3, [r7, #0]
 800904e:	4630      	mov	r0, r6
 8009050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009054:	4e2e      	ldr	r6, [pc, #184]	; (8009110 <_malloc_r+0xe4>)
 8009056:	f000 fa3b 	bl	80094d0 <__malloc_lock>
 800905a:	6833      	ldr	r3, [r6, #0]
 800905c:	461c      	mov	r4, r3
 800905e:	bb34      	cbnz	r4, 80090ae <_malloc_r+0x82>
 8009060:	4629      	mov	r1, r5
 8009062:	4638      	mov	r0, r7
 8009064:	f7ff ffc2 	bl	8008fec <sbrk_aligned>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	4604      	mov	r4, r0
 800906c:	d14d      	bne.n	800910a <_malloc_r+0xde>
 800906e:	6834      	ldr	r4, [r6, #0]
 8009070:	4626      	mov	r6, r4
 8009072:	2e00      	cmp	r6, #0
 8009074:	d140      	bne.n	80090f8 <_malloc_r+0xcc>
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	4631      	mov	r1, r6
 800907a:	4638      	mov	r0, r7
 800907c:	eb04 0803 	add.w	r8, r4, r3
 8009080:	f000 f9aa 	bl	80093d8 <_sbrk_r>
 8009084:	4580      	cmp	r8, r0
 8009086:	d13a      	bne.n	80090fe <_malloc_r+0xd2>
 8009088:	6821      	ldr	r1, [r4, #0]
 800908a:	3503      	adds	r5, #3
 800908c:	1a6d      	subs	r5, r5, r1
 800908e:	f025 0503 	bic.w	r5, r5, #3
 8009092:	3508      	adds	r5, #8
 8009094:	2d0c      	cmp	r5, #12
 8009096:	bf38      	it	cc
 8009098:	250c      	movcc	r5, #12
 800909a:	4638      	mov	r0, r7
 800909c:	4629      	mov	r1, r5
 800909e:	f7ff ffa5 	bl	8008fec <sbrk_aligned>
 80090a2:	3001      	adds	r0, #1
 80090a4:	d02b      	beq.n	80090fe <_malloc_r+0xd2>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	442b      	add	r3, r5
 80090aa:	6023      	str	r3, [r4, #0]
 80090ac:	e00e      	b.n	80090cc <_malloc_r+0xa0>
 80090ae:	6822      	ldr	r2, [r4, #0]
 80090b0:	1b52      	subs	r2, r2, r5
 80090b2:	d41e      	bmi.n	80090f2 <_malloc_r+0xc6>
 80090b4:	2a0b      	cmp	r2, #11
 80090b6:	d916      	bls.n	80090e6 <_malloc_r+0xba>
 80090b8:	1961      	adds	r1, r4, r5
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	6025      	str	r5, [r4, #0]
 80090be:	bf18      	it	ne
 80090c0:	6059      	strne	r1, [r3, #4]
 80090c2:	6863      	ldr	r3, [r4, #4]
 80090c4:	bf08      	it	eq
 80090c6:	6031      	streq	r1, [r6, #0]
 80090c8:	5162      	str	r2, [r4, r5]
 80090ca:	604b      	str	r3, [r1, #4]
 80090cc:	4638      	mov	r0, r7
 80090ce:	f104 060b 	add.w	r6, r4, #11
 80090d2:	f000 fa03 	bl	80094dc <__malloc_unlock>
 80090d6:	f026 0607 	bic.w	r6, r6, #7
 80090da:	1d23      	adds	r3, r4, #4
 80090dc:	1af2      	subs	r2, r6, r3
 80090de:	d0b6      	beq.n	800904e <_malloc_r+0x22>
 80090e0:	1b9b      	subs	r3, r3, r6
 80090e2:	50a3      	str	r3, [r4, r2]
 80090e4:	e7b3      	b.n	800904e <_malloc_r+0x22>
 80090e6:	6862      	ldr	r2, [r4, #4]
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	bf0c      	ite	eq
 80090ec:	6032      	streq	r2, [r6, #0]
 80090ee:	605a      	strne	r2, [r3, #4]
 80090f0:	e7ec      	b.n	80090cc <_malloc_r+0xa0>
 80090f2:	4623      	mov	r3, r4
 80090f4:	6864      	ldr	r4, [r4, #4]
 80090f6:	e7b2      	b.n	800905e <_malloc_r+0x32>
 80090f8:	4634      	mov	r4, r6
 80090fa:	6876      	ldr	r6, [r6, #4]
 80090fc:	e7b9      	b.n	8009072 <_malloc_r+0x46>
 80090fe:	230c      	movs	r3, #12
 8009100:	4638      	mov	r0, r7
 8009102:	603b      	str	r3, [r7, #0]
 8009104:	f000 f9ea 	bl	80094dc <__malloc_unlock>
 8009108:	e7a1      	b.n	800904e <_malloc_r+0x22>
 800910a:	6025      	str	r5, [r4, #0]
 800910c:	e7de      	b.n	80090cc <_malloc_r+0xa0>
 800910e:	bf00      	nop
 8009110:	20000374 	.word	0x20000374

08009114 <__ssputs_r>:
 8009114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009118:	688e      	ldr	r6, [r1, #8]
 800911a:	4682      	mov	sl, r0
 800911c:	429e      	cmp	r6, r3
 800911e:	460c      	mov	r4, r1
 8009120:	4690      	mov	r8, r2
 8009122:	461f      	mov	r7, r3
 8009124:	d838      	bhi.n	8009198 <__ssputs_r+0x84>
 8009126:	898a      	ldrh	r2, [r1, #12]
 8009128:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800912c:	d032      	beq.n	8009194 <__ssputs_r+0x80>
 800912e:	6825      	ldr	r5, [r4, #0]
 8009130:	6909      	ldr	r1, [r1, #16]
 8009132:	3301      	adds	r3, #1
 8009134:	eba5 0901 	sub.w	r9, r5, r1
 8009138:	6965      	ldr	r5, [r4, #20]
 800913a:	444b      	add	r3, r9
 800913c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009144:	106d      	asrs	r5, r5, #1
 8009146:	429d      	cmp	r5, r3
 8009148:	bf38      	it	cc
 800914a:	461d      	movcc	r5, r3
 800914c:	0553      	lsls	r3, r2, #21
 800914e:	d531      	bpl.n	80091b4 <__ssputs_r+0xa0>
 8009150:	4629      	mov	r1, r5
 8009152:	f7ff ff6b 	bl	800902c <_malloc_r>
 8009156:	4606      	mov	r6, r0
 8009158:	b950      	cbnz	r0, 8009170 <__ssputs_r+0x5c>
 800915a:	230c      	movs	r3, #12
 800915c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009160:	f8ca 3000 	str.w	r3, [sl]
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009170:	464a      	mov	r2, r9
 8009172:	6921      	ldr	r1, [r4, #16]
 8009174:	f7ff fa18 	bl	80085a8 <memcpy>
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800917e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	6126      	str	r6, [r4, #16]
 8009186:	444e      	add	r6, r9
 8009188:	6026      	str	r6, [r4, #0]
 800918a:	463e      	mov	r6, r7
 800918c:	6165      	str	r5, [r4, #20]
 800918e:	eba5 0509 	sub.w	r5, r5, r9
 8009192:	60a5      	str	r5, [r4, #8]
 8009194:	42be      	cmp	r6, r7
 8009196:	d900      	bls.n	800919a <__ssputs_r+0x86>
 8009198:	463e      	mov	r6, r7
 800919a:	4632      	mov	r2, r6
 800919c:	4641      	mov	r1, r8
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	f000 f97c 	bl	800949c <memmove>
 80091a4:	68a3      	ldr	r3, [r4, #8]
 80091a6:	2000      	movs	r0, #0
 80091a8:	1b9b      	subs	r3, r3, r6
 80091aa:	60a3      	str	r3, [r4, #8]
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	4433      	add	r3, r6
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	e7db      	b.n	800916c <__ssputs_r+0x58>
 80091b4:	462a      	mov	r2, r5
 80091b6:	f000 f997 	bl	80094e8 <_realloc_r>
 80091ba:	4606      	mov	r6, r0
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1e1      	bne.n	8009184 <__ssputs_r+0x70>
 80091c0:	4650      	mov	r0, sl
 80091c2:	6921      	ldr	r1, [r4, #16]
 80091c4:	f7ff feca 	bl	8008f5c <_free_r>
 80091c8:	e7c7      	b.n	800915a <__ssputs_r+0x46>
	...

080091cc <_svfiprintf_r>:
 80091cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	4698      	mov	r8, r3
 80091d2:	898b      	ldrh	r3, [r1, #12]
 80091d4:	4607      	mov	r7, r0
 80091d6:	061b      	lsls	r3, r3, #24
 80091d8:	460d      	mov	r5, r1
 80091da:	4614      	mov	r4, r2
 80091dc:	b09d      	sub	sp, #116	; 0x74
 80091de:	d50e      	bpl.n	80091fe <_svfiprintf_r+0x32>
 80091e0:	690b      	ldr	r3, [r1, #16]
 80091e2:	b963      	cbnz	r3, 80091fe <_svfiprintf_r+0x32>
 80091e4:	2140      	movs	r1, #64	; 0x40
 80091e6:	f7ff ff21 	bl	800902c <_malloc_r>
 80091ea:	6028      	str	r0, [r5, #0]
 80091ec:	6128      	str	r0, [r5, #16]
 80091ee:	b920      	cbnz	r0, 80091fa <_svfiprintf_r+0x2e>
 80091f0:	230c      	movs	r3, #12
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091f8:	e0d1      	b.n	800939e <_svfiprintf_r+0x1d2>
 80091fa:	2340      	movs	r3, #64	; 0x40
 80091fc:	616b      	str	r3, [r5, #20]
 80091fe:	2300      	movs	r3, #0
 8009200:	9309      	str	r3, [sp, #36]	; 0x24
 8009202:	2320      	movs	r3, #32
 8009204:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009208:	2330      	movs	r3, #48	; 0x30
 800920a:	f04f 0901 	mov.w	r9, #1
 800920e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009212:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093b8 <_svfiprintf_r+0x1ec>
 8009216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800921a:	4623      	mov	r3, r4
 800921c:	469a      	mov	sl, r3
 800921e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009222:	b10a      	cbz	r2, 8009228 <_svfiprintf_r+0x5c>
 8009224:	2a25      	cmp	r2, #37	; 0x25
 8009226:	d1f9      	bne.n	800921c <_svfiprintf_r+0x50>
 8009228:	ebba 0b04 	subs.w	fp, sl, r4
 800922c:	d00b      	beq.n	8009246 <_svfiprintf_r+0x7a>
 800922e:	465b      	mov	r3, fp
 8009230:	4622      	mov	r2, r4
 8009232:	4629      	mov	r1, r5
 8009234:	4638      	mov	r0, r7
 8009236:	f7ff ff6d 	bl	8009114 <__ssputs_r>
 800923a:	3001      	adds	r0, #1
 800923c:	f000 80aa 	beq.w	8009394 <_svfiprintf_r+0x1c8>
 8009240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009242:	445a      	add	r2, fp
 8009244:	9209      	str	r2, [sp, #36]	; 0x24
 8009246:	f89a 3000 	ldrb.w	r3, [sl]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 80a2 	beq.w	8009394 <_svfiprintf_r+0x1c8>
 8009250:	2300      	movs	r3, #0
 8009252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800925a:	f10a 0a01 	add.w	sl, sl, #1
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	9307      	str	r3, [sp, #28]
 8009262:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009266:	931a      	str	r3, [sp, #104]	; 0x68
 8009268:	4654      	mov	r4, sl
 800926a:	2205      	movs	r2, #5
 800926c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009270:	4851      	ldr	r0, [pc, #324]	; (80093b8 <_svfiprintf_r+0x1ec>)
 8009272:	f7ff f98b 	bl	800858c <memchr>
 8009276:	9a04      	ldr	r2, [sp, #16]
 8009278:	b9d8      	cbnz	r0, 80092b2 <_svfiprintf_r+0xe6>
 800927a:	06d0      	lsls	r0, r2, #27
 800927c:	bf44      	itt	mi
 800927e:	2320      	movmi	r3, #32
 8009280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009284:	0711      	lsls	r1, r2, #28
 8009286:	bf44      	itt	mi
 8009288:	232b      	movmi	r3, #43	; 0x2b
 800928a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800928e:	f89a 3000 	ldrb.w	r3, [sl]
 8009292:	2b2a      	cmp	r3, #42	; 0x2a
 8009294:	d015      	beq.n	80092c2 <_svfiprintf_r+0xf6>
 8009296:	4654      	mov	r4, sl
 8009298:	2000      	movs	r0, #0
 800929a:	f04f 0c0a 	mov.w	ip, #10
 800929e:	9a07      	ldr	r2, [sp, #28]
 80092a0:	4621      	mov	r1, r4
 80092a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092a6:	3b30      	subs	r3, #48	; 0x30
 80092a8:	2b09      	cmp	r3, #9
 80092aa:	d94e      	bls.n	800934a <_svfiprintf_r+0x17e>
 80092ac:	b1b0      	cbz	r0, 80092dc <_svfiprintf_r+0x110>
 80092ae:	9207      	str	r2, [sp, #28]
 80092b0:	e014      	b.n	80092dc <_svfiprintf_r+0x110>
 80092b2:	eba0 0308 	sub.w	r3, r0, r8
 80092b6:	fa09 f303 	lsl.w	r3, r9, r3
 80092ba:	4313      	orrs	r3, r2
 80092bc:	46a2      	mov	sl, r4
 80092be:	9304      	str	r3, [sp, #16]
 80092c0:	e7d2      	b.n	8009268 <_svfiprintf_r+0x9c>
 80092c2:	9b03      	ldr	r3, [sp, #12]
 80092c4:	1d19      	adds	r1, r3, #4
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	9103      	str	r1, [sp, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bfbb      	ittet	lt
 80092ce:	425b      	neglt	r3, r3
 80092d0:	f042 0202 	orrlt.w	r2, r2, #2
 80092d4:	9307      	strge	r3, [sp, #28]
 80092d6:	9307      	strlt	r3, [sp, #28]
 80092d8:	bfb8      	it	lt
 80092da:	9204      	strlt	r2, [sp, #16]
 80092dc:	7823      	ldrb	r3, [r4, #0]
 80092de:	2b2e      	cmp	r3, #46	; 0x2e
 80092e0:	d10c      	bne.n	80092fc <_svfiprintf_r+0x130>
 80092e2:	7863      	ldrb	r3, [r4, #1]
 80092e4:	2b2a      	cmp	r3, #42	; 0x2a
 80092e6:	d135      	bne.n	8009354 <_svfiprintf_r+0x188>
 80092e8:	9b03      	ldr	r3, [sp, #12]
 80092ea:	3402      	adds	r4, #2
 80092ec:	1d1a      	adds	r2, r3, #4
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	9203      	str	r2, [sp, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	bfb8      	it	lt
 80092f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80093bc <_svfiprintf_r+0x1f0>
 8009300:	2203      	movs	r2, #3
 8009302:	4650      	mov	r0, sl
 8009304:	7821      	ldrb	r1, [r4, #0]
 8009306:	f7ff f941 	bl	800858c <memchr>
 800930a:	b140      	cbz	r0, 800931e <_svfiprintf_r+0x152>
 800930c:	2340      	movs	r3, #64	; 0x40
 800930e:	eba0 000a 	sub.w	r0, r0, sl
 8009312:	fa03 f000 	lsl.w	r0, r3, r0
 8009316:	9b04      	ldr	r3, [sp, #16]
 8009318:	3401      	adds	r4, #1
 800931a:	4303      	orrs	r3, r0
 800931c:	9304      	str	r3, [sp, #16]
 800931e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009322:	2206      	movs	r2, #6
 8009324:	4826      	ldr	r0, [pc, #152]	; (80093c0 <_svfiprintf_r+0x1f4>)
 8009326:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800932a:	f7ff f92f 	bl	800858c <memchr>
 800932e:	2800      	cmp	r0, #0
 8009330:	d038      	beq.n	80093a4 <_svfiprintf_r+0x1d8>
 8009332:	4b24      	ldr	r3, [pc, #144]	; (80093c4 <_svfiprintf_r+0x1f8>)
 8009334:	bb1b      	cbnz	r3, 800937e <_svfiprintf_r+0x1b2>
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	3307      	adds	r3, #7
 800933a:	f023 0307 	bic.w	r3, r3, #7
 800933e:	3308      	adds	r3, #8
 8009340:	9303      	str	r3, [sp, #12]
 8009342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009344:	4433      	add	r3, r6
 8009346:	9309      	str	r3, [sp, #36]	; 0x24
 8009348:	e767      	b.n	800921a <_svfiprintf_r+0x4e>
 800934a:	460c      	mov	r4, r1
 800934c:	2001      	movs	r0, #1
 800934e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009352:	e7a5      	b.n	80092a0 <_svfiprintf_r+0xd4>
 8009354:	2300      	movs	r3, #0
 8009356:	f04f 0c0a 	mov.w	ip, #10
 800935a:	4619      	mov	r1, r3
 800935c:	3401      	adds	r4, #1
 800935e:	9305      	str	r3, [sp, #20]
 8009360:	4620      	mov	r0, r4
 8009362:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009366:	3a30      	subs	r2, #48	; 0x30
 8009368:	2a09      	cmp	r2, #9
 800936a:	d903      	bls.n	8009374 <_svfiprintf_r+0x1a8>
 800936c:	2b00      	cmp	r3, #0
 800936e:	d0c5      	beq.n	80092fc <_svfiprintf_r+0x130>
 8009370:	9105      	str	r1, [sp, #20]
 8009372:	e7c3      	b.n	80092fc <_svfiprintf_r+0x130>
 8009374:	4604      	mov	r4, r0
 8009376:	2301      	movs	r3, #1
 8009378:	fb0c 2101 	mla	r1, ip, r1, r2
 800937c:	e7f0      	b.n	8009360 <_svfiprintf_r+0x194>
 800937e:	ab03      	add	r3, sp, #12
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	462a      	mov	r2, r5
 8009384:	4638      	mov	r0, r7
 8009386:	4b10      	ldr	r3, [pc, #64]	; (80093c8 <_svfiprintf_r+0x1fc>)
 8009388:	a904      	add	r1, sp, #16
 800938a:	f7fc fa7f 	bl	800588c <_printf_float>
 800938e:	1c42      	adds	r2, r0, #1
 8009390:	4606      	mov	r6, r0
 8009392:	d1d6      	bne.n	8009342 <_svfiprintf_r+0x176>
 8009394:	89ab      	ldrh	r3, [r5, #12]
 8009396:	065b      	lsls	r3, r3, #25
 8009398:	f53f af2c 	bmi.w	80091f4 <_svfiprintf_r+0x28>
 800939c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800939e:	b01d      	add	sp, #116	; 0x74
 80093a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a4:	ab03      	add	r3, sp, #12
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	462a      	mov	r2, r5
 80093aa:	4638      	mov	r0, r7
 80093ac:	4b06      	ldr	r3, [pc, #24]	; (80093c8 <_svfiprintf_r+0x1fc>)
 80093ae:	a904      	add	r1, sp, #16
 80093b0:	f7fc fd08 	bl	8005dc4 <_printf_i>
 80093b4:	e7eb      	b.n	800938e <_svfiprintf_r+0x1c2>
 80093b6:	bf00      	nop
 80093b8:	0800a4bc 	.word	0x0800a4bc
 80093bc:	0800a4c2 	.word	0x0800a4c2
 80093c0:	0800a4c6 	.word	0x0800a4c6
 80093c4:	0800588d 	.word	0x0800588d
 80093c8:	08009115 	.word	0x08009115

080093cc <nan>:
 80093cc:	2000      	movs	r0, #0
 80093ce:	4901      	ldr	r1, [pc, #4]	; (80093d4 <nan+0x8>)
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	7ff80000 	.word	0x7ff80000

080093d8 <_sbrk_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	2300      	movs	r3, #0
 80093dc:	4d05      	ldr	r5, [pc, #20]	; (80093f4 <_sbrk_r+0x1c>)
 80093de:	4604      	mov	r4, r0
 80093e0:	4608      	mov	r0, r1
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	f7f8 fd32 	bl	8001e4c <_sbrk>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d102      	bne.n	80093f2 <_sbrk_r+0x1a>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	b103      	cbz	r3, 80093f2 <_sbrk_r+0x1a>
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
 80093f4:	2000037c 	.word	0x2000037c

080093f8 <strncmp>:
 80093f8:	4603      	mov	r3, r0
 80093fa:	b510      	push	{r4, lr}
 80093fc:	b172      	cbz	r2, 800941c <strncmp+0x24>
 80093fe:	3901      	subs	r1, #1
 8009400:	1884      	adds	r4, r0, r2
 8009402:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009406:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800940a:	4290      	cmp	r0, r2
 800940c:	d101      	bne.n	8009412 <strncmp+0x1a>
 800940e:	42a3      	cmp	r3, r4
 8009410:	d101      	bne.n	8009416 <strncmp+0x1e>
 8009412:	1a80      	subs	r0, r0, r2
 8009414:	bd10      	pop	{r4, pc}
 8009416:	2800      	cmp	r0, #0
 8009418:	d1f3      	bne.n	8009402 <strncmp+0xa>
 800941a:	e7fa      	b.n	8009412 <strncmp+0x1a>
 800941c:	4610      	mov	r0, r2
 800941e:	e7f9      	b.n	8009414 <strncmp+0x1c>

08009420 <__ascii_wctomb>:
 8009420:	4603      	mov	r3, r0
 8009422:	4608      	mov	r0, r1
 8009424:	b141      	cbz	r1, 8009438 <__ascii_wctomb+0x18>
 8009426:	2aff      	cmp	r2, #255	; 0xff
 8009428:	d904      	bls.n	8009434 <__ascii_wctomb+0x14>
 800942a:	228a      	movs	r2, #138	; 0x8a
 800942c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	4770      	bx	lr
 8009434:	2001      	movs	r0, #1
 8009436:	700a      	strb	r2, [r1, #0]
 8009438:	4770      	bx	lr
	...

0800943c <__assert_func>:
 800943c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800943e:	4614      	mov	r4, r2
 8009440:	461a      	mov	r2, r3
 8009442:	4b09      	ldr	r3, [pc, #36]	; (8009468 <__assert_func+0x2c>)
 8009444:	4605      	mov	r5, r0
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68d8      	ldr	r0, [r3, #12]
 800944a:	b14c      	cbz	r4, 8009460 <__assert_func+0x24>
 800944c:	4b07      	ldr	r3, [pc, #28]	; (800946c <__assert_func+0x30>)
 800944e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009452:	9100      	str	r1, [sp, #0]
 8009454:	462b      	mov	r3, r5
 8009456:	4906      	ldr	r1, [pc, #24]	; (8009470 <__assert_func+0x34>)
 8009458:	f000 f80e 	bl	8009478 <fiprintf>
 800945c:	f000 fa8a 	bl	8009974 <abort>
 8009460:	4b04      	ldr	r3, [pc, #16]	; (8009474 <__assert_func+0x38>)
 8009462:	461c      	mov	r4, r3
 8009464:	e7f3      	b.n	800944e <__assert_func+0x12>
 8009466:	bf00      	nop
 8009468:	2000000c 	.word	0x2000000c
 800946c:	0800a4cd 	.word	0x0800a4cd
 8009470:	0800a4da 	.word	0x0800a4da
 8009474:	0800a508 	.word	0x0800a508

08009478 <fiprintf>:
 8009478:	b40e      	push	{r1, r2, r3}
 800947a:	b503      	push	{r0, r1, lr}
 800947c:	4601      	mov	r1, r0
 800947e:	ab03      	add	r3, sp, #12
 8009480:	4805      	ldr	r0, [pc, #20]	; (8009498 <fiprintf+0x20>)
 8009482:	f853 2b04 	ldr.w	r2, [r3], #4
 8009486:	6800      	ldr	r0, [r0, #0]
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	f000 f883 	bl	8009594 <_vfiprintf_r>
 800948e:	b002      	add	sp, #8
 8009490:	f85d eb04 	ldr.w	lr, [sp], #4
 8009494:	b003      	add	sp, #12
 8009496:	4770      	bx	lr
 8009498:	2000000c 	.word	0x2000000c

0800949c <memmove>:
 800949c:	4288      	cmp	r0, r1
 800949e:	b510      	push	{r4, lr}
 80094a0:	eb01 0402 	add.w	r4, r1, r2
 80094a4:	d902      	bls.n	80094ac <memmove+0x10>
 80094a6:	4284      	cmp	r4, r0
 80094a8:	4623      	mov	r3, r4
 80094aa:	d807      	bhi.n	80094bc <memmove+0x20>
 80094ac:	1e43      	subs	r3, r0, #1
 80094ae:	42a1      	cmp	r1, r4
 80094b0:	d008      	beq.n	80094c4 <memmove+0x28>
 80094b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ba:	e7f8      	b.n	80094ae <memmove+0x12>
 80094bc:	4601      	mov	r1, r0
 80094be:	4402      	add	r2, r0
 80094c0:	428a      	cmp	r2, r1
 80094c2:	d100      	bne.n	80094c6 <memmove+0x2a>
 80094c4:	bd10      	pop	{r4, pc}
 80094c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ce:	e7f7      	b.n	80094c0 <memmove+0x24>

080094d0 <__malloc_lock>:
 80094d0:	4801      	ldr	r0, [pc, #4]	; (80094d8 <__malloc_lock+0x8>)
 80094d2:	f000 bc0b 	b.w	8009cec <__retarget_lock_acquire_recursive>
 80094d6:	bf00      	nop
 80094d8:	20000380 	.word	0x20000380

080094dc <__malloc_unlock>:
 80094dc:	4801      	ldr	r0, [pc, #4]	; (80094e4 <__malloc_unlock+0x8>)
 80094de:	f000 bc06 	b.w	8009cee <__retarget_lock_release_recursive>
 80094e2:	bf00      	nop
 80094e4:	20000380 	.word	0x20000380

080094e8 <_realloc_r>:
 80094e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ec:	4680      	mov	r8, r0
 80094ee:	4614      	mov	r4, r2
 80094f0:	460e      	mov	r6, r1
 80094f2:	b921      	cbnz	r1, 80094fe <_realloc_r+0x16>
 80094f4:	4611      	mov	r1, r2
 80094f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094fa:	f7ff bd97 	b.w	800902c <_malloc_r>
 80094fe:	b92a      	cbnz	r2, 800950c <_realloc_r+0x24>
 8009500:	f7ff fd2c 	bl	8008f5c <_free_r>
 8009504:	4625      	mov	r5, r4
 8009506:	4628      	mov	r0, r5
 8009508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950c:	f000 fc56 	bl	8009dbc <_malloc_usable_size_r>
 8009510:	4284      	cmp	r4, r0
 8009512:	4607      	mov	r7, r0
 8009514:	d802      	bhi.n	800951c <_realloc_r+0x34>
 8009516:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800951a:	d812      	bhi.n	8009542 <_realloc_r+0x5a>
 800951c:	4621      	mov	r1, r4
 800951e:	4640      	mov	r0, r8
 8009520:	f7ff fd84 	bl	800902c <_malloc_r>
 8009524:	4605      	mov	r5, r0
 8009526:	2800      	cmp	r0, #0
 8009528:	d0ed      	beq.n	8009506 <_realloc_r+0x1e>
 800952a:	42bc      	cmp	r4, r7
 800952c:	4622      	mov	r2, r4
 800952e:	4631      	mov	r1, r6
 8009530:	bf28      	it	cs
 8009532:	463a      	movcs	r2, r7
 8009534:	f7ff f838 	bl	80085a8 <memcpy>
 8009538:	4631      	mov	r1, r6
 800953a:	4640      	mov	r0, r8
 800953c:	f7ff fd0e 	bl	8008f5c <_free_r>
 8009540:	e7e1      	b.n	8009506 <_realloc_r+0x1e>
 8009542:	4635      	mov	r5, r6
 8009544:	e7df      	b.n	8009506 <_realloc_r+0x1e>

08009546 <__sfputc_r>:
 8009546:	6893      	ldr	r3, [r2, #8]
 8009548:	b410      	push	{r4}
 800954a:	3b01      	subs	r3, #1
 800954c:	2b00      	cmp	r3, #0
 800954e:	6093      	str	r3, [r2, #8]
 8009550:	da07      	bge.n	8009562 <__sfputc_r+0x1c>
 8009552:	6994      	ldr	r4, [r2, #24]
 8009554:	42a3      	cmp	r3, r4
 8009556:	db01      	blt.n	800955c <__sfputc_r+0x16>
 8009558:	290a      	cmp	r1, #10
 800955a:	d102      	bne.n	8009562 <__sfputc_r+0x1c>
 800955c:	bc10      	pop	{r4}
 800955e:	f000 b949 	b.w	80097f4 <__swbuf_r>
 8009562:	6813      	ldr	r3, [r2, #0]
 8009564:	1c58      	adds	r0, r3, #1
 8009566:	6010      	str	r0, [r2, #0]
 8009568:	7019      	strb	r1, [r3, #0]
 800956a:	4608      	mov	r0, r1
 800956c:	bc10      	pop	{r4}
 800956e:	4770      	bx	lr

08009570 <__sfputs_r>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	4606      	mov	r6, r0
 8009574:	460f      	mov	r7, r1
 8009576:	4614      	mov	r4, r2
 8009578:	18d5      	adds	r5, r2, r3
 800957a:	42ac      	cmp	r4, r5
 800957c:	d101      	bne.n	8009582 <__sfputs_r+0x12>
 800957e:	2000      	movs	r0, #0
 8009580:	e007      	b.n	8009592 <__sfputs_r+0x22>
 8009582:	463a      	mov	r2, r7
 8009584:	4630      	mov	r0, r6
 8009586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800958a:	f7ff ffdc 	bl	8009546 <__sfputc_r>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	d1f3      	bne.n	800957a <__sfputs_r+0xa>
 8009592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009594 <_vfiprintf_r>:
 8009594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	460d      	mov	r5, r1
 800959a:	4614      	mov	r4, r2
 800959c:	4698      	mov	r8, r3
 800959e:	4606      	mov	r6, r0
 80095a0:	b09d      	sub	sp, #116	; 0x74
 80095a2:	b118      	cbz	r0, 80095ac <_vfiprintf_r+0x18>
 80095a4:	6983      	ldr	r3, [r0, #24]
 80095a6:	b90b      	cbnz	r3, 80095ac <_vfiprintf_r+0x18>
 80095a8:	f000 fb02 	bl	8009bb0 <__sinit>
 80095ac:	4b89      	ldr	r3, [pc, #548]	; (80097d4 <_vfiprintf_r+0x240>)
 80095ae:	429d      	cmp	r5, r3
 80095b0:	d11b      	bne.n	80095ea <_vfiprintf_r+0x56>
 80095b2:	6875      	ldr	r5, [r6, #4]
 80095b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095b6:	07d9      	lsls	r1, r3, #31
 80095b8:	d405      	bmi.n	80095c6 <_vfiprintf_r+0x32>
 80095ba:	89ab      	ldrh	r3, [r5, #12]
 80095bc:	059a      	lsls	r2, r3, #22
 80095be:	d402      	bmi.n	80095c6 <_vfiprintf_r+0x32>
 80095c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095c2:	f000 fb93 	bl	8009cec <__retarget_lock_acquire_recursive>
 80095c6:	89ab      	ldrh	r3, [r5, #12]
 80095c8:	071b      	lsls	r3, r3, #28
 80095ca:	d501      	bpl.n	80095d0 <_vfiprintf_r+0x3c>
 80095cc:	692b      	ldr	r3, [r5, #16]
 80095ce:	b9eb      	cbnz	r3, 800960c <_vfiprintf_r+0x78>
 80095d0:	4629      	mov	r1, r5
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 f960 	bl	8009898 <__swsetup_r>
 80095d8:	b1c0      	cbz	r0, 800960c <_vfiprintf_r+0x78>
 80095da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095dc:	07dc      	lsls	r4, r3, #31
 80095de:	d50e      	bpl.n	80095fe <_vfiprintf_r+0x6a>
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095e4:	b01d      	add	sp, #116	; 0x74
 80095e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ea:	4b7b      	ldr	r3, [pc, #492]	; (80097d8 <_vfiprintf_r+0x244>)
 80095ec:	429d      	cmp	r5, r3
 80095ee:	d101      	bne.n	80095f4 <_vfiprintf_r+0x60>
 80095f0:	68b5      	ldr	r5, [r6, #8]
 80095f2:	e7df      	b.n	80095b4 <_vfiprintf_r+0x20>
 80095f4:	4b79      	ldr	r3, [pc, #484]	; (80097dc <_vfiprintf_r+0x248>)
 80095f6:	429d      	cmp	r5, r3
 80095f8:	bf08      	it	eq
 80095fa:	68f5      	ldreq	r5, [r6, #12]
 80095fc:	e7da      	b.n	80095b4 <_vfiprintf_r+0x20>
 80095fe:	89ab      	ldrh	r3, [r5, #12]
 8009600:	0598      	lsls	r0, r3, #22
 8009602:	d4ed      	bmi.n	80095e0 <_vfiprintf_r+0x4c>
 8009604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009606:	f000 fb72 	bl	8009cee <__retarget_lock_release_recursive>
 800960a:	e7e9      	b.n	80095e0 <_vfiprintf_r+0x4c>
 800960c:	2300      	movs	r3, #0
 800960e:	9309      	str	r3, [sp, #36]	; 0x24
 8009610:	2320      	movs	r3, #32
 8009612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009616:	2330      	movs	r3, #48	; 0x30
 8009618:	f04f 0901 	mov.w	r9, #1
 800961c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009620:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80097e0 <_vfiprintf_r+0x24c>
 8009624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009628:	4623      	mov	r3, r4
 800962a:	469a      	mov	sl, r3
 800962c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009630:	b10a      	cbz	r2, 8009636 <_vfiprintf_r+0xa2>
 8009632:	2a25      	cmp	r2, #37	; 0x25
 8009634:	d1f9      	bne.n	800962a <_vfiprintf_r+0x96>
 8009636:	ebba 0b04 	subs.w	fp, sl, r4
 800963a:	d00b      	beq.n	8009654 <_vfiprintf_r+0xc0>
 800963c:	465b      	mov	r3, fp
 800963e:	4622      	mov	r2, r4
 8009640:	4629      	mov	r1, r5
 8009642:	4630      	mov	r0, r6
 8009644:	f7ff ff94 	bl	8009570 <__sfputs_r>
 8009648:	3001      	adds	r0, #1
 800964a:	f000 80aa 	beq.w	80097a2 <_vfiprintf_r+0x20e>
 800964e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009650:	445a      	add	r2, fp
 8009652:	9209      	str	r2, [sp, #36]	; 0x24
 8009654:	f89a 3000 	ldrb.w	r3, [sl]
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 80a2 	beq.w	80097a2 <_vfiprintf_r+0x20e>
 800965e:	2300      	movs	r3, #0
 8009660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009668:	f10a 0a01 	add.w	sl, sl, #1
 800966c:	9304      	str	r3, [sp, #16]
 800966e:	9307      	str	r3, [sp, #28]
 8009670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009674:	931a      	str	r3, [sp, #104]	; 0x68
 8009676:	4654      	mov	r4, sl
 8009678:	2205      	movs	r2, #5
 800967a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800967e:	4858      	ldr	r0, [pc, #352]	; (80097e0 <_vfiprintf_r+0x24c>)
 8009680:	f7fe ff84 	bl	800858c <memchr>
 8009684:	9a04      	ldr	r2, [sp, #16]
 8009686:	b9d8      	cbnz	r0, 80096c0 <_vfiprintf_r+0x12c>
 8009688:	06d1      	lsls	r1, r2, #27
 800968a:	bf44      	itt	mi
 800968c:	2320      	movmi	r3, #32
 800968e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009692:	0713      	lsls	r3, r2, #28
 8009694:	bf44      	itt	mi
 8009696:	232b      	movmi	r3, #43	; 0x2b
 8009698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800969c:	f89a 3000 	ldrb.w	r3, [sl]
 80096a0:	2b2a      	cmp	r3, #42	; 0x2a
 80096a2:	d015      	beq.n	80096d0 <_vfiprintf_r+0x13c>
 80096a4:	4654      	mov	r4, sl
 80096a6:	2000      	movs	r0, #0
 80096a8:	f04f 0c0a 	mov.w	ip, #10
 80096ac:	9a07      	ldr	r2, [sp, #28]
 80096ae:	4621      	mov	r1, r4
 80096b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096b4:	3b30      	subs	r3, #48	; 0x30
 80096b6:	2b09      	cmp	r3, #9
 80096b8:	d94e      	bls.n	8009758 <_vfiprintf_r+0x1c4>
 80096ba:	b1b0      	cbz	r0, 80096ea <_vfiprintf_r+0x156>
 80096bc:	9207      	str	r2, [sp, #28]
 80096be:	e014      	b.n	80096ea <_vfiprintf_r+0x156>
 80096c0:	eba0 0308 	sub.w	r3, r0, r8
 80096c4:	fa09 f303 	lsl.w	r3, r9, r3
 80096c8:	4313      	orrs	r3, r2
 80096ca:	46a2      	mov	sl, r4
 80096cc:	9304      	str	r3, [sp, #16]
 80096ce:	e7d2      	b.n	8009676 <_vfiprintf_r+0xe2>
 80096d0:	9b03      	ldr	r3, [sp, #12]
 80096d2:	1d19      	adds	r1, r3, #4
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	9103      	str	r1, [sp, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bfbb      	ittet	lt
 80096dc:	425b      	neglt	r3, r3
 80096de:	f042 0202 	orrlt.w	r2, r2, #2
 80096e2:	9307      	strge	r3, [sp, #28]
 80096e4:	9307      	strlt	r3, [sp, #28]
 80096e6:	bfb8      	it	lt
 80096e8:	9204      	strlt	r2, [sp, #16]
 80096ea:	7823      	ldrb	r3, [r4, #0]
 80096ec:	2b2e      	cmp	r3, #46	; 0x2e
 80096ee:	d10c      	bne.n	800970a <_vfiprintf_r+0x176>
 80096f0:	7863      	ldrb	r3, [r4, #1]
 80096f2:	2b2a      	cmp	r3, #42	; 0x2a
 80096f4:	d135      	bne.n	8009762 <_vfiprintf_r+0x1ce>
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	3402      	adds	r4, #2
 80096fa:	1d1a      	adds	r2, r3, #4
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	9203      	str	r2, [sp, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	bfb8      	it	lt
 8009704:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009708:	9305      	str	r3, [sp, #20]
 800970a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80097e4 <_vfiprintf_r+0x250>
 800970e:	2203      	movs	r2, #3
 8009710:	4650      	mov	r0, sl
 8009712:	7821      	ldrb	r1, [r4, #0]
 8009714:	f7fe ff3a 	bl	800858c <memchr>
 8009718:	b140      	cbz	r0, 800972c <_vfiprintf_r+0x198>
 800971a:	2340      	movs	r3, #64	; 0x40
 800971c:	eba0 000a 	sub.w	r0, r0, sl
 8009720:	fa03 f000 	lsl.w	r0, r3, r0
 8009724:	9b04      	ldr	r3, [sp, #16]
 8009726:	3401      	adds	r4, #1
 8009728:	4303      	orrs	r3, r0
 800972a:	9304      	str	r3, [sp, #16]
 800972c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009730:	2206      	movs	r2, #6
 8009732:	482d      	ldr	r0, [pc, #180]	; (80097e8 <_vfiprintf_r+0x254>)
 8009734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009738:	f7fe ff28 	bl	800858c <memchr>
 800973c:	2800      	cmp	r0, #0
 800973e:	d03f      	beq.n	80097c0 <_vfiprintf_r+0x22c>
 8009740:	4b2a      	ldr	r3, [pc, #168]	; (80097ec <_vfiprintf_r+0x258>)
 8009742:	bb1b      	cbnz	r3, 800978c <_vfiprintf_r+0x1f8>
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	3307      	adds	r3, #7
 8009748:	f023 0307 	bic.w	r3, r3, #7
 800974c:	3308      	adds	r3, #8
 800974e:	9303      	str	r3, [sp, #12]
 8009750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009752:	443b      	add	r3, r7
 8009754:	9309      	str	r3, [sp, #36]	; 0x24
 8009756:	e767      	b.n	8009628 <_vfiprintf_r+0x94>
 8009758:	460c      	mov	r4, r1
 800975a:	2001      	movs	r0, #1
 800975c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009760:	e7a5      	b.n	80096ae <_vfiprintf_r+0x11a>
 8009762:	2300      	movs	r3, #0
 8009764:	f04f 0c0a 	mov.w	ip, #10
 8009768:	4619      	mov	r1, r3
 800976a:	3401      	adds	r4, #1
 800976c:	9305      	str	r3, [sp, #20]
 800976e:	4620      	mov	r0, r4
 8009770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009774:	3a30      	subs	r2, #48	; 0x30
 8009776:	2a09      	cmp	r2, #9
 8009778:	d903      	bls.n	8009782 <_vfiprintf_r+0x1ee>
 800977a:	2b00      	cmp	r3, #0
 800977c:	d0c5      	beq.n	800970a <_vfiprintf_r+0x176>
 800977e:	9105      	str	r1, [sp, #20]
 8009780:	e7c3      	b.n	800970a <_vfiprintf_r+0x176>
 8009782:	4604      	mov	r4, r0
 8009784:	2301      	movs	r3, #1
 8009786:	fb0c 2101 	mla	r1, ip, r1, r2
 800978a:	e7f0      	b.n	800976e <_vfiprintf_r+0x1da>
 800978c:	ab03      	add	r3, sp, #12
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	462a      	mov	r2, r5
 8009792:	4630      	mov	r0, r6
 8009794:	4b16      	ldr	r3, [pc, #88]	; (80097f0 <_vfiprintf_r+0x25c>)
 8009796:	a904      	add	r1, sp, #16
 8009798:	f7fc f878 	bl	800588c <_printf_float>
 800979c:	4607      	mov	r7, r0
 800979e:	1c78      	adds	r0, r7, #1
 80097a0:	d1d6      	bne.n	8009750 <_vfiprintf_r+0x1bc>
 80097a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097a4:	07d9      	lsls	r1, r3, #31
 80097a6:	d405      	bmi.n	80097b4 <_vfiprintf_r+0x220>
 80097a8:	89ab      	ldrh	r3, [r5, #12]
 80097aa:	059a      	lsls	r2, r3, #22
 80097ac:	d402      	bmi.n	80097b4 <_vfiprintf_r+0x220>
 80097ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097b0:	f000 fa9d 	bl	8009cee <__retarget_lock_release_recursive>
 80097b4:	89ab      	ldrh	r3, [r5, #12]
 80097b6:	065b      	lsls	r3, r3, #25
 80097b8:	f53f af12 	bmi.w	80095e0 <_vfiprintf_r+0x4c>
 80097bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097be:	e711      	b.n	80095e4 <_vfiprintf_r+0x50>
 80097c0:	ab03      	add	r3, sp, #12
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	462a      	mov	r2, r5
 80097c6:	4630      	mov	r0, r6
 80097c8:	4b09      	ldr	r3, [pc, #36]	; (80097f0 <_vfiprintf_r+0x25c>)
 80097ca:	a904      	add	r1, sp, #16
 80097cc:	f7fc fafa 	bl	8005dc4 <_printf_i>
 80097d0:	e7e4      	b.n	800979c <_vfiprintf_r+0x208>
 80097d2:	bf00      	nop
 80097d4:	0800a52c 	.word	0x0800a52c
 80097d8:	0800a54c 	.word	0x0800a54c
 80097dc:	0800a50c 	.word	0x0800a50c
 80097e0:	0800a4bc 	.word	0x0800a4bc
 80097e4:	0800a4c2 	.word	0x0800a4c2
 80097e8:	0800a4c6 	.word	0x0800a4c6
 80097ec:	0800588d 	.word	0x0800588d
 80097f0:	08009571 	.word	0x08009571

080097f4 <__swbuf_r>:
 80097f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f6:	460e      	mov	r6, r1
 80097f8:	4614      	mov	r4, r2
 80097fa:	4605      	mov	r5, r0
 80097fc:	b118      	cbz	r0, 8009806 <__swbuf_r+0x12>
 80097fe:	6983      	ldr	r3, [r0, #24]
 8009800:	b90b      	cbnz	r3, 8009806 <__swbuf_r+0x12>
 8009802:	f000 f9d5 	bl	8009bb0 <__sinit>
 8009806:	4b21      	ldr	r3, [pc, #132]	; (800988c <__swbuf_r+0x98>)
 8009808:	429c      	cmp	r4, r3
 800980a:	d12b      	bne.n	8009864 <__swbuf_r+0x70>
 800980c:	686c      	ldr	r4, [r5, #4]
 800980e:	69a3      	ldr	r3, [r4, #24]
 8009810:	60a3      	str	r3, [r4, #8]
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	071a      	lsls	r2, r3, #28
 8009816:	d52f      	bpl.n	8009878 <__swbuf_r+0x84>
 8009818:	6923      	ldr	r3, [r4, #16]
 800981a:	b36b      	cbz	r3, 8009878 <__swbuf_r+0x84>
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	6820      	ldr	r0, [r4, #0]
 8009820:	b2f6      	uxtb	r6, r6
 8009822:	1ac0      	subs	r0, r0, r3
 8009824:	6963      	ldr	r3, [r4, #20]
 8009826:	4637      	mov	r7, r6
 8009828:	4283      	cmp	r3, r0
 800982a:	dc04      	bgt.n	8009836 <__swbuf_r+0x42>
 800982c:	4621      	mov	r1, r4
 800982e:	4628      	mov	r0, r5
 8009830:	f000 f92a 	bl	8009a88 <_fflush_r>
 8009834:	bb30      	cbnz	r0, 8009884 <__swbuf_r+0x90>
 8009836:	68a3      	ldr	r3, [r4, #8]
 8009838:	3001      	adds	r0, #1
 800983a:	3b01      	subs	r3, #1
 800983c:	60a3      	str	r3, [r4, #8]
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	6022      	str	r2, [r4, #0]
 8009844:	701e      	strb	r6, [r3, #0]
 8009846:	6963      	ldr	r3, [r4, #20]
 8009848:	4283      	cmp	r3, r0
 800984a:	d004      	beq.n	8009856 <__swbuf_r+0x62>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	07db      	lsls	r3, r3, #31
 8009850:	d506      	bpl.n	8009860 <__swbuf_r+0x6c>
 8009852:	2e0a      	cmp	r6, #10
 8009854:	d104      	bne.n	8009860 <__swbuf_r+0x6c>
 8009856:	4621      	mov	r1, r4
 8009858:	4628      	mov	r0, r5
 800985a:	f000 f915 	bl	8009a88 <_fflush_r>
 800985e:	b988      	cbnz	r0, 8009884 <__swbuf_r+0x90>
 8009860:	4638      	mov	r0, r7
 8009862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009864:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <__swbuf_r+0x9c>)
 8009866:	429c      	cmp	r4, r3
 8009868:	d101      	bne.n	800986e <__swbuf_r+0x7a>
 800986a:	68ac      	ldr	r4, [r5, #8]
 800986c:	e7cf      	b.n	800980e <__swbuf_r+0x1a>
 800986e:	4b09      	ldr	r3, [pc, #36]	; (8009894 <__swbuf_r+0xa0>)
 8009870:	429c      	cmp	r4, r3
 8009872:	bf08      	it	eq
 8009874:	68ec      	ldreq	r4, [r5, #12]
 8009876:	e7ca      	b.n	800980e <__swbuf_r+0x1a>
 8009878:	4621      	mov	r1, r4
 800987a:	4628      	mov	r0, r5
 800987c:	f000 f80c 	bl	8009898 <__swsetup_r>
 8009880:	2800      	cmp	r0, #0
 8009882:	d0cb      	beq.n	800981c <__swbuf_r+0x28>
 8009884:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009888:	e7ea      	b.n	8009860 <__swbuf_r+0x6c>
 800988a:	bf00      	nop
 800988c:	0800a52c 	.word	0x0800a52c
 8009890:	0800a54c 	.word	0x0800a54c
 8009894:	0800a50c 	.word	0x0800a50c

08009898 <__swsetup_r>:
 8009898:	4b32      	ldr	r3, [pc, #200]	; (8009964 <__swsetup_r+0xcc>)
 800989a:	b570      	push	{r4, r5, r6, lr}
 800989c:	681d      	ldr	r5, [r3, #0]
 800989e:	4606      	mov	r6, r0
 80098a0:	460c      	mov	r4, r1
 80098a2:	b125      	cbz	r5, 80098ae <__swsetup_r+0x16>
 80098a4:	69ab      	ldr	r3, [r5, #24]
 80098a6:	b913      	cbnz	r3, 80098ae <__swsetup_r+0x16>
 80098a8:	4628      	mov	r0, r5
 80098aa:	f000 f981 	bl	8009bb0 <__sinit>
 80098ae:	4b2e      	ldr	r3, [pc, #184]	; (8009968 <__swsetup_r+0xd0>)
 80098b0:	429c      	cmp	r4, r3
 80098b2:	d10f      	bne.n	80098d4 <__swsetup_r+0x3c>
 80098b4:	686c      	ldr	r4, [r5, #4]
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098bc:	0719      	lsls	r1, r3, #28
 80098be:	d42c      	bmi.n	800991a <__swsetup_r+0x82>
 80098c0:	06dd      	lsls	r5, r3, #27
 80098c2:	d411      	bmi.n	80098e8 <__swsetup_r+0x50>
 80098c4:	2309      	movs	r3, #9
 80098c6:	6033      	str	r3, [r6, #0]
 80098c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098d0:	81a3      	strh	r3, [r4, #12]
 80098d2:	e03e      	b.n	8009952 <__swsetup_r+0xba>
 80098d4:	4b25      	ldr	r3, [pc, #148]	; (800996c <__swsetup_r+0xd4>)
 80098d6:	429c      	cmp	r4, r3
 80098d8:	d101      	bne.n	80098de <__swsetup_r+0x46>
 80098da:	68ac      	ldr	r4, [r5, #8]
 80098dc:	e7eb      	b.n	80098b6 <__swsetup_r+0x1e>
 80098de:	4b24      	ldr	r3, [pc, #144]	; (8009970 <__swsetup_r+0xd8>)
 80098e0:	429c      	cmp	r4, r3
 80098e2:	bf08      	it	eq
 80098e4:	68ec      	ldreq	r4, [r5, #12]
 80098e6:	e7e6      	b.n	80098b6 <__swsetup_r+0x1e>
 80098e8:	0758      	lsls	r0, r3, #29
 80098ea:	d512      	bpl.n	8009912 <__swsetup_r+0x7a>
 80098ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ee:	b141      	cbz	r1, 8009902 <__swsetup_r+0x6a>
 80098f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098f4:	4299      	cmp	r1, r3
 80098f6:	d002      	beq.n	80098fe <__swsetup_r+0x66>
 80098f8:	4630      	mov	r0, r6
 80098fa:	f7ff fb2f 	bl	8008f5c <_free_r>
 80098fe:	2300      	movs	r3, #0
 8009900:	6363      	str	r3, [r4, #52]	; 0x34
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009908:	81a3      	strh	r3, [r4, #12]
 800990a:	2300      	movs	r3, #0
 800990c:	6063      	str	r3, [r4, #4]
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f043 0308 	orr.w	r3, r3, #8
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	b94b      	cbnz	r3, 8009932 <__swsetup_r+0x9a>
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009928:	d003      	beq.n	8009932 <__swsetup_r+0x9a>
 800992a:	4621      	mov	r1, r4
 800992c:	4630      	mov	r0, r6
 800992e:	f000 fa05 	bl	8009d3c <__smakebuf_r>
 8009932:	89a0      	ldrh	r0, [r4, #12]
 8009934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009938:	f010 0301 	ands.w	r3, r0, #1
 800993c:	d00a      	beq.n	8009954 <__swsetup_r+0xbc>
 800993e:	2300      	movs	r3, #0
 8009940:	60a3      	str	r3, [r4, #8]
 8009942:	6963      	ldr	r3, [r4, #20]
 8009944:	425b      	negs	r3, r3
 8009946:	61a3      	str	r3, [r4, #24]
 8009948:	6923      	ldr	r3, [r4, #16]
 800994a:	b943      	cbnz	r3, 800995e <__swsetup_r+0xc6>
 800994c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009950:	d1ba      	bne.n	80098c8 <__swsetup_r+0x30>
 8009952:	bd70      	pop	{r4, r5, r6, pc}
 8009954:	0781      	lsls	r1, r0, #30
 8009956:	bf58      	it	pl
 8009958:	6963      	ldrpl	r3, [r4, #20]
 800995a:	60a3      	str	r3, [r4, #8]
 800995c:	e7f4      	b.n	8009948 <__swsetup_r+0xb0>
 800995e:	2000      	movs	r0, #0
 8009960:	e7f7      	b.n	8009952 <__swsetup_r+0xba>
 8009962:	bf00      	nop
 8009964:	2000000c 	.word	0x2000000c
 8009968:	0800a52c 	.word	0x0800a52c
 800996c:	0800a54c 	.word	0x0800a54c
 8009970:	0800a50c 	.word	0x0800a50c

08009974 <abort>:
 8009974:	2006      	movs	r0, #6
 8009976:	b508      	push	{r3, lr}
 8009978:	f000 fa50 	bl	8009e1c <raise>
 800997c:	2001      	movs	r0, #1
 800997e:	f7f8 f9f2 	bl	8001d66 <_exit>
	...

08009984 <__sflush_r>:
 8009984:	898a      	ldrh	r2, [r1, #12]
 8009986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009988:	4605      	mov	r5, r0
 800998a:	0710      	lsls	r0, r2, #28
 800998c:	460c      	mov	r4, r1
 800998e:	d457      	bmi.n	8009a40 <__sflush_r+0xbc>
 8009990:	684b      	ldr	r3, [r1, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	dc04      	bgt.n	80099a0 <__sflush_r+0x1c>
 8009996:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009998:	2b00      	cmp	r3, #0
 800999a:	dc01      	bgt.n	80099a0 <__sflush_r+0x1c>
 800999c:	2000      	movs	r0, #0
 800999e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099a2:	2e00      	cmp	r6, #0
 80099a4:	d0fa      	beq.n	800999c <__sflush_r+0x18>
 80099a6:	2300      	movs	r3, #0
 80099a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099ac:	682f      	ldr	r7, [r5, #0]
 80099ae:	602b      	str	r3, [r5, #0]
 80099b0:	d032      	beq.n	8009a18 <__sflush_r+0x94>
 80099b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	075a      	lsls	r2, r3, #29
 80099b8:	d505      	bpl.n	80099c6 <__sflush_r+0x42>
 80099ba:	6863      	ldr	r3, [r4, #4]
 80099bc:	1ac0      	subs	r0, r0, r3
 80099be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099c0:	b10b      	cbz	r3, 80099c6 <__sflush_r+0x42>
 80099c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099c4:	1ac0      	subs	r0, r0, r3
 80099c6:	2300      	movs	r3, #0
 80099c8:	4602      	mov	r2, r0
 80099ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099cc:	4628      	mov	r0, r5
 80099ce:	6a21      	ldr	r1, [r4, #32]
 80099d0:	47b0      	blx	r6
 80099d2:	1c43      	adds	r3, r0, #1
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	d106      	bne.n	80099e6 <__sflush_r+0x62>
 80099d8:	6829      	ldr	r1, [r5, #0]
 80099da:	291d      	cmp	r1, #29
 80099dc:	d82c      	bhi.n	8009a38 <__sflush_r+0xb4>
 80099de:	4a29      	ldr	r2, [pc, #164]	; (8009a84 <__sflush_r+0x100>)
 80099e0:	40ca      	lsrs	r2, r1
 80099e2:	07d6      	lsls	r6, r2, #31
 80099e4:	d528      	bpl.n	8009a38 <__sflush_r+0xb4>
 80099e6:	2200      	movs	r2, #0
 80099e8:	6062      	str	r2, [r4, #4]
 80099ea:	6922      	ldr	r2, [r4, #16]
 80099ec:	04d9      	lsls	r1, r3, #19
 80099ee:	6022      	str	r2, [r4, #0]
 80099f0:	d504      	bpl.n	80099fc <__sflush_r+0x78>
 80099f2:	1c42      	adds	r2, r0, #1
 80099f4:	d101      	bne.n	80099fa <__sflush_r+0x76>
 80099f6:	682b      	ldr	r3, [r5, #0]
 80099f8:	b903      	cbnz	r3, 80099fc <__sflush_r+0x78>
 80099fa:	6560      	str	r0, [r4, #84]	; 0x54
 80099fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099fe:	602f      	str	r7, [r5, #0]
 8009a00:	2900      	cmp	r1, #0
 8009a02:	d0cb      	beq.n	800999c <__sflush_r+0x18>
 8009a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a08:	4299      	cmp	r1, r3
 8009a0a:	d002      	beq.n	8009a12 <__sflush_r+0x8e>
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f7ff faa5 	bl	8008f5c <_free_r>
 8009a12:	2000      	movs	r0, #0
 8009a14:	6360      	str	r0, [r4, #52]	; 0x34
 8009a16:	e7c2      	b.n	800999e <__sflush_r+0x1a>
 8009a18:	6a21      	ldr	r1, [r4, #32]
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	47b0      	blx	r6
 8009a20:	1c41      	adds	r1, r0, #1
 8009a22:	d1c7      	bne.n	80099b4 <__sflush_r+0x30>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d0c4      	beq.n	80099b4 <__sflush_r+0x30>
 8009a2a:	2b1d      	cmp	r3, #29
 8009a2c:	d001      	beq.n	8009a32 <__sflush_r+0xae>
 8009a2e:	2b16      	cmp	r3, #22
 8009a30:	d101      	bne.n	8009a36 <__sflush_r+0xb2>
 8009a32:	602f      	str	r7, [r5, #0]
 8009a34:	e7b2      	b.n	800999c <__sflush_r+0x18>
 8009a36:	89a3      	ldrh	r3, [r4, #12]
 8009a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3c:	81a3      	strh	r3, [r4, #12]
 8009a3e:	e7ae      	b.n	800999e <__sflush_r+0x1a>
 8009a40:	690f      	ldr	r7, [r1, #16]
 8009a42:	2f00      	cmp	r7, #0
 8009a44:	d0aa      	beq.n	800999c <__sflush_r+0x18>
 8009a46:	0793      	lsls	r3, r2, #30
 8009a48:	bf18      	it	ne
 8009a4a:	2300      	movne	r3, #0
 8009a4c:	680e      	ldr	r6, [r1, #0]
 8009a4e:	bf08      	it	eq
 8009a50:	694b      	ldreq	r3, [r1, #20]
 8009a52:	1bf6      	subs	r6, r6, r7
 8009a54:	600f      	str	r7, [r1, #0]
 8009a56:	608b      	str	r3, [r1, #8]
 8009a58:	2e00      	cmp	r6, #0
 8009a5a:	dd9f      	ble.n	800999c <__sflush_r+0x18>
 8009a5c:	4633      	mov	r3, r6
 8009a5e:	463a      	mov	r2, r7
 8009a60:	4628      	mov	r0, r5
 8009a62:	6a21      	ldr	r1, [r4, #32]
 8009a64:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009a68:	47e0      	blx	ip
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	dc06      	bgt.n	8009a7c <__sflush_r+0xf8>
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a78:	81a3      	strh	r3, [r4, #12]
 8009a7a:	e790      	b.n	800999e <__sflush_r+0x1a>
 8009a7c:	4407      	add	r7, r0
 8009a7e:	1a36      	subs	r6, r6, r0
 8009a80:	e7ea      	b.n	8009a58 <__sflush_r+0xd4>
 8009a82:	bf00      	nop
 8009a84:	20400001 	.word	0x20400001

08009a88 <_fflush_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	690b      	ldr	r3, [r1, #16]
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	460c      	mov	r4, r1
 8009a90:	b913      	cbnz	r3, 8009a98 <_fflush_r+0x10>
 8009a92:	2500      	movs	r5, #0
 8009a94:	4628      	mov	r0, r5
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	b118      	cbz	r0, 8009aa2 <_fflush_r+0x1a>
 8009a9a:	6983      	ldr	r3, [r0, #24]
 8009a9c:	b90b      	cbnz	r3, 8009aa2 <_fflush_r+0x1a>
 8009a9e:	f000 f887 	bl	8009bb0 <__sinit>
 8009aa2:	4b14      	ldr	r3, [pc, #80]	; (8009af4 <_fflush_r+0x6c>)
 8009aa4:	429c      	cmp	r4, r3
 8009aa6:	d11b      	bne.n	8009ae0 <_fflush_r+0x58>
 8009aa8:	686c      	ldr	r4, [r5, #4]
 8009aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0ef      	beq.n	8009a92 <_fflush_r+0xa>
 8009ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ab4:	07d0      	lsls	r0, r2, #31
 8009ab6:	d404      	bmi.n	8009ac2 <_fflush_r+0x3a>
 8009ab8:	0599      	lsls	r1, r3, #22
 8009aba:	d402      	bmi.n	8009ac2 <_fflush_r+0x3a>
 8009abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009abe:	f000 f915 	bl	8009cec <__retarget_lock_acquire_recursive>
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	f7ff ff5d 	bl	8009984 <__sflush_r>
 8009aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009acc:	4605      	mov	r5, r0
 8009ace:	07da      	lsls	r2, r3, #31
 8009ad0:	d4e0      	bmi.n	8009a94 <_fflush_r+0xc>
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	059b      	lsls	r3, r3, #22
 8009ad6:	d4dd      	bmi.n	8009a94 <_fflush_r+0xc>
 8009ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ada:	f000 f908 	bl	8009cee <__retarget_lock_release_recursive>
 8009ade:	e7d9      	b.n	8009a94 <_fflush_r+0xc>
 8009ae0:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <_fflush_r+0x70>)
 8009ae2:	429c      	cmp	r4, r3
 8009ae4:	d101      	bne.n	8009aea <_fflush_r+0x62>
 8009ae6:	68ac      	ldr	r4, [r5, #8]
 8009ae8:	e7df      	b.n	8009aaa <_fflush_r+0x22>
 8009aea:	4b04      	ldr	r3, [pc, #16]	; (8009afc <_fflush_r+0x74>)
 8009aec:	429c      	cmp	r4, r3
 8009aee:	bf08      	it	eq
 8009af0:	68ec      	ldreq	r4, [r5, #12]
 8009af2:	e7da      	b.n	8009aaa <_fflush_r+0x22>
 8009af4:	0800a52c 	.word	0x0800a52c
 8009af8:	0800a54c 	.word	0x0800a54c
 8009afc:	0800a50c 	.word	0x0800a50c

08009b00 <std>:
 8009b00:	2300      	movs	r3, #0
 8009b02:	b510      	push	{r4, lr}
 8009b04:	4604      	mov	r4, r0
 8009b06:	e9c0 3300 	strd	r3, r3, [r0]
 8009b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b0e:	6083      	str	r3, [r0, #8]
 8009b10:	8181      	strh	r1, [r0, #12]
 8009b12:	6643      	str	r3, [r0, #100]	; 0x64
 8009b14:	81c2      	strh	r2, [r0, #14]
 8009b16:	6183      	str	r3, [r0, #24]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	2208      	movs	r2, #8
 8009b1c:	305c      	adds	r0, #92	; 0x5c
 8009b1e:	f7fb fe0f 	bl	8005740 <memset>
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <std+0x38>)
 8009b24:	6224      	str	r4, [r4, #32]
 8009b26:	6263      	str	r3, [r4, #36]	; 0x24
 8009b28:	4b04      	ldr	r3, [pc, #16]	; (8009b3c <std+0x3c>)
 8009b2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b2c:	4b04      	ldr	r3, [pc, #16]	; (8009b40 <std+0x40>)
 8009b2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b30:	4b04      	ldr	r3, [pc, #16]	; (8009b44 <std+0x44>)
 8009b32:	6323      	str	r3, [r4, #48]	; 0x30
 8009b34:	bd10      	pop	{r4, pc}
 8009b36:	bf00      	nop
 8009b38:	08009e55 	.word	0x08009e55
 8009b3c:	08009e77 	.word	0x08009e77
 8009b40:	08009eaf 	.word	0x08009eaf
 8009b44:	08009ed3 	.word	0x08009ed3

08009b48 <_cleanup_r>:
 8009b48:	4901      	ldr	r1, [pc, #4]	; (8009b50 <_cleanup_r+0x8>)
 8009b4a:	f000 b8af 	b.w	8009cac <_fwalk_reent>
 8009b4e:	bf00      	nop
 8009b50:	08009a89 	.word	0x08009a89

08009b54 <__sfmoreglue>:
 8009b54:	2268      	movs	r2, #104	; 0x68
 8009b56:	b570      	push	{r4, r5, r6, lr}
 8009b58:	1e4d      	subs	r5, r1, #1
 8009b5a:	4355      	muls	r5, r2
 8009b5c:	460e      	mov	r6, r1
 8009b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b62:	f7ff fa63 	bl	800902c <_malloc_r>
 8009b66:	4604      	mov	r4, r0
 8009b68:	b140      	cbz	r0, 8009b7c <__sfmoreglue+0x28>
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	e9c0 1600 	strd	r1, r6, [r0]
 8009b70:	300c      	adds	r0, #12
 8009b72:	60a0      	str	r0, [r4, #8]
 8009b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b78:	f7fb fde2 	bl	8005740 <memset>
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}

08009b80 <__sfp_lock_acquire>:
 8009b80:	4801      	ldr	r0, [pc, #4]	; (8009b88 <__sfp_lock_acquire+0x8>)
 8009b82:	f000 b8b3 	b.w	8009cec <__retarget_lock_acquire_recursive>
 8009b86:	bf00      	nop
 8009b88:	20000381 	.word	0x20000381

08009b8c <__sfp_lock_release>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	; (8009b94 <__sfp_lock_release+0x8>)
 8009b8e:	f000 b8ae 	b.w	8009cee <__retarget_lock_release_recursive>
 8009b92:	bf00      	nop
 8009b94:	20000381 	.word	0x20000381

08009b98 <__sinit_lock_acquire>:
 8009b98:	4801      	ldr	r0, [pc, #4]	; (8009ba0 <__sinit_lock_acquire+0x8>)
 8009b9a:	f000 b8a7 	b.w	8009cec <__retarget_lock_acquire_recursive>
 8009b9e:	bf00      	nop
 8009ba0:	20000382 	.word	0x20000382

08009ba4 <__sinit_lock_release>:
 8009ba4:	4801      	ldr	r0, [pc, #4]	; (8009bac <__sinit_lock_release+0x8>)
 8009ba6:	f000 b8a2 	b.w	8009cee <__retarget_lock_release_recursive>
 8009baa:	bf00      	nop
 8009bac:	20000382 	.word	0x20000382

08009bb0 <__sinit>:
 8009bb0:	b510      	push	{r4, lr}
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	f7ff fff0 	bl	8009b98 <__sinit_lock_acquire>
 8009bb8:	69a3      	ldr	r3, [r4, #24]
 8009bba:	b11b      	cbz	r3, 8009bc4 <__sinit+0x14>
 8009bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bc0:	f7ff bff0 	b.w	8009ba4 <__sinit_lock_release>
 8009bc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8009bca:	4b13      	ldr	r3, [pc, #76]	; (8009c18 <__sinit+0x68>)
 8009bcc:	4a13      	ldr	r2, [pc, #76]	; (8009c1c <__sinit+0x6c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bd2:	42a3      	cmp	r3, r4
 8009bd4:	bf08      	it	eq
 8009bd6:	2301      	moveq	r3, #1
 8009bd8:	4620      	mov	r0, r4
 8009bda:	bf08      	it	eq
 8009bdc:	61a3      	streq	r3, [r4, #24]
 8009bde:	f000 f81f 	bl	8009c20 <__sfp>
 8009be2:	6060      	str	r0, [r4, #4]
 8009be4:	4620      	mov	r0, r4
 8009be6:	f000 f81b 	bl	8009c20 <__sfp>
 8009bea:	60a0      	str	r0, [r4, #8]
 8009bec:	4620      	mov	r0, r4
 8009bee:	f000 f817 	bl	8009c20 <__sfp>
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2104      	movs	r1, #4
 8009bf6:	60e0      	str	r0, [r4, #12]
 8009bf8:	6860      	ldr	r0, [r4, #4]
 8009bfa:	f7ff ff81 	bl	8009b00 <std>
 8009bfe:	2201      	movs	r2, #1
 8009c00:	2109      	movs	r1, #9
 8009c02:	68a0      	ldr	r0, [r4, #8]
 8009c04:	f7ff ff7c 	bl	8009b00 <std>
 8009c08:	2202      	movs	r2, #2
 8009c0a:	2112      	movs	r1, #18
 8009c0c:	68e0      	ldr	r0, [r4, #12]
 8009c0e:	f7ff ff77 	bl	8009b00 <std>
 8009c12:	2301      	movs	r3, #1
 8009c14:	61a3      	str	r3, [r4, #24]
 8009c16:	e7d1      	b.n	8009bbc <__sinit+0xc>
 8009c18:	0800a0c8 	.word	0x0800a0c8
 8009c1c:	08009b49 	.word	0x08009b49

08009c20 <__sfp>:
 8009c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c22:	4607      	mov	r7, r0
 8009c24:	f7ff ffac 	bl	8009b80 <__sfp_lock_acquire>
 8009c28:	4b1e      	ldr	r3, [pc, #120]	; (8009ca4 <__sfp+0x84>)
 8009c2a:	681e      	ldr	r6, [r3, #0]
 8009c2c:	69b3      	ldr	r3, [r6, #24]
 8009c2e:	b913      	cbnz	r3, 8009c36 <__sfp+0x16>
 8009c30:	4630      	mov	r0, r6
 8009c32:	f7ff ffbd 	bl	8009bb0 <__sinit>
 8009c36:	3648      	adds	r6, #72	; 0x48
 8009c38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	d503      	bpl.n	8009c48 <__sfp+0x28>
 8009c40:	6833      	ldr	r3, [r6, #0]
 8009c42:	b30b      	cbz	r3, 8009c88 <__sfp+0x68>
 8009c44:	6836      	ldr	r6, [r6, #0]
 8009c46:	e7f7      	b.n	8009c38 <__sfp+0x18>
 8009c48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c4c:	b9d5      	cbnz	r5, 8009c84 <__sfp+0x64>
 8009c4e:	4b16      	ldr	r3, [pc, #88]	; (8009ca8 <__sfp+0x88>)
 8009c50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c54:	60e3      	str	r3, [r4, #12]
 8009c56:	6665      	str	r5, [r4, #100]	; 0x64
 8009c58:	f000 f847 	bl	8009cea <__retarget_lock_init_recursive>
 8009c5c:	f7ff ff96 	bl	8009b8c <__sfp_lock_release>
 8009c60:	2208      	movs	r2, #8
 8009c62:	4629      	mov	r1, r5
 8009c64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c6c:	6025      	str	r5, [r4, #0]
 8009c6e:	61a5      	str	r5, [r4, #24]
 8009c70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c74:	f7fb fd64 	bl	8005740 <memset>
 8009c78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c80:	4620      	mov	r0, r4
 8009c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c84:	3468      	adds	r4, #104	; 0x68
 8009c86:	e7d9      	b.n	8009c3c <__sfp+0x1c>
 8009c88:	2104      	movs	r1, #4
 8009c8a:	4638      	mov	r0, r7
 8009c8c:	f7ff ff62 	bl	8009b54 <__sfmoreglue>
 8009c90:	4604      	mov	r4, r0
 8009c92:	6030      	str	r0, [r6, #0]
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d1d5      	bne.n	8009c44 <__sfp+0x24>
 8009c98:	f7ff ff78 	bl	8009b8c <__sfp_lock_release>
 8009c9c:	230c      	movs	r3, #12
 8009c9e:	603b      	str	r3, [r7, #0]
 8009ca0:	e7ee      	b.n	8009c80 <__sfp+0x60>
 8009ca2:	bf00      	nop
 8009ca4:	0800a0c8 	.word	0x0800a0c8
 8009ca8:	ffff0001 	.word	0xffff0001

08009cac <_fwalk_reent>:
 8009cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	4688      	mov	r8, r1
 8009cb4:	2700      	movs	r7, #0
 8009cb6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cbe:	f1b9 0901 	subs.w	r9, r9, #1
 8009cc2:	d505      	bpl.n	8009cd0 <_fwalk_reent+0x24>
 8009cc4:	6824      	ldr	r4, [r4, #0]
 8009cc6:	2c00      	cmp	r4, #0
 8009cc8:	d1f7      	bne.n	8009cba <_fwalk_reent+0xe>
 8009cca:	4638      	mov	r0, r7
 8009ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd0:	89ab      	ldrh	r3, [r5, #12]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d907      	bls.n	8009ce6 <_fwalk_reent+0x3a>
 8009cd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	d003      	beq.n	8009ce6 <_fwalk_reent+0x3a>
 8009cde:	4629      	mov	r1, r5
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	47c0      	blx	r8
 8009ce4:	4307      	orrs	r7, r0
 8009ce6:	3568      	adds	r5, #104	; 0x68
 8009ce8:	e7e9      	b.n	8009cbe <_fwalk_reent+0x12>

08009cea <__retarget_lock_init_recursive>:
 8009cea:	4770      	bx	lr

08009cec <__retarget_lock_acquire_recursive>:
 8009cec:	4770      	bx	lr

08009cee <__retarget_lock_release_recursive>:
 8009cee:	4770      	bx	lr

08009cf0 <__swhatbuf_r>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	460e      	mov	r6, r1
 8009cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	2900      	cmp	r1, #0
 8009cfc:	461d      	mov	r5, r3
 8009cfe:	b096      	sub	sp, #88	; 0x58
 8009d00:	da08      	bge.n	8009d14 <__swhatbuf_r+0x24>
 8009d02:	2200      	movs	r2, #0
 8009d04:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d08:	602a      	str	r2, [r5, #0]
 8009d0a:	061a      	lsls	r2, r3, #24
 8009d0c:	d410      	bmi.n	8009d30 <__swhatbuf_r+0x40>
 8009d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d12:	e00e      	b.n	8009d32 <__swhatbuf_r+0x42>
 8009d14:	466a      	mov	r2, sp
 8009d16:	f000 f903 	bl	8009f20 <_fstat_r>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	dbf1      	blt.n	8009d02 <__swhatbuf_r+0x12>
 8009d1e:	9a01      	ldr	r2, [sp, #4]
 8009d20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d28:	425a      	negs	r2, r3
 8009d2a:	415a      	adcs	r2, r3
 8009d2c:	602a      	str	r2, [r5, #0]
 8009d2e:	e7ee      	b.n	8009d0e <__swhatbuf_r+0x1e>
 8009d30:	2340      	movs	r3, #64	; 0x40
 8009d32:	2000      	movs	r0, #0
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	b016      	add	sp, #88	; 0x58
 8009d38:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d3c <__smakebuf_r>:
 8009d3c:	898b      	ldrh	r3, [r1, #12]
 8009d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d40:	079d      	lsls	r5, r3, #30
 8009d42:	4606      	mov	r6, r0
 8009d44:	460c      	mov	r4, r1
 8009d46:	d507      	bpl.n	8009d58 <__smakebuf_r+0x1c>
 8009d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	6123      	str	r3, [r4, #16]
 8009d50:	2301      	movs	r3, #1
 8009d52:	6163      	str	r3, [r4, #20]
 8009d54:	b002      	add	sp, #8
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	466a      	mov	r2, sp
 8009d5a:	ab01      	add	r3, sp, #4
 8009d5c:	f7ff ffc8 	bl	8009cf0 <__swhatbuf_r>
 8009d60:	9900      	ldr	r1, [sp, #0]
 8009d62:	4605      	mov	r5, r0
 8009d64:	4630      	mov	r0, r6
 8009d66:	f7ff f961 	bl	800902c <_malloc_r>
 8009d6a:	b948      	cbnz	r0, 8009d80 <__smakebuf_r+0x44>
 8009d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d70:	059a      	lsls	r2, r3, #22
 8009d72:	d4ef      	bmi.n	8009d54 <__smakebuf_r+0x18>
 8009d74:	f023 0303 	bic.w	r3, r3, #3
 8009d78:	f043 0302 	orr.w	r3, r3, #2
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	e7e3      	b.n	8009d48 <__smakebuf_r+0xc>
 8009d80:	4b0d      	ldr	r3, [pc, #52]	; (8009db8 <__smakebuf_r+0x7c>)
 8009d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d84:	89a3      	ldrh	r3, [r4, #12]
 8009d86:	6020      	str	r0, [r4, #0]
 8009d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	9b00      	ldr	r3, [sp, #0]
 8009d90:	6120      	str	r0, [r4, #16]
 8009d92:	6163      	str	r3, [r4, #20]
 8009d94:	9b01      	ldr	r3, [sp, #4]
 8009d96:	b15b      	cbz	r3, 8009db0 <__smakebuf_r+0x74>
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d9e:	f000 f8d1 	bl	8009f44 <_isatty_r>
 8009da2:	b128      	cbz	r0, 8009db0 <__smakebuf_r+0x74>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f023 0303 	bic.w	r3, r3, #3
 8009daa:	f043 0301 	orr.w	r3, r3, #1
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	89a0      	ldrh	r0, [r4, #12]
 8009db2:	4305      	orrs	r5, r0
 8009db4:	81a5      	strh	r5, [r4, #12]
 8009db6:	e7cd      	b.n	8009d54 <__smakebuf_r+0x18>
 8009db8:	08009b49 	.word	0x08009b49

08009dbc <_malloc_usable_size_r>:
 8009dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dc0:	1f18      	subs	r0, r3, #4
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	bfbc      	itt	lt
 8009dc6:	580b      	ldrlt	r3, [r1, r0]
 8009dc8:	18c0      	addlt	r0, r0, r3
 8009dca:	4770      	bx	lr

08009dcc <_raise_r>:
 8009dcc:	291f      	cmp	r1, #31
 8009dce:	b538      	push	{r3, r4, r5, lr}
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	460d      	mov	r5, r1
 8009dd4:	d904      	bls.n	8009de0 <_raise_r+0x14>
 8009dd6:	2316      	movs	r3, #22
 8009dd8:	6003      	str	r3, [r0, #0]
 8009dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dde:	bd38      	pop	{r3, r4, r5, pc}
 8009de0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009de2:	b112      	cbz	r2, 8009dea <_raise_r+0x1e>
 8009de4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009de8:	b94b      	cbnz	r3, 8009dfe <_raise_r+0x32>
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 f830 	bl	8009e50 <_getpid_r>
 8009df0:	462a      	mov	r2, r5
 8009df2:	4601      	mov	r1, r0
 8009df4:	4620      	mov	r0, r4
 8009df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dfa:	f000 b817 	b.w	8009e2c <_kill_r>
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d00a      	beq.n	8009e18 <_raise_r+0x4c>
 8009e02:	1c59      	adds	r1, r3, #1
 8009e04:	d103      	bne.n	8009e0e <_raise_r+0x42>
 8009e06:	2316      	movs	r3, #22
 8009e08:	6003      	str	r3, [r0, #0]
 8009e0a:	2001      	movs	r0, #1
 8009e0c:	e7e7      	b.n	8009dde <_raise_r+0x12>
 8009e0e:	2400      	movs	r4, #0
 8009e10:	4628      	mov	r0, r5
 8009e12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e16:	4798      	blx	r3
 8009e18:	2000      	movs	r0, #0
 8009e1a:	e7e0      	b.n	8009dde <_raise_r+0x12>

08009e1c <raise>:
 8009e1c:	4b02      	ldr	r3, [pc, #8]	; (8009e28 <raise+0xc>)
 8009e1e:	4601      	mov	r1, r0
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	f7ff bfd3 	b.w	8009dcc <_raise_r>
 8009e26:	bf00      	nop
 8009e28:	2000000c 	.word	0x2000000c

08009e2c <_kill_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	2300      	movs	r3, #0
 8009e30:	4d06      	ldr	r5, [pc, #24]	; (8009e4c <_kill_r+0x20>)
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	4611      	mov	r1, r2
 8009e38:	602b      	str	r3, [r5, #0]
 8009e3a:	f7f7 ff84 	bl	8001d46 <_kill>
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	d102      	bne.n	8009e48 <_kill_r+0x1c>
 8009e42:	682b      	ldr	r3, [r5, #0]
 8009e44:	b103      	cbz	r3, 8009e48 <_kill_r+0x1c>
 8009e46:	6023      	str	r3, [r4, #0]
 8009e48:	bd38      	pop	{r3, r4, r5, pc}
 8009e4a:	bf00      	nop
 8009e4c:	2000037c 	.word	0x2000037c

08009e50 <_getpid_r>:
 8009e50:	f7f7 bf72 	b.w	8001d38 <_getpid>

08009e54 <__sread>:
 8009e54:	b510      	push	{r4, lr}
 8009e56:	460c      	mov	r4, r1
 8009e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5c:	f000 f894 	bl	8009f88 <_read_r>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	bfab      	itete	ge
 8009e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e66:	89a3      	ldrhlt	r3, [r4, #12]
 8009e68:	181b      	addge	r3, r3, r0
 8009e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e6e:	bfac      	ite	ge
 8009e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e72:	81a3      	strhlt	r3, [r4, #12]
 8009e74:	bd10      	pop	{r4, pc}

08009e76 <__swrite>:
 8009e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7a:	461f      	mov	r7, r3
 8009e7c:	898b      	ldrh	r3, [r1, #12]
 8009e7e:	4605      	mov	r5, r0
 8009e80:	05db      	lsls	r3, r3, #23
 8009e82:	460c      	mov	r4, r1
 8009e84:	4616      	mov	r6, r2
 8009e86:	d505      	bpl.n	8009e94 <__swrite+0x1e>
 8009e88:	2302      	movs	r3, #2
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e90:	f000 f868 	bl	8009f64 <_lseek_r>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	4632      	mov	r2, r6
 8009e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e9c:	81a3      	strh	r3, [r4, #12]
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	463b      	mov	r3, r7
 8009ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eaa:	f000 b817 	b.w	8009edc <_write_r>

08009eae <__sseek>:
 8009eae:	b510      	push	{r4, lr}
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb6:	f000 f855 	bl	8009f64 <_lseek_r>
 8009eba:	1c43      	adds	r3, r0, #1
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	bf15      	itete	ne
 8009ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eca:	81a3      	strheq	r3, [r4, #12]
 8009ecc:	bf18      	it	ne
 8009ece:	81a3      	strhne	r3, [r4, #12]
 8009ed0:	bd10      	pop	{r4, pc}

08009ed2 <__sclose>:
 8009ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed6:	f000 b813 	b.w	8009f00 <_close_r>
	...

08009edc <_write_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4604      	mov	r4, r0
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	4d05      	ldr	r5, [pc, #20]	; (8009efc <_write_r+0x20>)
 8009ee8:	602a      	str	r2, [r5, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	f7f7 ff62 	bl	8001db4 <_write>
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	d102      	bne.n	8009efa <_write_r+0x1e>
 8009ef4:	682b      	ldr	r3, [r5, #0]
 8009ef6:	b103      	cbz	r3, 8009efa <_write_r+0x1e>
 8009ef8:	6023      	str	r3, [r4, #0]
 8009efa:	bd38      	pop	{r3, r4, r5, pc}
 8009efc:	2000037c 	.word	0x2000037c

08009f00 <_close_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	2300      	movs	r3, #0
 8009f04:	4d05      	ldr	r5, [pc, #20]	; (8009f1c <_close_r+0x1c>)
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	f7f7 ff6e 	bl	8001dec <_close>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_close_r+0x1a>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_close_r+0x1a>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	2000037c 	.word	0x2000037c

08009f20 <_fstat_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	2300      	movs	r3, #0
 8009f24:	4d06      	ldr	r5, [pc, #24]	; (8009f40 <_fstat_r+0x20>)
 8009f26:	4604      	mov	r4, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	f7f7 ff68 	bl	8001e02 <_fstat>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	d102      	bne.n	8009f3c <_fstat_r+0x1c>
 8009f36:	682b      	ldr	r3, [r5, #0]
 8009f38:	b103      	cbz	r3, 8009f3c <_fstat_r+0x1c>
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	bd38      	pop	{r3, r4, r5, pc}
 8009f3e:	bf00      	nop
 8009f40:	2000037c 	.word	0x2000037c

08009f44 <_isatty_r>:
 8009f44:	b538      	push	{r3, r4, r5, lr}
 8009f46:	2300      	movs	r3, #0
 8009f48:	4d05      	ldr	r5, [pc, #20]	; (8009f60 <_isatty_r+0x1c>)
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	4608      	mov	r0, r1
 8009f4e:	602b      	str	r3, [r5, #0]
 8009f50:	f7f7 ff66 	bl	8001e20 <_isatty>
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	d102      	bne.n	8009f5e <_isatty_r+0x1a>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	b103      	cbz	r3, 8009f5e <_isatty_r+0x1a>
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	2000037c 	.word	0x2000037c

08009f64 <_lseek_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	4d05      	ldr	r5, [pc, #20]	; (8009f84 <_lseek_r+0x20>)
 8009f70:	602a      	str	r2, [r5, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	f7f7 ff5e 	bl	8001e34 <_lseek>
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	d102      	bne.n	8009f82 <_lseek_r+0x1e>
 8009f7c:	682b      	ldr	r3, [r5, #0]
 8009f7e:	b103      	cbz	r3, 8009f82 <_lseek_r+0x1e>
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	2000037c 	.word	0x2000037c

08009f88 <_read_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	4608      	mov	r0, r1
 8009f8e:	4611      	mov	r1, r2
 8009f90:	2200      	movs	r2, #0
 8009f92:	4d05      	ldr	r5, [pc, #20]	; (8009fa8 <_read_r+0x20>)
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	f7f7 feef 	bl	8001d7a <_read>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_read_r+0x1e>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_read_r+0x1e>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	2000037c 	.word	0x2000037c

08009fac <_init>:
 8009fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fae:	bf00      	nop
 8009fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fb2:	bc08      	pop	{r3}
 8009fb4:	469e      	mov	lr, r3
 8009fb6:	4770      	bx	lr

08009fb8 <_fini>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	bf00      	nop
 8009fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fbe:	bc08      	pop	{r3}
 8009fc0:	469e      	mov	lr, r3
 8009fc2:	4770      	bx	lr
