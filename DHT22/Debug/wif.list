
wif.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009434  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08009578  08009578  00019578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a8c  08009a8c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a94  08009a94  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a94  08009a94  00019a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200001e0  08009c7c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08009c7c  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef2a  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280f  00000000  00000000  0002f133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00031948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  000328a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017702  00000000  00000000  000336e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012990  00000000  00000000  0004adea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc8b  00000000  00000000  0005d77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed405  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005440  00000000  00000000  000ed458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800955c 	.word	0x0800955c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800955c 	.word	0x0800955c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bac:	f000 b9ae 	b.w	8000f0c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83e 	bl	8000c38 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	4605      	mov	r5, r0
 8000bcc:	460c      	mov	r4, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	4628      	mov	r0, r5
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	f7ff ff09 	bl	80009ec <__aeabi_dcmplt>
 8000bda:	b928      	cbnz	r0, 8000be8 <__aeabi_d2lz+0x20>
 8000bdc:	4628      	mov	r0, r5
 8000bde:	4621      	mov	r1, r4
 8000be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be4:	f000 b80a 	b.w	8000bfc <__aeabi_d2ulz>
 8000be8:	4628      	mov	r0, r5
 8000bea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bee:	f000 f805 	bl	8000bfc <__aeabi_d2ulz>
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2ulz>:
 8000bfc:	b5d0      	push	{r4, r6, r7, lr}
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <__aeabi_d2ulz+0x34>)
 8000c02:	4606      	mov	r6, r0
 8000c04:	460f      	mov	r7, r1
 8000c06:	f7ff fc7f 	bl	8000508 <__aeabi_dmul>
 8000c0a:	f7ff ff55 	bl	8000ab8 <__aeabi_d2uiz>
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f7ff fc00 	bl	8000414 <__aeabi_ui2d>
 8000c14:	2200      	movs	r2, #0
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <__aeabi_d2ulz+0x38>)
 8000c18:	f7ff fc76 	bl	8000508 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4630      	mov	r0, r6
 8000c22:	4639      	mov	r1, r7
 8000c24:	f7ff fab8 	bl	8000198 <__aeabi_dsub>
 8000c28:	f7ff ff46 	bl	8000ab8 <__aeabi_d2uiz>
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c30:	3df00000 	.word	0x3df00000
 8000c34:	41f00000 	.word	0x41f00000

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	4688      	mov	r8, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14d      	bne.n	8000ce4 <__udivmoddi4+0xac>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d968      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b152      	cbz	r2, 8000c6a <__udivmoddi4+0x32>
 8000c54:	fa01 f302 	lsl.w	r3, r1, r2
 8000c58:	f1c2 0120 	rsb	r1, r2, #32
 8000c5c:	fa20 f101 	lsr.w	r1, r0, r1
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	ea41 0803 	orr.w	r8, r1, r3
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c6e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c72:	fa1f fe8c 	uxth.w	lr, ip
 8000c76:	fb01 8817 	mls	r8, r1, r7, r8
 8000c7a:	fb07 f00e 	mul.w	r0, r7, lr
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c84:	4298      	cmp	r0, r3
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x66>
 8000c88:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000c90:	f080 811e 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c94:	4298      	cmp	r0, r3
 8000c96:	f240 811b 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c9a:	3f02      	subs	r7, #2
 8000c9c:	4463      	add	r3, ip
 8000c9e:	1a1b      	subs	r3, r3, r0
 8000ca0:	fbb3 f0f1 	udiv	r0, r3, r1
 8000ca4:	fb01 3310 	mls	r3, r1, r0, r3
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb2:	45a6      	cmp	lr, r4
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cbe:	f080 8109 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8106 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc8:	4464      	add	r4, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	2100      	movs	r1, #0
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cd6:	b11e      	cbz	r6, 8000ce0 <__udivmoddi4+0xa8>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	40d4      	lsrs	r4, r2
 8000cdc:	e9c6 4300 	strd	r4, r3, [r6]
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	f000 80ee 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cee:	2100      	movs	r1, #0
 8000cf0:	e9c6 0500 	strd	r0, r5, [r6]
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f183 	clz	r1, r3
 8000cfe:	2900      	cmp	r1, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fc 	bhi.w	8000f04 <__udivmoddi4+0x2cc>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb65 0303 	sbc.w	r3, r5, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	4698      	mov	r8, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d0e2      	beq.n	8000ce0 <__udivmoddi4+0xa8>
 8000d1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1e:	e7df      	b.n	8000ce0 <__udivmoddi4+0xa8>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8091 	bne.w	8000e50 <__udivmoddi4+0x218>
 8000d2e:	eba1 000c 	sub.w	r0, r1, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d40:	fb07 0013 	mls	r0, r7, r3, r0
 8000d44:	0c25      	lsrs	r5, r4, #16
 8000d46:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	42a8      	cmp	r0, r5
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0505 	adds.w	r5, ip, r5
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	42a8      	cmp	r0, r5
 8000d5e:	f200 80ce 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a2d      	subs	r5, r5, r0
 8000d66:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d6a:	fb07 5510 	mls	r5, r7, r0, r5
 8000d6e:	fb0e fe00 	mul.w	lr, lr, r0
 8000d72:	b2a4      	uxth	r4, r4
 8000d74:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80b6 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79e      	b.n	8000cd6 <__udivmoddi4+0x9e>
 8000d98:	f1c1 0720 	rsb	r7, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa25 fa07 	lsr.w	sl, r5, r7
 8000daa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dae:	fbba f8f9 	udiv	r8, sl, r9
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	fb09 aa18 	mls	sl, r9, r8, sl
 8000dba:	408d      	lsls	r5, r1
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	431d      	orrs	r5, r3
 8000dc2:	fa00 f301 	lsl.w	r3, r0, r1
 8000dc6:	fb08 f00e 	mul.w	r0, r8, lr
 8000dca:	0c2c      	lsrs	r4, r5, #16
 8000dcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000dd0:	42a0      	cmp	r0, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	42a0      	cmp	r0, r4
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4464      	add	r4, ip
 8000df0:	1a24      	subs	r4, r4, r0
 8000df2:	fbb4 f0f9 	udiv	r0, r4, r9
 8000df6:	fb09 4410 	mls	r4, r9, r0, r4
 8000dfa:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dfe:	b2ad      	uxth	r5, r5
 8000e00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e04:	45a6      	cmp	lr, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	45a6      	cmp	lr, r4
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4464      	add	r4, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9502 	umull	r9, r5, r0, r2
 8000e22:	eba4 040e 	sub.w	r4, r4, lr
 8000e26:	42ac      	cmp	r4, r5
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46ae      	mov	lr, r5
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d069      	beq.n	8000f08 <__udivmoddi4+0x2d0>
 8000e34:	ebb3 0208 	subs.w	r2, r3, r8
 8000e38:	eb64 040e 	sbc.w	r4, r4, lr
 8000e3c:	fa22 f301 	lsr.w	r3, r2, r1
 8000e40:	fa04 f707 	lsl.w	r7, r4, r7
 8000e44:	431f      	orrs	r7, r3
 8000e46:	40cc      	lsrs	r4, r1
 8000e48:	e9c6 7400 	strd	r7, r4, [r6]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0xa8>
 8000e50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e54:	f1c2 0120 	rsb	r1, r2, #32
 8000e58:	fa25 f301 	lsr.w	r3, r5, r1
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa20 f101 	lsr.w	r1, r0, r1
 8000e64:	4095      	lsls	r5, r2
 8000e66:	430d      	orrs	r5, r1
 8000e68:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e6c:	fb07 3311 	mls	r3, r7, r1, r3
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	0c28      	lsrs	r0, r5, #16
 8000e76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e7a:	fb01 f30e 	mul.w	r3, r1, lr
 8000e7e:	4283      	cmp	r3, r0
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0000 	adds.w	r0, ip, r0
 8000e8a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	4283      	cmp	r3, r0
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3902      	subs	r1, #2
 8000e96:	4460      	add	r0, ip
 8000e98:	1ac0      	subs	r0, r0, r3
 8000e9a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e9e:	fb07 0013 	mls	r0, r7, r3, r0
 8000ea2:	b2ad      	uxth	r5, r5
 8000ea4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ea8:	fb03 f00e 	mul.w	r0, r3, lr
 8000eac:	42a8      	cmp	r0, r5
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0505 	adds.w	r5, ip, r5
 8000eb4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	42a8      	cmp	r0, r5
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4465      	add	r5, ip
 8000ec2:	1a28      	subs	r0, r5, r0
 8000ec4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	4631      	mov	r1, r6
 8000ecc:	4630      	mov	r0, r6
 8000ece:	e707      	b.n	8000ce0 <__udivmoddi4+0xa8>
 8000ed0:	462f      	mov	r7, r5
 8000ed2:	e6e4      	b.n	8000c9e <__udivmoddi4+0x66>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f9      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4643      	mov	r3, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4628      	mov	r0, r5
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4641      	mov	r1, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	4464      	add	r4, ip
 8000efa:	3802      	subs	r0, #2
 8000efc:	e747      	b.n	8000d8e <__udivmoddi4+0x156>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4465      	add	r5, ip
 8000f02:	e72f      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000f04:	4608      	mov	r0, r1
 8000f06:	e706      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e6e9      	b.n	8000ce0 <__udivmoddi4+0xa8>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <DWT_Delay_us>:

uint32_t DWT_Delay_Init(void);

// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <DWT_Delay_us+0x48>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f1e:	f002 fe4b 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <DWT_Delay_us+0x4c>)
 8000f26:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2a:	0c9b      	lsrs	r3, r3, #18
 8000f2c:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000f38:	bf00      	nop
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <DWT_Delay_us+0x48>)
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	1ad2      	subs	r2, r2, r3
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1acb      	subs	r3, r1, r3
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d3f6      	bcc.n	8000f3a <DWT_Delay_us+0x2a>
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e0001000 	.word	0xe0001000
 8000f5c:	431bde83 	.word	0x431bde83

08000f60 <DHT22_Start>:
#include "DHT22.h"

/*******************************************     NO CHANGES AFTER THIS LINE      ****************************************************/

void DHT22_Start(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
    Data_Output(DHT_PORT, DHT_PIN);
 8000f64:	2102      	movs	r1, #2
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <DHT22_Start+0x34>)
 8000f68:	f000 f816 	bl	8000f98 <Data_Output>
  	HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_RESET);//输出低电平1ms
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2102      	movs	r1, #2
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <DHT22_Start+0x34>)
 8000f72:	f001 fb2c 	bl	80025ce <HAL_GPIO_WritePin>
  	DWT_Delay_us(1200);
 8000f76:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000f7a:	f7ff ffc9 	bl	8000f10 <DWT_Delay_us>
  	HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_SET);  //释放总线，即输出高电平30us
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2102      	movs	r1, #2
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <DHT22_Start+0x34>)
 8000f84:	f001 fb23 	bl	80025ce <HAL_GPIO_WritePin>
  	DWT_Delay_us(30);
 8000f88:	201e      	movs	r0, #30
 8000f8a:	f7ff ffc1 	bl	8000f10 <DWT_Delay_us>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40020000 	.word	0x40020000

08000f98 <Data_Output>:
void Data_Output (GPIO_TypeDef *PORT, uint16_t PIN) //direction vers le capteur
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = PIN;
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; //pushpull
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f001 f95c 	bl	8002280 <HAL_GPIO_Init>
}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <Data_Input>:

void Data_Input (GPIO_TypeDef *PORT, uint16_t PIN) //direction vers le microcontroleur
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = PIN;
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f001 f940 	bl	8002280 <HAL_GPIO_Init>
}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Read_data>:
void Read_data (uint8_t *data)
  {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  	int i, k;
  	for (i=0;i<8;i++)
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e053      	b.n	80010be <Read_data+0xb6>
  	{
  		if (HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 8001016:	2102      	movs	r1, #2
 8001018:	482d      	ldr	r0, [pc, #180]	; (80010d0 <Read_data+0xc8>)
 800101a:	f001 fac1 	bl	80025a0 <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d11c      	bne.n	800105e <Read_data+0x56>
  		{
  			(*data)&= ~(1<<(7-i)); //data bit is 0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25a      	sxtb	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f1c3 0307 	rsb	r3, r3, #7
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	b25b      	sxtb	r3, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	b25b      	sxtb	r3, r3
 800103c:	4013      	ands	r3, r2
 800103e:	b25b      	sxtb	r3, r3
 8001040:	b2da      	uxtb	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	701a      	strb	r2, [r3, #0]
  			while(!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 8001046:	bf00      	nop
 8001048:	2102      	movs	r1, #2
 800104a:	4821      	ldr	r0, [pc, #132]	; (80010d0 <Read_data+0xc8>)
 800104c:	f001 faa8 	bl	80025a0 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f8      	beq.n	8001048 <Read_data+0x40>
  			DWT_Delay_us(40);
 8001056:	2028      	movs	r0, #40	; 0x28
 8001058:	f7ff ff5a 	bl	8000f10 <DWT_Delay_us>
 800105c:	e02c      	b.n	80010b8 <Read_data+0xb0>
  		}
  		else                       //data bit is 1
  		{
  			(*data)|= (1<<(7-i));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b25a      	sxtb	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	b25b      	sxtb	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b25b      	sxtb	r3, r3
 8001076:	b2da      	uxtb	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	701a      	strb	r2, [r3, #0]
  			for (k=0;k<1000;k++)
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	e009      	b.n	8001096 <Read_data+0x8e>
  			{
  				if (HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 8001082:	2102      	movs	r1, #2
 8001084:	4812      	ldr	r0, [pc, #72]	; (80010d0 <Read_data+0xc8>)
 8001086:	f001 fa8b 	bl	80025a0 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d007      	beq.n	80010a0 <Read_data+0x98>
  			for (k=0;k<1000;k++)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	3301      	adds	r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800109c:	dbf1      	blt.n	8001082 <Read_data+0x7a>
 800109e:	e000      	b.n	80010a2 <Read_data+0x9a>
  				  {
  				  	break;
 80010a0:	bf00      	nop
  				  }
  			}
  			while(!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 80010a2:	bf00      	nop
 80010a4:	2102      	movs	r1, #2
 80010a6:	480a      	ldr	r0, [pc, #40]	; (80010d0 <Read_data+0xc8>)
 80010a8:	f001 fa7a 	bl	80025a0 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f8      	beq.n	80010a4 <Read_data+0x9c>
  			DWT_Delay_us(40);
 80010b2:	2028      	movs	r0, #40	; 0x28
 80010b4:	f7ff ff2c 	bl	8000f10 <DWT_Delay_us>
  	for (i=0;i<8;i++)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	dda8      	ble.n	8001016 <Read_data+0xe>
  		}
  	 }
  }
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40020000 	.word	0x40020000

080010d4 <commence_la_reception_de_donnees>:
	}

	return DHT22_Byte;//返回当前读取到的字节
}

void commence_la_reception_de_donnees(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
    int k;
	while(!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 80010da:	bf00      	nop
 80010dc:	2102      	movs	r1, #2
 80010de:	4814      	ldr	r0, [pc, #80]	; (8001130 <commence_la_reception_de_donnees+0x5c>)
 80010e0:	f001 fa5e 	bl	80025a0 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f8      	beq.n	80010dc <commence_la_reception_de_donnees+0x8>
	            	  for(k=0;k<1000;k++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	e009      	b.n	8001104 <commence_la_reception_de_donnees+0x30>
	            	  {
	            		  if (HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 80010f0:	2102      	movs	r1, #2
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <commence_la_reception_de_donnees+0x5c>)
 80010f4:	f001 fa54 	bl	80025a0 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <commence_la_reception_de_donnees+0x3a>
	            	  for(k=0;k<1000;k++)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800110a:	dbf1      	blt.n	80010f0 <commence_la_reception_de_donnees+0x1c>
 800110c:	e000      	b.n	8001110 <commence_la_reception_de_donnees+0x3c>
	            		  {
	            	  	  	break;
 800110e:	bf00      	nop
	            	  	  }
	            	  }

	            	  while(!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));
 8001110:	bf00      	nop
 8001112:	2102      	movs	r1, #2
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <commence_la_reception_de_donnees+0x5c>)
 8001116:	f001 fa43 	bl	80025a0 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f8      	beq.n	8001112 <commence_la_reception_de_donnees+0x3e>
	            	  DWT_Delay_us(40);
 8001120:	2028      	movs	r0, #40	; 0x28
 8001122:	f7ff fef5 	bl	8000f10 <DWT_Delay_us>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40020000 	.word	0x40020000

08001134 <obtenir_donnees>:

void obtenir_donnees(uint8_t *dataH1,uint8_t *dataH2,uint8_t *dataT1,uint8_t *dataT2,uint8_t * sum){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	603b      	str	r3, [r7, #0]

	  Read_data(dataH1); //dans la library HT.c
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff ff60 	bl	8001008 <Read_data>
	  Read_data(dataH2);
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f7ff ff5d 	bl	8001008 <Read_data>
	  Read_data(dataT1);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff5a 	bl	8001008 <Read_data>
	  Read_data(dataT2);
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f7ff ff57 	bl	8001008 <Read_data>
	  Read_data(sum);
 800115a:	69b8      	ldr	r0, [r7, #24]
 800115c:	f7ff ff54 	bl	8001008 <Read_data>

}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <MX_GPIO_Init+0x104>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a3a      	ldr	r2, [pc, #232]	; (800126c <MX_GPIO_Init+0x104>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b38      	ldr	r3, [pc, #224]	; (800126c <MX_GPIO_Init+0x104>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001196:	4b35      	ldr	r3, [pc, #212]	; (800126c <MX_GPIO_Init+0x104>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a34      	ldr	r2, [pc, #208]	; (800126c <MX_GPIO_Init+0x104>)
 800119c:	f043 0320 	orr.w	r3, r3, #32
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <MX_GPIO_Init+0x104>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <MX_GPIO_Init+0x104>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a2e      	ldr	r2, [pc, #184]	; (800126c <MX_GPIO_Init+0x104>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <MX_GPIO_Init+0x104>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <MX_GPIO_Init+0x104>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a28      	ldr	r2, [pc, #160]	; (800126c <MX_GPIO_Init+0x104>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <MX_GPIO_Init+0x104>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	21a1      	movs	r1, #161	; 0xa1
 80011e2:	4823      	ldr	r0, [pc, #140]	; (8001270 <MX_GPIO_Init+0x108>)
 80011e4:	f001 f9f3 	bl	80025ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2104      	movs	r1, #4
 80011ec:	4821      	ldr	r0, [pc, #132]	; (8001274 <MX_GPIO_Init+0x10c>)
 80011ee:	f001 f9ee 	bl	80025ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	481b      	ldr	r0, [pc, #108]	; (8001278 <MX_GPIO_Init+0x110>)
 800120a:	f001 f839 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 800120e:	2381      	movs	r3, #129	; 0x81
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001216:	2301      	movs	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <MX_GPIO_Init+0x108>)
 8001226:	f001 f82b 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800122a:	2320      	movs	r3, #32
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <MX_GPIO_Init+0x108>)
 8001242:	f001 f81d 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001246:	2304      	movs	r3, #4
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_GPIO_Init+0x10c>)
 800125e:	f001 f80f 	bl	8002280 <HAL_GPIO_Init>

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800

0800127c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_I2C1_Init+0x50>)
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <MX_I2C1_Init+0x54>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_I2C1_Init+0x50>)
 8001288:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_I2C1_Init+0x58>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_I2C1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_I2C1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_I2C1_Init+0x50>)
 800129a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_I2C1_Init+0x50>)
 80012ba:	f001 f9a1 	bl	8002600 <HAL_I2C_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c4:	f000 faf2 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200001fc 	.word	0x200001fc
 80012d0:	40005400 	.word	0x40005400
 80012d4:	000186a0 	.word	0x000186a0

080012d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a17      	ldr	r2, [pc, #92]	; (8001354 <HAL_I2C_MspInit+0x7c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d128      	bne.n	800134c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_I2C_MspInit+0x80>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a16      	ldr	r2, [pc, #88]	; (8001358 <HAL_I2C_MspInit+0x80>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_I2C_MspInit+0x80>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001312:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001318:	2312      	movs	r3, #18
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131c:	2301      	movs	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001324:	2304      	movs	r3, #4
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	480b      	ldr	r0, [pc, #44]	; (800135c <HAL_I2C_MspInit+0x84>)
 8001330:	f000 ffa6 	bl	8002280 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_I2C_MspInit+0x80>)
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_I2C_MspInit+0x80>)
 800133a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800133e:	6253      	str	r3, [r2, #36]	; 0x24
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_I2C_MspInit+0x80>)
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40005400 	.word	0x40005400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400

08001360 <lcd_init>:
#include "i2c.h"
#include "DHT22.h"


void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af02      	add	r7, sp, #8
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	f043 030c 	orr.w	r3, r3, #12
 8001376:	b2da      	uxtb	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f043 0320 	orr.w	r3, r3, #32
 8001388:	b2db      	uxtb	r3, r3
 800138a:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 800138c:	f107 0118 	add.w	r1, r7, #24
 8001390:	230a      	movs	r3, #10
 8001392:	2202      	movs	r2, #2
 8001394:	486c      	ldr	r0, [pc, #432]	; (8001548 <lcd_init+0x1e8>)
 8001396:	f002 ffa0 	bl	80042da <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800139a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800139e:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80013a0:	f107 0114 	add.w	r1, r7, #20
 80013a4:	230a      	movs	r3, #10
 80013a6:	2202      	movs	r2, #2
 80013a8:	4867      	ldr	r0, [pc, #412]	; (8001548 <lcd_init+0x1e8>)
 80013aa:	f002 ff96 	bl	80042da <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80013ae:	2364      	movs	r3, #100	; 0x64
 80013b0:	2205      	movs	r2, #5
 80013b2:	217c      	movs	r1, #124	; 0x7c
 80013b4:	69f8      	ldr	r0, [r7, #28]
 80013b6:	f001 fb65 	bl	8002a84 <HAL_I2C_IsDeviceReady>
 80013ba:	4603      	mov	r3, r0
 80013bc:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80013be:	f107 0113 	add.w	r1, r7, #19
 80013c2:	230a      	movs	r3, #10
 80013c4:	2201      	movs	r2, #1
 80013c6:	4860      	ldr	r0, [pc, #384]	; (8001548 <lcd_init+0x1e8>)
 80013c8:	f002 ff87 	bl	80042da <HAL_UART_Transmit>
	HAL_Delay(50);
 80013cc:	2032      	movs	r0, #50	; 0x32
 80013ce:	f000 fda9 	bl	8001f24 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80013d2:	f107 0218 	add.w	r2, r7, #24
 80013d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2302      	movs	r3, #2
 80013de:	217c      	movs	r1, #124	; 0x7c
 80013e0:	69f8      	ldr	r0, [r7, #28]
 80013e2:	f001 fa51 	bl	8002888 <HAL_I2C_Master_Transmit>
 80013e6:	4603      	mov	r3, r0
 80013e8:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80013ea:	f107 0112 	add.w	r1, r7, #18
 80013ee:	230a      	movs	r3, #10
 80013f0:	2201      	movs	r2, #1
 80013f2:	4855      	ldr	r0, [pc, #340]	; (8001548 <lcd_init+0x1e8>)
 80013f4:	f002 ff71 	bl	80042da <HAL_UART_Transmit>
	HAL_Delay(50);
 80013f8:	2032      	movs	r0, #50	; 0x32
 80013fa:	f000 fd93 	bl	8001f24 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80013fe:	f107 0218 	add.w	r2, r7, #24
 8001402:	f241 3388 	movw	r3, #5000	; 0x1388
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2302      	movs	r3, #2
 800140a:	217c      	movs	r1, #124	; 0x7c
 800140c:	69f8      	ldr	r0, [r7, #28]
 800140e:	f001 fa3b 	bl	8002888 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001412:	2005      	movs	r0, #5
 8001414:	f000 fd86 	bl	8001f24 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001418:	f107 0218 	add.w	r2, r7, #24
 800141c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2302      	movs	r3, #2
 8001424:	217c      	movs	r1, #124	; 0x7c
 8001426:	69f8      	ldr	r0, [r7, #28]
 8001428:	f001 fa2e 	bl	8002888 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2204      	movs	r2, #4
 8001430:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	785b      	ldrb	r3, [r3, #1]
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	b2db      	uxtb	r3, r3
 800143c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800143e:	f107 0218 	add.w	r2, r7, #24
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2302      	movs	r3, #2
 800144a:	217c      	movs	r1, #124	; 0x7c
 800144c:	69f8      	ldr	r0, [r7, #28]
 800144e:	f001 fa1b 	bl	8002888 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001452:	2301      	movs	r3, #1
 8001454:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001456:	f107 0218 	add.w	r2, r7, #24
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2302      	movs	r3, #2
 8001462:	217c      	movs	r1, #124	; 0x7c
 8001464:	69f8      	ldr	r0, [r7, #28]
 8001466:	f001 fa0f 	bl	8002888 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800146a:	2002      	movs	r0, #2
 800146c:	f000 fd5a 	bl	8001f24 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2202      	movs	r2, #2
 8001474:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	789b      	ldrb	r3, [r3, #2]
 800147a:	f043 0304 	orr.w	r3, r3, #4
 800147e:	b2db      	uxtb	r3, r3
 8001480:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001482:	f107 0218 	add.w	r2, r7, #24
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2302      	movs	r3, #2
 800148e:	217c      	movs	r1, #124	; 0x7c
 8001490:	69f8      	ldr	r0, [r7, #28]
 8001492:	f001 f9f9 	bl	8002888 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8001496:	2300      	movs	r3, #0
 8001498:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800149e:	f107 0210 	add.w	r2, r7, #16
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2302      	movs	r3, #2
 80014aa:	21c4      	movs	r1, #196	; 0xc4
 80014ac:	69f8      	ldr	r0, [r7, #28]
 80014ae:	f001 f9eb 	bl	8002888 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80014b2:	2308      	movs	r3, #8
 80014b4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80014b6:	23ff      	movs	r3, #255	; 0xff
 80014b8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80014ba:	f107 0210 	add.w	r2, r7, #16
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2302      	movs	r3, #2
 80014c6:	21c4      	movs	r1, #196	; 0xc4
 80014c8:	69f8      	ldr	r0, [r7, #28]
 80014ca:	f001 f9dd 	bl	8002888 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80014ce:	2301      	movs	r3, #1
 80014d0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80014d2:	2320      	movs	r3, #32
 80014d4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80014d6:	f107 0210 	add.w	r2, r7, #16
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2302      	movs	r3, #2
 80014e2:	21c4      	movs	r1, #196	; 0xc4
 80014e4:	69f8      	ldr	r0, [r7, #28]
 80014e6:	f001 f9cf 	bl	8002888 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80014ea:	2304      	movs	r3, #4
 80014ec:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80014ee:	23ff      	movs	r3, #255	; 0xff
 80014f0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80014f2:	f107 020c 	add.w	r2, r7, #12
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2302      	movs	r3, #2
 80014fe:	21c4      	movs	r1, #196	; 0xc4
 8001500:	69f8      	ldr	r0, [r7, #28]
 8001502:	f001 f9c1 	bl	8002888 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8001506:	2303      	movs	r3, #3
 8001508:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800150a:	23ff      	movs	r3, #255	; 0xff
 800150c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800150e:	f107 020c 	add.w	r2, r7, #12
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2302      	movs	r3, #2
 800151a:	21c4      	movs	r1, #196	; 0xc4
 800151c:	69f8      	ldr	r0, [r7, #28]
 800151e:	f001 f9b3 	bl	8002888 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8001522:	2302      	movs	r3, #2
 8001524:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001526:	23ff      	movs	r3, #255	; 0xff
 8001528:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800152a:	f107 020c 	add.w	r2, r7, #12
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2302      	movs	r3, #2
 8001536:	21c4      	movs	r1, #196	; 0xc4
 8001538:	69f8      	ldr	r0, [r7, #28]
 800153a:	f001 f9a5 	bl	8002888 <HAL_I2C_Master_Transmit>


}
 800153e:	bf00      	nop
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200002d8 	.word	0x200002d8

0800154c <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	4808      	ldr	r0, [pc, #32]	; (8001578 <clearlcd+0x2c>)
 8001556:	f000 f87a 	bl	800164e <lcd_position>
	lcd_print(&hi2c1,"                ");
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <clearlcd+0x30>)
 800155c:	4806      	ldr	r0, [pc, #24]	; (8001578 <clearlcd+0x2c>)
 800155e:	f000 f84d 	bl	80015fc <lcd_print>
	lcd_position(&hi2c1,0,1);
 8001562:	2201      	movs	r2, #1
 8001564:	2100      	movs	r1, #0
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <clearlcd+0x2c>)
 8001568:	f000 f871 	bl	800164e <lcd_position>
	lcd_print(&hi2c1,"                ");
 800156c:	4903      	ldr	r1, [pc, #12]	; (800157c <clearlcd+0x30>)
 800156e:	4802      	ldr	r0, [pc, #8]	; (8001578 <clearlcd+0x2c>)
 8001570:	f000 f844 	bl	80015fc <lcd_print>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200001fc 	.word	0x200001fc
 800157c:	08009578 	.word	0x08009578

08001580 <affichage>:
	k=(value-10*i-j)/0.1;

    unsigned char data[2] = {0x40, 0x30|value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, (uint8_t *) data,2,1000);
}*/
void affichage (float Humidite ,float Temperature ,char *buffH,char *buffT){
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]


	/*commence transmission vers LCD*/
	clearlcd();
 800158e:	f7ff ffdd 	bl	800154c <clearlcd>
	sprintf(buffH,"Humidity: %.1f", Humidite);
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7fe ff60 	bl	8000458 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4913      	ldr	r1, [pc, #76]	; (80015ec <affichage+0x6c>)
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f004 fa20 	bl	80059e4 <siprintf>
	sprintf(buffT, "Temp.: %.1f C", Temperature);
 80015a4:	68b8      	ldr	r0, [r7, #8]
 80015a6:	f7fe ff57 	bl	8000458 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4910      	ldr	r1, [pc, #64]	; (80015f0 <affichage+0x70>)
 80015b0:	6838      	ldr	r0, [r7, #0]
 80015b2:	f004 fa17 	bl	80059e4 <siprintf>
    lcd_position(&hi2c1,0,0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	480e      	ldr	r0, [pc, #56]	; (80015f4 <affichage+0x74>)
 80015bc:	f000 f847 	bl	800164e <lcd_position>
    lcd_print(&hi2c1,buffH);
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	480c      	ldr	r0, [pc, #48]	; (80015f4 <affichage+0x74>)
 80015c4:	f000 f81a 	bl	80015fc <lcd_print>
    lcd_print(&hi2c1,"%");
 80015c8:	490b      	ldr	r1, [pc, #44]	; (80015f8 <affichage+0x78>)
 80015ca:	480a      	ldr	r0, [pc, #40]	; (80015f4 <affichage+0x74>)
 80015cc:	f000 f816 	bl	80015fc <lcd_print>
    lcd_position(&hi2c1,0,1);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2100      	movs	r1, #0
 80015d4:	4807      	ldr	r0, [pc, #28]	; (80015f4 <affichage+0x74>)
 80015d6:	f000 f83a 	bl	800164e <lcd_position>
    lcd_print(&hi2c1,buffT);
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <affichage+0x74>)
 80015de:	f000 f80d 	bl	80015fc <lcd_print>

}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	0800958c 	.word	0x0800958c
 80015f0:	0800959c 	.word	0x0800959c
 80015f4:	200001fc 	.word	0x200001fc
 80015f8:	080095ac 	.word	0x080095ac

080015fc <lcd_print>:
void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af02      	add	r7, sp, #8
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 800160a:	2340      	movs	r3, #64	; 0x40
 800160c:	733b      	strb	r3, [r7, #12]
    int i=0;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001612:	e011      	b.n	8001638 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	4413      	add	r3, r2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800161e:	f107 020c 	add.w	r2, r7, #12
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2302      	movs	r3, #2
 800162a:	217c      	movs	r1, #124	; 0x7c
 800162c:	6938      	ldr	r0, [r7, #16]
 800162e:	f001 f92b 	bl	8002888 <HAL_I2C_Master_Transmit>
            i++;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e7      	bne.n	8001614 <lcd_print+0x18>
   }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <lcd_position>:
	    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, (uint8_t *) data,2,1000);


}*/
void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af02      	add	r7, sp, #8
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	70fb      	strb	r3, [r7, #3]
 800165a:	4613      	mov	r3, r2
 800165c:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001662:	78bb      	ldrb	r3, [r7, #2]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d104      	bne.n	8001672 <lcd_position+0x24>
    {
        col = col | 0x80;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800166e:	70fb      	strb	r3, [r7, #3]
 8001670:	e003      	b.n	800167a <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001678:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001682:	f107 0208 	add.w	r2, r7, #8
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2302      	movs	r3, #2
 800168e:	217c      	movs	r1, #124	; 0x7c
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f001 f8f9 	bl	8002888 <HAL_I2C_Master_Transmit>
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b09b      	sub	sp, #108	; 0x6c
 80016a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	float Humidite = 0.0,Temperature = 0.0;
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	65bb      	str	r3, [r7, #88]	; 0x58
	 /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b2:	f000 fbc8 	bl	8001e46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b6:	f000 f8ab 	bl	8001810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ba:	f7ff fd55 	bl	8001168 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016be:	f000 faef 	bl	8001ca0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016c2:	f7ff fddb 	bl	800127c <MX_I2C1_Init>
  MX_TIM2_Init();
 80016c6:	f000 fa29 	bl	8001b1c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80016ca:	f000 fabf 	bl	8001c4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_init(&hi2c1, &DataStruct);
 80016ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016d2:	4619      	mov	r1, r3
 80016d4:	4847      	ldr	r0, [pc, #284]	; (80017f4 <main+0x154>)
 80016d6:	f7ff fe43 	bl	8001360 <lcd_init>
  HAL_TIM_Base_Start(&htim2);
 80016da:	4847      	ldr	r0, [pc, #284]	; (80017f8 <main+0x158>)
 80016dc:	f002 fb3e 	bl	8003d5c <HAL_TIM_Base_Start>
  DWT_Delay_Init();
 80016e0:	f000 fa84 	bl	8001bec <DWT_Delay_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
                 HAL_Delay(3000);
 80016e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016e8:	f000 fc1c 	bl	8001f24 <HAL_Delay>
                 DHT22_Start();
 80016ec:	f7ff fc38 	bl	8000f60 <DHT22_Start>
   	           	 Data_Input(DHT_PORT, DHT_PIN);
 80016f0:	2102      	movs	r1, #2
 80016f2:	4842      	ldr	r0, [pc, #264]	; (80017fc <main+0x15c>)
 80016f4:	f7ff fc6c 	bl	8000fd0 <Data_Input>
   	             commence_la_reception_de_donnees();
 80016f8:	f7ff fcec 	bl	80010d4 <commence_la_reception_de_donnees>
   	             obtenir_donnees(&dataH1,&dataH2,&dataT1,&dataT2,&sum);
 80016fc:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001700:	f107 0245 	add.w	r2, r7, #69	; 0x45
 8001704:	f107 0146 	add.w	r1, r7, #70	; 0x46
 8001708:	f107 0047 	add.w	r0, r7, #71	; 0x47
 800170c:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	4623      	mov	r3, r4
 8001714:	f7ff fd0e 	bl	8001134 <obtenir_donnees>
                 check_sum = (uint8_t)(dataH1 + dataH2 + dataT1 + dataT2);
 8001718:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800171c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001720:	4413      	add	r3, r2
 8001722:	b2da      	uxtb	r2, r3
 8001724:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001728:	4413      	add	r3, r2
 800172a:	b2da      	uxtb	r2, r3
 800172c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001730:	4413      	add	r3, r2
 8001732:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                 if(check_sum == sum){
 8001736:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800173a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800173e:	429a      	cmp	r2, r3
 8001740:	d12c      	bne.n	800179c <main+0xfc>
                 Humidite = (float)((256 * dataH1 + dataH2) / 10.0);//转换为湿度数据,除以10是因为传感器出来的值是实际的10倍
 8001742:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800174c:	4413      	add	r3, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fe70 	bl	8000434 <__aeabi_i2d>
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <main+0x160>)
 800175a:	f7fe ffff 	bl	800075c <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff f9c7 	bl	8000af8 <__aeabi_d2f>
 800176a:	4603      	mov	r3, r0
 800176c:	65fb      	str	r3, [r7, #92]	; 0x5c
	         	 Temperature = (float)((256 * dataT1 + dataT2) / 10.0);//转换为温度数据*/
 800176e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001778:	4413      	add	r3, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fe5a 	bl	8000434 <__aeabi_i2d>
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <main+0x160>)
 8001786:	f7fe ffe9 	bl	800075c <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f9b1 	bl	8000af8 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	65bb      	str	r3, [r7, #88]	; 0x58
 800179a:	e003      	b.n	80017a4 <main+0x104>
                 }
                 else{
                 lcd_print(&hi2c1,"SUM != CHECK");
 800179c:	4919      	ldr	r1, [pc, #100]	; (8001804 <main+0x164>)
 800179e:	4815      	ldr	r0, [pc, #84]	; (80017f4 <main+0x154>)
 80017a0:	f7ff ff2c 	bl	80015fc <lcd_print>
                 }
                 affichage(Humidite,Temperature,buffH,buffT);
 80017a4:	463b      	mov	r3, r7
 80017a6:	f107 0220 	add.w	r2, r7, #32
 80017aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80017ac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80017ae:	f7ff fee7 	bl	8001580 <affichage>
                 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2102      	movs	r1, #2
 80017b6:	4811      	ldr	r0, [pc, #68]	; (80017fc <main+0x15c>)
 80017b8:	f000 ff09 	bl	80025ce <HAL_GPIO_WritePin>


 	             char * msg=buffT;
 80017bc:	463b      	mov	r3, r7
 80017be:	653b      	str	r3, [r7, #80]	; 0x50
                 char * a ="\n\r";
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <main+0x168>)
 80017c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 	             HAL_UART_Transmit (&huart2, (uint8_t *)msg, strlen (msg), 0xFFFF);
 80017c4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80017c6:	f7fe fcdb 	bl	8000180 <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <main+0x16c>)
 80017d6:	f002 fd80 	bl	80042da <HAL_UART_Transmit>
 	             HAL_UART_Transmit (&huart2, (uint8_t *)a, strlen (a), 0xFFFF);
 80017da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017dc:	f7fe fcd0 	bl	8000180 <strlen>
 80017e0:	4603      	mov	r3, r0
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80017ea:	4808      	ldr	r0, [pc, #32]	; (800180c <main+0x16c>)
 80017ec:	f002 fd75 	bl	80042da <HAL_UART_Transmit>
  {
 80017f0:	e778      	b.n	80016e4 <main+0x44>
 80017f2:	bf00      	nop
 80017f4:	200001fc 	.word	0x200001fc
 80017f8:	20000254 	.word	0x20000254
 80017fc:	40020000 	.word	0x40020000
 8001800:	40240000 	.word	0x40240000
 8001804:	080095b0 	.word	0x080095b0
 8001808:	080095c0 	.word	0x080095c0
 800180c:	200002d8 	.word	0x200002d8

08001810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b092      	sub	sp, #72	; 0x48
 8001814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	2234      	movs	r2, #52	; 0x34
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f003 fa66 	bl	8004cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <SystemClock_Config+0x98>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800183a:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <SystemClock_Config+0x98>)
 800183c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001840:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001842:	2302      	movs	r3, #2
 8001844:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001846:	2301      	movs	r3, #1
 8001848:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184a:	2310      	movs	r3, #16
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184e:	2302      	movs	r3, #2
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001852:	2300      	movs	r3, #0
 8001854:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001856:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800185a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800185c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001860:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fc42 	bl	80030f0 <HAL_RCC_OscConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001872:	f000 f81b 	bl	80018ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001876:	230f      	movs	r3, #15
 8001878:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187a:	2303      	movs	r3, #3
 800187c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800188a:	463b      	mov	r3, r7
 800188c:	2101      	movs	r1, #1
 800188e:	4618      	mov	r0, r3
 8001890:	f001 ff5e 	bl	8003750 <HAL_RCC_ClockConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800189a:	f000 f807 	bl	80018ac <Error_Handler>
  }
}
 800189e:	bf00      	nop
 80018a0:	3748      	adds	r7, #72	; 0x48
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40007000 	.word	0x40007000

080018ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b0:	b672      	cpsid	i
}
 80018b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <Error_Handler+0x8>
	...

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_MspInit+0x5c>)
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	4a14      	ldr	r2, [pc, #80]	; (8001914 <HAL_MspInit+0x5c>)
 80018c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018c8:	6253      	str	r3, [r2, #36]	; 0x24
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_MspInit+0x5c>)
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_MspInit+0x5c>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <HAL_MspInit+0x5c>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6213      	str	r3, [r2, #32]
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_MspInit+0x5c>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_MspInit+0x5c>)
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_MspInit+0x5c>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	6253      	str	r3, [r2, #36]	; 0x24
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_MspInit+0x5c>)
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001906:	2007      	movs	r0, #7
 8001908:	f000 fbfa 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195e:	f000 fac5 	bl	8001eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <USART1_IRQHandler+0x10>)
 800196e:	f002 fd47 	bl	8004400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000294 	.word	0x20000294

0800197c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <USART2_IRQHandler+0x10>)
 8001982:	f002 fd3d 	bl	8004400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200002d8 	.word	0x200002d8

08001990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return 1;
 8001994:	2301      	movs	r3, #1
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <_kill>:

int _kill(int pid, int sig)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019a8:	f003 f978 	bl	8004c9c <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2216      	movs	r2, #22
 80019b0:	601a      	str	r2, [r3, #0]
  return -1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_exit>:

void _exit (int status)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffe7 	bl	800199e <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d0:	e7fe      	b.n	80019d0 <_exit+0x12>

080019d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e00a      	b.n	80019fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e4:	f3af 8000 	nop.w
 80019e8:	4601      	mov	r1, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	60ba      	str	r2, [r7, #8]
 80019f0:	b2ca      	uxtb	r2, r1
 80019f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dbf0      	blt.n	80019e4 <_read+0x12>
  }

  return len;
 8001a02:	687b      	ldr	r3, [r7, #4]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e009      	b.n	8001a32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	60ba      	str	r2, [r7, #8]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dbf1      	blt.n	8001a1e <_write+0x12>
  }
  return len;
 8001a3a:	687b      	ldr	r3, [r7, #4]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_close>:

int _close(int file)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <_isatty>:

int _isatty(int file)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a80:	2301      	movs	r3, #1
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f003 f8e2 	bl	8004c9c <__errno>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20014000 	.word	0x20014000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	20000250 	.word	0x20000250
 8001b0c:	20000330 	.word	0x20000330

08001b10 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b30:	463b      	mov	r3, r7
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_TIM2_Init+0x94>)
 8001b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <MX_TIM2_Init+0x94>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_TIM2_Init+0x94>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_TIM2_Init+0x94>)
 8001b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <MX_TIM2_Init+0x94>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MX_TIM2_Init+0x94>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b60:	4813      	ldr	r0, [pc, #76]	; (8001bb0 <MX_TIM2_Init+0x94>)
 8001b62:	f002 f8bb 	bl	8003cdc <HAL_TIM_Base_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b6c:	f7ff fe9e 	bl	80018ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <MX_TIM2_Init+0x94>)
 8001b7e:	f002 f937 	bl	8003df0 <HAL_TIM_ConfigClockSource>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b88:	f7ff fe90 	bl	80018ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_TIM2_Init+0x94>)
 8001b9a:	f002 faf3 	bl	8004184 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ba4:	f7ff fe82 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000254 	.word	0x20000254

08001bb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc4:	d10b      	bne.n	8001bde <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_TIM_Base_MspInit+0x34>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_TIM_Base_MspInit+0x34>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6253      	str	r3, [r2, #36]	; 0x24
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_TIM_Base_MspInit+0x34>)
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40023800 	.word	0x40023800

08001bec <DWT_Delay_Init>:

#include "timer.h"
#include "stm32l1xx_hal.h"

uint32_t DWT_Delay_Init(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <DWT_Delay_Init+0x58>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <DWT_Delay_Init+0x58>)
 8001bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bfa:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <DWT_Delay_Init+0x58>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <DWT_Delay_Init+0x58>)
 8001c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c06:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <DWT_Delay_Init+0x5c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <DWT_Delay_Init+0x5c>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <DWT_Delay_Init+0x5c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <DWT_Delay_Init+0x5c>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <DWT_Delay_Init+0x5c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001c26:	bf00      	nop
    __ASM volatile ("NOP");
 8001c28:	bf00      	nop
    __ASM volatile ("NOP");
 8001c2a:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <DWT_Delay_Init+0x5c>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001c34:	2300      	movs	r3, #0
 8001c36:	e000      	b.n	8001c3a <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001c38:	2301      	movs	r3, #1
    }
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000edf0 	.word	0xe000edf0
 8001c48:	e0001000 	.word	0xe0001000

08001c4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <MX_USART1_UART_Init+0x50>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c84:	f002 fadc 	bl	8004240 <HAL_UART_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c8e:	f7ff fe0d 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000294 	.word	0x20000294
 8001c9c:	40013800 	.word	0x40013800

08001ca0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <MX_USART2_UART_Init+0x50>)
 8001ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cd8:	f002 fab2 	bl	8004240 <HAL_UART_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ce2:	f7ff fde3 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200002d8 	.word	0x200002d8
 8001cf0:	40004400 	.word	0x40004400

08001cf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a36      	ldr	r2, [pc, #216]	; (8001dec <HAL_UART_MspInit+0xf8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d131      	bne.n	8001d7a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d16:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <HAL_UART_MspInit+0xfc>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a35      	ldr	r2, [pc, #212]	; (8001df0 <HAL_UART_MspInit+0xfc>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <HAL_UART_MspInit+0xfc>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <HAL_UART_MspInit+0xfc>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a2f      	ldr	r2, [pc, #188]	; (8001df0 <HAL_UART_MspInit+0xfc>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_UART_MspInit+0xfc>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d58:	2307      	movs	r3, #7
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	4824      	ldr	r0, [pc, #144]	; (8001df4 <HAL_UART_MspInit+0x100>)
 8001d64:	f000 fa8c 	bl	8002280 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2025      	movs	r0, #37	; 0x25
 8001d6e:	f000 f9d2 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d72:	2025      	movs	r0, #37	; 0x25
 8001d74:	f000 f9eb 	bl	800214e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d78:	e034      	b.n	8001de4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <HAL_UART_MspInit+0x104>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d12f      	bne.n	8001de4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_UART_MspInit+0xfc>)
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <HAL_UART_MspInit+0xfc>)
 8001d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8e:	6253      	str	r3, [r2, #36]	; 0x24
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_UART_MspInit+0xfc>)
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_UART_MspInit+0xfc>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <HAL_UART_MspInit+0xfc>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	61d3      	str	r3, [r2, #28]
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_UART_MspInit+0xfc>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001db4:	230c      	movs	r3, #12
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc4:	2307      	movs	r3, #7
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4809      	ldr	r0, [pc, #36]	; (8001df4 <HAL_UART_MspInit+0x100>)
 8001dd0:	f000 fa56 	bl	8002280 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2026      	movs	r0, #38	; 0x26
 8001dda:	f000 f99c 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dde:	2026      	movs	r0, #38	; 0x26
 8001de0:	f000 f9b5 	bl	800214e <HAL_NVIC_EnableIRQ>
}
 8001de4:	bf00      	nop
 8001de6:	3730      	adds	r7, #48	; 0x30
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40013800 	.word	0x40013800
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40004400 	.word	0x40004400

08001dfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dfc:	480c      	ldr	r0, [pc, #48]	; (8001e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dfe:	490d      	ldr	r1, [pc, #52]	; (8001e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e00:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e14:	4c0a      	ldr	r4, [pc, #40]	; (8001e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e22:	f7ff fe75 	bl	8001b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e26:	f002 ff3f 	bl	8004ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e2a:	f7ff fc39 	bl	80016a0 <main>
  bx lr
 8001e2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e38:	08009a9c 	.word	0x08009a9c
  ldr r2, =_sbss
 8001e3c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e40:	20000330 	.word	0x20000330

08001e44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC1_IRQHandler>

08001e46 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f955 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 f80e 	bl	8001e78 <HAL_InitTick>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	71fb      	strb	r3, [r7, #7]
 8001e66:	e001      	b.n	8001e6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e68:	f7ff fd26 	bl	80018b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <HAL_InitTick+0x68>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d022      	beq.n	8001ed2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_InitTick+0x6c>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_InitTick+0x68>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f962 	bl	800216a <HAL_SYSTICK_Config>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10f      	bne.n	8001ecc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b0f      	cmp	r3, #15
 8001eb0:	d809      	bhi.n	8001ec6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eba:	f000 f92c 	bl	8002116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_InitTick+0x70>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	e007      	b.n	8001ed6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	e004      	b.n	8001ed6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e001      	b.n	8001ed6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_IncTick+0x1c>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_IncTick+0x20>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a03      	ldr	r2, [pc, #12]	; (8001f08 <HAL_IncTick+0x1c>)
 8001efc:	6013      	str	r3, [r2, #0]
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2000031c 	.word	0x2000031c
 8001f0c:	20000008 	.word	0x20000008

08001f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return uwTick;
 8001f14:	4b02      	ldr	r3, [pc, #8]	; (8001f20 <HAL_GetTick+0x10>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	2000031c 	.word	0x2000031c

08001f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff fff0 	bl	8001f10 <HAL_GetTick>
 8001f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f3c:	d004      	beq.n	8001f48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_Delay+0x40>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4413      	add	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f48:	bf00      	nop
 8001f4a:	f7ff ffe1 	bl	8001f10 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d8f7      	bhi.n	8001f4a <HAL_Delay+0x26>
  {
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000008 	.word	0x20000008

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db0b      	blt.n	8001ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4906      	ldr	r1, [pc, #24]	; (8002000 <__NVIC_EnableIRQ+0x34>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2001      	movs	r0, #1
 8001fee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	; (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020cc:	d301      	bcc.n	80020d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00f      	b.n	80020f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <SysTick_Config+0x40>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020da:	210f      	movs	r1, #15
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e0:	f7ff ff90 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <SysTick_Config+0x40>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <SysTick_Config+0x40>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	e000e010 	.word	0xe000e010

08002100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff2d 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002128:	f7ff ff42 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 800212c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f7ff ff90 	bl	8002058 <NVIC_EncodePriority>
 8002138:	4602      	mov	r2, r0
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff5f 	bl	8002004 <__NVIC_SetPriority>
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff35 	bl	8001fcc <__NVIC_EnableIRQ>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ffa2 	bl	80020bc <SysTick_Config>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d008      	beq.n	80021ac <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2204      	movs	r2, #4
 800219e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e022      	b.n	80021f2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 020e 	bic.w	r2, r2, #14
 80021ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f003 021c 	and.w	r2, r3, #28
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d005      	beq.n	8002220 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2204      	movs	r2, #4
 8002218:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	e029      	b.n	8002274 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 020e 	bic.w	r2, r2, #14
 800222e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f003 021c 	and.w	r2, r3, #28
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
    }
  }
  return status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002296:	e160      	b.n	800255a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8152 	beq.w	8002554 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d005      	beq.n	80022c8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d130      	bne.n	800232a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80022fe:	2201      	movs	r2, #1
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	f003 0201 	and.w	r2, r3, #1
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b03      	cmp	r3, #3
 8002334:	d017      	beq.n	8002366 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d123      	bne.n	80023ba <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	08da      	lsrs	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3208      	adds	r2, #8
 800237a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	08da      	lsrs	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3208      	adds	r2, #8
 80023b4:	6939      	ldr	r1, [r7, #16]
 80023b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0203 	and.w	r2, r3, #3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80ac 	beq.w	8002554 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fc:	4b5e      	ldr	r3, [pc, #376]	; (8002578 <HAL_GPIO_Init+0x2f8>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a5d      	ldr	r2, [pc, #372]	; (8002578 <HAL_GPIO_Init+0x2f8>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	4b5b      	ldr	r3, [pc, #364]	; (8002578 <HAL_GPIO_Init+0x2f8>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002414:	4a59      	ldr	r2, [pc, #356]	; (800257c <HAL_GPIO_Init+0x2fc>)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	3302      	adds	r3, #2
 800241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002420:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	220f      	movs	r2, #15
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a51      	ldr	r2, [pc, #324]	; (8002580 <HAL_GPIO_Init+0x300>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d025      	beq.n	800248c <HAL_GPIO_Init+0x20c>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a50      	ldr	r2, [pc, #320]	; (8002584 <HAL_GPIO_Init+0x304>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d01f      	beq.n	8002488 <HAL_GPIO_Init+0x208>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a4f      	ldr	r2, [pc, #316]	; (8002588 <HAL_GPIO_Init+0x308>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d019      	beq.n	8002484 <HAL_GPIO_Init+0x204>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a4e      	ldr	r2, [pc, #312]	; (800258c <HAL_GPIO_Init+0x30c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d013      	beq.n	8002480 <HAL_GPIO_Init+0x200>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a4d      	ldr	r2, [pc, #308]	; (8002590 <HAL_GPIO_Init+0x310>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00d      	beq.n	800247c <HAL_GPIO_Init+0x1fc>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a4c      	ldr	r2, [pc, #304]	; (8002594 <HAL_GPIO_Init+0x314>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <HAL_GPIO_Init+0x1f8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a4b      	ldr	r2, [pc, #300]	; (8002598 <HAL_GPIO_Init+0x318>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_GPIO_Init+0x1f4>
 8002470:	2306      	movs	r3, #6
 8002472:	e00c      	b.n	800248e <HAL_GPIO_Init+0x20e>
 8002474:	2307      	movs	r3, #7
 8002476:	e00a      	b.n	800248e <HAL_GPIO_Init+0x20e>
 8002478:	2305      	movs	r3, #5
 800247a:	e008      	b.n	800248e <HAL_GPIO_Init+0x20e>
 800247c:	2304      	movs	r3, #4
 800247e:	e006      	b.n	800248e <HAL_GPIO_Init+0x20e>
 8002480:	2303      	movs	r3, #3
 8002482:	e004      	b.n	800248e <HAL_GPIO_Init+0x20e>
 8002484:	2302      	movs	r3, #2
 8002486:	e002      	b.n	800248e <HAL_GPIO_Init+0x20e>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_GPIO_Init+0x20e>
 800248c:	2300      	movs	r3, #0
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	f002 0203 	and.w	r2, r2, #3
 8002494:	0092      	lsls	r2, r2, #2
 8002496:	4093      	lsls	r3, r2
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800249e:	4937      	ldr	r1, [pc, #220]	; (800257c <HAL_GPIO_Init+0x2fc>)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ac:	4b3b      	ldr	r3, [pc, #236]	; (800259c <HAL_GPIO_Init+0x31c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024d0:	4a32      	ldr	r2, [pc, #200]	; (800259c <HAL_GPIO_Init+0x31c>)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024d6:	4b31      	ldr	r3, [pc, #196]	; (800259c <HAL_GPIO_Init+0x31c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024fa:	4a28      	ldr	r2, [pc, #160]	; (800259c <HAL_GPIO_Init+0x31c>)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002500:	4b26      	ldr	r3, [pc, #152]	; (800259c <HAL_GPIO_Init+0x31c>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002524:	4a1d      	ldr	r2, [pc, #116]	; (800259c <HAL_GPIO_Init+0x31c>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800252a:	4b1c      	ldr	r3, [pc, #112]	; (800259c <HAL_GPIO_Init+0x31c>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800254e:	4a13      	ldr	r2, [pc, #76]	; (800259c <HAL_GPIO_Init+0x31c>)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3301      	adds	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	f47f ae97 	bne.w	8002298 <HAL_GPIO_Init+0x18>
  }
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	40010000 	.word	0x40010000
 8002580:	40020000 	.word	0x40020000
 8002584:	40020400 	.word	0x40020400
 8002588:	40020800 	.word	0x40020800
 800258c:	40020c00 	.word	0x40020c00
 8002590:	40021000 	.word	0x40021000
 8002594:	40021400 	.word	0x40021400
 8002598:	40021800 	.word	0x40021800
 800259c:	40010400 	.word	0x40010400

080025a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	e001      	b.n	80025c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	807b      	strh	r3, [r7, #2]
 80025da:	4613      	mov	r3, r2
 80025dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025de:	787b      	ldrb	r3, [r7, #1]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025e4:	887a      	ldrh	r2, [r7, #2]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80025ea:	e003      	b.n	80025f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80025ec:	887b      	ldrh	r3, [r7, #2]
 80025ee:	041a      	lsls	r2, r3, #16
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
	...

08002600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e12b      	b.n	800286a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe fe56 	bl	80012d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2224      	movs	r2, #36	; 0x24
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002664:	f001 fab2 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8002668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4a81      	ldr	r2, [pc, #516]	; (8002874 <HAL_I2C_Init+0x274>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d807      	bhi.n	8002684 <HAL_I2C_Init+0x84>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a80      	ldr	r2, [pc, #512]	; (8002878 <HAL_I2C_Init+0x278>)
 8002678:	4293      	cmp	r3, r2
 800267a:	bf94      	ite	ls
 800267c:	2301      	movls	r3, #1
 800267e:	2300      	movhi	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e006      	b.n	8002692 <HAL_I2C_Init+0x92>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a7d      	ldr	r2, [pc, #500]	; (800287c <HAL_I2C_Init+0x27c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	bf94      	ite	ls
 800268c:	2301      	movls	r3, #1
 800268e:	2300      	movhi	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e0e7      	b.n	800286a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4a78      	ldr	r2, [pc, #480]	; (8002880 <HAL_I2C_Init+0x280>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0c9b      	lsrs	r3, r3, #18
 80026a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a6a      	ldr	r2, [pc, #424]	; (8002874 <HAL_I2C_Init+0x274>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d802      	bhi.n	80026d4 <HAL_I2C_Init+0xd4>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	3301      	adds	r3, #1
 80026d2:	e009      	b.n	80026e8 <HAL_I2C_Init+0xe8>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	4a69      	ldr	r2, [pc, #420]	; (8002884 <HAL_I2C_Init+0x284>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	099b      	lsrs	r3, r3, #6
 80026e6:	3301      	adds	r3, #1
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	430b      	orrs	r3, r1
 80026ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	495c      	ldr	r1, [pc, #368]	; (8002874 <HAL_I2C_Init+0x274>)
 8002704:	428b      	cmp	r3, r1
 8002706:	d819      	bhi.n	800273c <HAL_I2C_Init+0x13c>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1e59      	subs	r1, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	fbb1 f3f3 	udiv	r3, r1, r3
 8002716:	1c59      	adds	r1, r3, #1
 8002718:	f640 73fc 	movw	r3, #4092	; 0xffc
 800271c:	400b      	ands	r3, r1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_I2C_Init+0x138>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1e59      	subs	r1, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002730:	3301      	adds	r3, #1
 8002732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002736:	e051      	b.n	80027dc <HAL_I2C_Init+0x1dc>
 8002738:	2304      	movs	r3, #4
 800273a:	e04f      	b.n	80027dc <HAL_I2C_Init+0x1dc>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <HAL_I2C_Init+0x168>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1e58      	subs	r0, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	440b      	add	r3, r1
 8002752:	fbb0 f3f3 	udiv	r3, r0, r3
 8002756:	3301      	adds	r3, #1
 8002758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	e012      	b.n	800278e <HAL_I2C_Init+0x18e>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e58      	subs	r0, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	0099      	lsls	r1, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	fbb0 f3f3 	udiv	r3, r0, r3
 800277e:	3301      	adds	r3, #1
 8002780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Init+0x196>
 8002792:	2301      	movs	r3, #1
 8002794:	e022      	b.n	80027dc <HAL_I2C_Init+0x1dc>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10e      	bne.n	80027bc <HAL_I2C_Init+0x1bc>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1e58      	subs	r0, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	440b      	add	r3, r1
 80027ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b0:	3301      	adds	r3, #1
 80027b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ba:	e00f      	b.n	80027dc <HAL_I2C_Init+0x1dc>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e58      	subs	r0, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	0099      	lsls	r1, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	6809      	ldr	r1, [r1, #0]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69da      	ldr	r2, [r3, #28]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800280a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6911      	ldr	r1, [r2, #16]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68d2      	ldr	r2, [r2, #12]
 8002816:	4311      	orrs	r1, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	430b      	orrs	r3, r1
 800281e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	000186a0 	.word	0x000186a0
 8002878:	001e847f 	.word	0x001e847f
 800287c:	003d08ff 	.word	0x003d08ff
 8002880:	431bde83 	.word	0x431bde83
 8002884:	10624dd3 	.word	0x10624dd3

08002888 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	461a      	mov	r2, r3
 8002894:	460b      	mov	r3, r1
 8002896:	817b      	strh	r3, [r7, #10]
 8002898:	4613      	mov	r3, r2
 800289a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff fb38 	bl	8001f10 <HAL_GetTick>
 80028a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	f040 80e0 	bne.w	8002a70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2319      	movs	r3, #25
 80028b6:	2201      	movs	r2, #1
 80028b8:	4970      	ldr	r1, [pc, #448]	; (8002a7c <HAL_I2C_Master_Transmit+0x1f4>)
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fa92 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
 80028c8:	e0d3      	b.n	8002a72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_I2C_Master_Transmit+0x50>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e0cc      	b.n	8002a72 <HAL_I2C_Master_Transmit+0x1ea>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d007      	beq.n	80028fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2221      	movs	r2, #33	; 0x21
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2210      	movs	r2, #16
 800291a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	893a      	ldrh	r2, [r7, #8]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a50      	ldr	r2, [pc, #320]	; (8002a80 <HAL_I2C_Master_Transmit+0x1f8>)
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002940:	8979      	ldrh	r1, [r7, #10]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	6a3a      	ldr	r2, [r7, #32]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f9ca 	bl	8002ce0 <I2C_MasterRequestWrite>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e08d      	b.n	8002a72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800296c:	e066      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	6a39      	ldr	r1, [r7, #32]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fb0c 	bl	8002f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00d      	beq.n	800299a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b04      	cmp	r3, #4
 8002984:	d107      	bne.n	8002996 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06b      	b.n	8002a72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d11b      	bne.n	8002a10 <HAL_I2C_Master_Transmit+0x188>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d017      	beq.n	8002a10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	6a39      	ldr	r1, [r7, #32]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fafc 	bl	8003012 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00d      	beq.n	8002a3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d107      	bne.n	8002a38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e01a      	b.n	8002a72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d194      	bne.n	800296e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	00100002 	.word	0x00100002
 8002a80:	ffff0000 	.word	0xffff0000

08002a84 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	460b      	mov	r3, r1
 8002a92:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a94:	f7ff fa3c 	bl	8001f10 <HAL_GetTick>
 8002a98:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	f040 8111 	bne.w	8002cce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2319      	movs	r3, #25
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	4988      	ldr	r1, [pc, #544]	; (8002cd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f994 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e104      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_I2C_IsDeviceReady+0x50>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e0fd      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d007      	beq.n	8002afa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0201 	orr.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2224      	movs	r2, #36	; 0x24
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a70      	ldr	r2, [pc, #448]	; (8002cdc <HAL_I2C_IsDeviceReady+0x258>)
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f952 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b54:	d103      	bne.n	8002b5e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e0b6      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b70:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b72:	f7ff f9cd 	bl	8001f10 <HAL_GetTick>
 8002b76:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	bf0c      	ite	eq
 8002b86:	2301      	moveq	r3, #1
 8002b88:	2300      	movne	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ba6:	e025      	b.n	8002bf4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ba8:	f7ff f9b2 	bl	8001f10 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d302      	bcc.n	8002bbe <HAL_I2C_IsDeviceReady+0x13a>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	22a0      	movs	r2, #160	; 0xa0
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bea:	bf0c      	ite	eq
 8002bec:	2301      	moveq	r3, #1
 8002bee:	2300      	movne	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2ba0      	cmp	r3, #160	; 0xa0
 8002bfe:	d005      	beq.n	8002c0c <HAL_I2C_IsDeviceReady+0x188>
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <HAL_I2C_IsDeviceReady+0x188>
 8002c06:	7dbb      	ldrb	r3, [r7, #22]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0cd      	beq.n	8002ba8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d129      	bne.n	8002c76 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c30:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2319      	movs	r3, #25
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4921      	ldr	r1, [pc, #132]	; (8002cd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f8c6 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e036      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e02c      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c84:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c8e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2319      	movs	r3, #25
 8002c96:	2201      	movs	r2, #1
 8002c98:	490f      	ldr	r1, [pc, #60]	; (8002cd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f8a2 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e012      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	3301      	adds	r3, #1
 8002cae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	f4ff af32 	bcc.w	8002b1e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
  }
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	00100002 	.word	0x00100002
 8002cdc:	ffff0000 	.word	0xffff0000

08002ce0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	460b      	mov	r3, r1
 8002cee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d006      	beq.n	8002d0a <I2C_MasterRequestWrite+0x2a>
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d003      	beq.n	8002d0a <I2C_MasterRequestWrite+0x2a>
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d08:	d108      	bne.n	8002d1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e00b      	b.n	8002d34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	2b12      	cmp	r3, #18
 8002d22:	d107      	bne.n	8002d34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f84f 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00d      	beq.n	8002d68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5a:	d103      	bne.n	8002d64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e035      	b.n	8002dd4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d70:	d108      	bne.n	8002d84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d72:	897b      	ldrh	r3, [r7, #10]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d80:	611a      	str	r2, [r3, #16]
 8002d82:	e01b      	b.n	8002dbc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d84:	897b      	ldrh	r3, [r7, #10]
 8002d86:	11db      	asrs	r3, r3, #7
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 0306 	and.w	r3, r3, #6
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f063 030f 	orn	r3, r3, #15
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	490e      	ldr	r1, [pc, #56]	; (8002ddc <I2C_MasterRequestWrite+0xfc>)
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f875 	bl	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e010      	b.n	8002dd4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002db2:	897b      	ldrh	r3, [r7, #10]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4907      	ldr	r1, [pc, #28]	; (8002de0 <I2C_MasterRequestWrite+0x100>)
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f865 	bl	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	00010008 	.word	0x00010008
 8002de0:	00010002 	.word	0x00010002

08002de4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	4613      	mov	r3, r2
 8002df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df4:	e025      	b.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dfc:	d021      	beq.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfe:	f7ff f887 	bl	8001f10 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d116      	bne.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e023      	b.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10d      	bne.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4013      	ands	r3, r2
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bf0c      	ite	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	2300      	movne	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	e00c      	b.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4013      	ands	r3, r2
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d0b6      	beq.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ea0:	e051      	b.n	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb0:	d123      	bne.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f043 0204 	orr.w	r2, r3, #4
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e046      	b.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f00:	d021      	beq.n	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f02:	f7ff f805 	bl	8001f10 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d116      	bne.n	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e020      	b.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d10c      	bne.n	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	e00b      	b.n	8002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	43da      	mvns	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d18d      	bne.n	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f9c:	e02d      	b.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f878 	bl	8003094 <I2C_IsAcknowledgeFailed>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e02d      	b.n	800300a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb4:	d021      	beq.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7fe ffab 	bl	8001f10 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d116      	bne.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f043 0220 	orr.w	r2, r3, #32
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e007      	b.n	800300a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003004:	2b80      	cmp	r3, #128	; 0x80
 8003006:	d1ca      	bne.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800301e:	e02d      	b.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f837 	bl	8003094 <I2C_IsAcknowledgeFailed>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e02d      	b.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003036:	d021      	beq.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003038:	f7fe ff6a 	bl	8001f10 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	d302      	bcc.n	800304e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e007      	b.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b04      	cmp	r3, #4
 8003088:	d1ca      	bne.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030aa:	d11b      	bne.n	80030e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	f043 0204 	orr.w	r2, r3, #4
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e31d      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003102:	4b94      	ldr	r3, [pc, #592]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800310c:	4b91      	ldr	r3, [pc, #580]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003114:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d07b      	beq.n	800321a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d006      	beq.n	8003136 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d10f      	bne.n	800314e <HAL_RCC_OscConfig+0x5e>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d10b      	bne.n	800314e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003136:	4b87      	ldr	r3, [pc, #540]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d06a      	beq.n	8003218 <HAL_RCC_OscConfig+0x128>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d166      	bne.n	8003218 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e2f7      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d106      	bne.n	8003164 <HAL_RCC_OscConfig+0x74>
 8003156:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7e      	ldr	r2, [pc, #504]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e02d      	b.n	80031c0 <HAL_RCC_OscConfig+0xd0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10c      	bne.n	8003186 <HAL_RCC_OscConfig+0x96>
 800316c:	4b79      	ldr	r3, [pc, #484]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a78      	ldr	r2, [pc, #480]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a75      	ldr	r2, [pc, #468]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800317e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e01c      	b.n	80031c0 <HAL_RCC_OscConfig+0xd0>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b05      	cmp	r3, #5
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0xb8>
 800318e:	4b71      	ldr	r3, [pc, #452]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a70      	ldr	r2, [pc, #448]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b6e      	ldr	r3, [pc, #440]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a6d      	ldr	r2, [pc, #436]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e00b      	b.n	80031c0 <HAL_RCC_OscConfig+0xd0>
 80031a8:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a69      	ldr	r2, [pc, #420]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80031ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a66      	ldr	r2, [pc, #408]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80031ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d013      	beq.n	80031f0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe fea2 	bl	8001f10 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe fe9e 	bl	8001f10 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e2ad      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031e2:	4b5c      	ldr	r3, [pc, #368]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0xe0>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fe fe8e 	bl	8001f10 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fe fe8a 	bl	8001f10 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e299      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800320a:	4b52      	ldr	r3, [pc, #328]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x108>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d05a      	beq.n	80032dc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d005      	beq.n	8003238 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d119      	bne.n	8003266 <HAL_RCC_OscConfig+0x176>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d116      	bne.n	8003266 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003238:	4b46      	ldr	r3, [pc, #280]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_OscConfig+0x160>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e276      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b40      	ldr	r3, [pc, #256]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	493d      	ldr	r1, [pc, #244]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003264:	e03a      	b.n	80032dc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d020      	beq.n	80032b0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326e:	4b3a      	ldr	r3, [pc, #232]	; (8003358 <HAL_RCC_OscConfig+0x268>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe fe4c 	bl	8001f10 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800327c:	f7fe fe48 	bl	8001f10 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e257      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800328e:	4b31      	ldr	r3, [pc, #196]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	492a      	ldr	r1, [pc, #168]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
 80032ae:	e015      	b.n	80032dc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b0:	4b29      	ldr	r3, [pc, #164]	; (8003358 <HAL_RCC_OscConfig+0x268>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fe fe2b 	bl	8001f10 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032be:	f7fe fe27 	bl	8001f10 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e236      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032d0:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f0      	bne.n	80032be <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80b8 	beq.w	800345a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d170      	bne.n	80033d2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032f0:	4b18      	ldr	r3, [pc, #96]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_OscConfig+0x218>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e21a      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1a      	ldr	r2, [r3, #32]
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003314:	429a      	cmp	r2, r3
 8003316:	d921      	bls.n	800335c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fc7d 	bl	8003c1c <RCC_SetFlashLatencyFromMSIRange>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e208      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4906      	ldr	r1, [pc, #24]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	061b      	lsls	r3, r3, #24
 800334c:	4901      	ldr	r1, [pc, #4]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
 8003352:	e020      	b.n	8003396 <HAL_RCC_OscConfig+0x2a6>
 8003354:	40023800 	.word	0x40023800
 8003358:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800335c:	4b99      	ldr	r3, [pc, #612]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4996      	ldr	r1, [pc, #600]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800336e:	4b95      	ldr	r3, [pc, #596]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	061b      	lsls	r3, r3, #24
 800337c:	4991      	ldr	r1, [pc, #580]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fc48 	bl	8003c1c <RCC_SetFlashLatencyFromMSIRange>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1d3      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	0b5b      	lsrs	r3, r3, #13
 800339c:	3301      	adds	r3, #1
 800339e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80033a6:	4a87      	ldr	r2, [pc, #540]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	0912      	lsrs	r2, r2, #4
 80033ac:	f002 020f 	and.w	r2, r2, #15
 80033b0:	4985      	ldr	r1, [pc, #532]	; (80035c8 <HAL_RCC_OscConfig+0x4d8>)
 80033b2:	5c8a      	ldrb	r2, [r1, r2]
 80033b4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033b6:	4a85      	ldr	r2, [pc, #532]	; (80035cc <HAL_RCC_OscConfig+0x4dc>)
 80033b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033ba:	4b85      	ldr	r3, [pc, #532]	; (80035d0 <HAL_RCC_OscConfig+0x4e0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe fd5a 	bl	8001e78 <HAL_InitTick>
 80033c4:	4603      	mov	r3, r0
 80033c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d045      	beq.n	800345a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	e1b5      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d029      	beq.n	800342e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033da:	4b7e      	ldr	r3, [pc, #504]	; (80035d4 <HAL_RCC_OscConfig+0x4e4>)
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe fd96 	bl	8001f10 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033e8:	f7fe fd92 	bl	8001f10 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1a1      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033fa:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003406:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	496c      	ldr	r1, [pc, #432]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003418:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	4967      	ldr	r1, [pc, #412]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
 800342c:	e015      	b.n	800345a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800342e:	4b69      	ldr	r3, [pc, #420]	; (80035d4 <HAL_RCC_OscConfig+0x4e4>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe fd6c 	bl	8001f10 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800343c:	f7fe fd68 	bl	8001f10 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e177      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800344e:	4b5d      	ldr	r3, [pc, #372]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d030      	beq.n	80034c8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d016      	beq.n	800349c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800346e:	4b5a      	ldr	r3, [pc, #360]	; (80035d8 <HAL_RCC_OscConfig+0x4e8>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003474:	f7fe fd4c 	bl	8001f10 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800347c:	f7fe fd48 	bl	8001f10 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e157      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800348e:	4b4d      	ldr	r3, [pc, #308]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x38c>
 800349a:	e015      	b.n	80034c8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349c:	4b4e      	ldr	r3, [pc, #312]	; (80035d8 <HAL_RCC_OscConfig+0x4e8>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a2:	f7fe fd35 	bl	8001f10 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034aa:	f7fe fd31 	bl	8001f10 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e140      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034bc:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80034be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80b5 	beq.w	8003640 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034da:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	4a36      	ldr	r2, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80034ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f0:	6253      	str	r3, [r2, #36]	; 0x24
 80034f2:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fe:	2301      	movs	r3, #1
 8003500:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003502:	4b36      	ldr	r3, [pc, #216]	; (80035dc <HAL_RCC_OscConfig+0x4ec>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d118      	bne.n	8003540 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350e:	4b33      	ldr	r3, [pc, #204]	; (80035dc <HAL_RCC_OscConfig+0x4ec>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a32      	ldr	r2, [pc, #200]	; (80035dc <HAL_RCC_OscConfig+0x4ec>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351a:	f7fe fcf9 	bl	8001f10 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003522:	f7fe fcf5 	bl	8001f10 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b64      	cmp	r3, #100	; 0x64
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e104      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	4b29      	ldr	r3, [pc, #164]	; (80035dc <HAL_RCC_OscConfig+0x4ec>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x466>
 8003548:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354c:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800354e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003552:	6353      	str	r3, [r2, #52]	; 0x34
 8003554:	e02d      	b.n	80035b2 <HAL_RCC_OscConfig+0x4c2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x488>
 800355e:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003568:	6353      	str	r3, [r2, #52]	; 0x34
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003574:	6353      	str	r3, [r2, #52]	; 0x34
 8003576:	e01c      	b.n	80035b2 <HAL_RCC_OscConfig+0x4c2>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b05      	cmp	r3, #5
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x4aa>
 8003580:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800358a:	6353      	str	r3, [r2, #52]	; 0x34
 800358c:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800358e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003590:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003596:	6353      	str	r3, [r2, #52]	; 0x34
 8003598:	e00b      	b.n	80035b2 <HAL_RCC_OscConfig+0x4c2>
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80035a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a4:	6353      	str	r3, [r2, #52]	; 0x34
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80035a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035aa:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80035ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035b0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d024      	beq.n	8003604 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ba:	f7fe fca9 	bl	8001f10 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035c0:	e019      	b.n	80035f6 <HAL_RCC_OscConfig+0x506>
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	080095d0 	.word	0x080095d0
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000004 	.word	0x20000004
 80035d4:	42470020 	.word	0x42470020
 80035d8:	42470680 	.word	0x42470680
 80035dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e0:	f7fe fc96 	bl	8001f10 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e0a3      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035f6:	4b54      	ldr	r3, [pc, #336]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0ee      	beq.n	80035e0 <HAL_RCC_OscConfig+0x4f0>
 8003602:	e014      	b.n	800362e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fe fc84 	bl	8001f10 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fe fc80 	bl	8001f10 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e08d      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003622:	4b49      	ldr	r3, [pc, #292]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 8003624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ee      	bne.n	800360c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800362e:	7ffb      	ldrb	r3, [r7, #31]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003634:	4b44      	ldr	r3, [pc, #272]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	4a43      	ldr	r2, [pc, #268]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 800363a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d079      	beq.n	800373c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d056      	beq.n	80036fc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b02      	cmp	r3, #2
 8003654:	d13b      	bne.n	80036ce <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003656:	4b3d      	ldr	r3, [pc, #244]	; (800374c <HAL_RCC_OscConfig+0x65c>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe fc58 	bl	8001f10 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe fc54 	bl	8001f10 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e063      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003676:	4b34      	ldr	r3, [pc, #208]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003682:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	4319      	orrs	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	430b      	orrs	r3, r1
 800369a:	492b      	ldr	r1, [pc, #172]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a0:	4b2a      	ldr	r3, [pc, #168]	; (800374c <HAL_RCC_OscConfig+0x65c>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7fe fc33 	bl	8001f10 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fe fc2f 	bl	8001f10 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e03e      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x5be>
 80036cc:	e036      	b.n	800373c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ce:	4b1f      	ldr	r3, [pc, #124]	; (800374c <HAL_RCC_OscConfig+0x65c>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fe fc1c 	bl	8001f10 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fe fc18 	bl	8001f10 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e027      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036ee:	4b16      	ldr	r3, [pc, #88]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x5ec>
 80036fa:	e01f      	b.n	800373c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e01a      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003708:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	429a      	cmp	r2, r3
 800371a:	d10d      	bne.n	8003738 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d106      	bne.n	8003738 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	42470060 	.word	0x42470060

08003750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e11a      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003764:	4b8f      	ldr	r3, [pc, #572]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d919      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d105      	bne.n	8003784 <HAL_RCC_ClockConfig+0x34>
 8003778:	4b8a      	ldr	r3, [pc, #552]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a89      	ldr	r2, [pc, #548]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b87      	ldr	r3, [pc, #540]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 0201 	bic.w	r2, r3, #1
 800378c:	4985      	ldr	r1, [pc, #532]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003794:	4b83      	ldr	r3, [pc, #524]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0f9      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b2:	4b7d      	ldr	r3, [pc, #500]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	497a      	ldr	r1, [pc, #488]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 808e 	beq.w	80038ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037da:	4b73      	ldr	r3, [pc, #460]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d121      	bne.n	800382a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0d7      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037f2:	4b6d      	ldr	r3, [pc, #436]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d115      	bne.n	800382a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e0cb      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800380a:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e0bf      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e0b7      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	495c      	ldr	r1, [pc, #368]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800383c:	f7fe fb68 	bl	8001f10 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d112      	bne.n	8003870 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384c:	f7fe fb60 	bl	8001f10 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e09b      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003862:	4b51      	ldr	r3, [pc, #324]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b08      	cmp	r3, #8
 800386c:	d1ee      	bne.n	800384c <HAL_RCC_ClockConfig+0xfc>
 800386e:	e03e      	b.n	80038ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d112      	bne.n	800389e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387a:	f7fe fb49 	bl	8001f10 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	; 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e084      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003890:	4b45      	ldr	r3, [pc, #276]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b0c      	cmp	r3, #12
 800389a:	d1ee      	bne.n	800387a <HAL_RCC_ClockConfig+0x12a>
 800389c:	e027      	b.n	80038ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d11d      	bne.n	80038e2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80038a6:	e00a      	b.n	80038be <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a8:	f7fe fb32 	bl	8001f10 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e06d      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80038be:	4b3a      	ldr	r3, [pc, #232]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d1ee      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x158>
 80038ca:	e010      	b.n	80038ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fe fb20 	bl	8001f10 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e05b      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1ee      	bne.n	80038cc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ee:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d219      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <HAL_RCC_ClockConfig+0x1be>
 8003902:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 0201 	bic.w	r2, r3, #1
 8003916:	4923      	ldr	r1, [pc, #140]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e034      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4917      	ldr	r1, [pc, #92]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	490f      	ldr	r1, [pc, #60]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800396e:	f000 f823 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8003972:	4602      	mov	r2, r0
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	490b      	ldr	r1, [pc, #44]	; (80039ac <HAL_RCC_ClockConfig+0x25c>)
 8003980:	5ccb      	ldrb	r3, [r1, r3]
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x260>)
 8003988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <HAL_RCC_ClockConfig+0x264>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fa72 	bl	8001e78 <HAL_InitTick>
 8003994:	4603      	mov	r3, r0
 8003996:	72fb      	strb	r3, [r7, #11]

  return status;
 8003998:	7afb      	ldrb	r3, [r7, #11]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023c00 	.word	0x40023c00
 80039a8:	40023800 	.word	0x40023800
 80039ac:	080095d0 	.word	0x080095d0
 80039b0:	20000000 	.word	0x20000000
 80039b4:	20000004 	.word	0x20000004

080039b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b092      	sub	sp, #72	; 0x48
 80039be:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80039c0:	4b79      	ldr	r3, [pc, #484]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	d00d      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x34>
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	f200 80d5 	bhi.w	8003b80 <HAL_RCC_GetSysClockFreq+0x1c8>
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d002      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x28>
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d003      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x2e>
 80039de:	e0cf      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e0:	4b72      	ldr	r3, [pc, #456]	; (8003bac <HAL_RCC_GetSysClockFreq+0x1f4>)
 80039e2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80039e4:	e0da      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039e6:	4b72      	ldr	r3, [pc, #456]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80039e8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80039ea:	e0d7      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ee:	0c9b      	lsrs	r3, r3, #18
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	4b6f      	ldr	r3, [pc, #444]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80039f6:	5c9b      	ldrb	r3, [r3, r2]
 80039f8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fc:	0d9b      	lsrs	r3, r3, #22
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	3301      	adds	r3, #1
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a06:	4b68      	ldr	r3, [pc, #416]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d05d      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	2200      	movs	r2, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	460d      	mov	r5, r1
 8003a1e:	4622      	mov	r2, r4
 8003a20:	462b      	mov	r3, r5
 8003a22:	f04f 0000 	mov.w	r0, #0
 8003a26:	f04f 0100 	mov.w	r1, #0
 8003a2a:	0159      	lsls	r1, r3, #5
 8003a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a30:	0150      	lsls	r0, r2, #5
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4621      	mov	r1, r4
 8003a38:	1a51      	subs	r1, r2, r1
 8003a3a:	6139      	str	r1, [r7, #16]
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a50:	4659      	mov	r1, fp
 8003a52:	018b      	lsls	r3, r1, #6
 8003a54:	4651      	mov	r1, sl
 8003a56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a5a:	4651      	mov	r1, sl
 8003a5c:	018a      	lsls	r2, r1, #6
 8003a5e:	46d4      	mov	ip, sl
 8003a60:	ebb2 080c 	subs.w	r8, r2, ip
 8003a64:	4659      	mov	r1, fp
 8003a66:	eb63 0901 	sbc.w	r9, r3, r1
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a7e:	4690      	mov	r8, r2
 8003a80:	4699      	mov	r9, r3
 8003a82:	4623      	mov	r3, r4
 8003a84:	eb18 0303 	adds.w	r3, r8, r3
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	462b      	mov	r3, r5
 8003a8c:	eb49 0303 	adc.w	r3, r9, r3
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	024b      	lsls	r3, r1, #9
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003aac:	4601      	mov	r1, r0
 8003aae:	024a      	lsls	r2, r1, #9
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ac0:	f7fd f86a 	bl	8000b98 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4613      	mov	r3, r2
 8003aca:	647b      	str	r3, [r7, #68]	; 0x44
 8003acc:	e055      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ad6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ada:	4642      	mov	r2, r8
 8003adc:	464b      	mov	r3, r9
 8003ade:	f04f 0000 	mov.w	r0, #0
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	0159      	lsls	r1, r3, #5
 8003ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aec:	0150      	lsls	r0, r2, #5
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	46c4      	mov	ip, r8
 8003af4:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003af8:	4640      	mov	r0, r8
 8003afa:	4649      	mov	r1, r9
 8003afc:	468c      	mov	ip, r1
 8003afe:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b0e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b12:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b16:	ebb2 040a 	subs.w	r4, r2, sl
 8003b1a:	eb63 050b 	sbc.w	r5, r3, fp
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	00eb      	lsls	r3, r5, #3
 8003b28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b2c:	00e2      	lsls	r2, r4, #3
 8003b2e:	4614      	mov	r4, r2
 8003b30:	461d      	mov	r5, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	18e3      	adds	r3, r4, r3
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	eb45 0303 	adc.w	r3, r5, r3
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	028b      	lsls	r3, r1, #10
 8003b50:	4620      	mov	r0, r4
 8003b52:	4629      	mov	r1, r5
 8003b54:	4604      	mov	r4, r0
 8003b56:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	028a      	lsls	r2, r1, #10
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b64:	2200      	movs	r2, #0
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	61fa      	str	r2, [r7, #28]
 8003b6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6e:	f7fd f813 	bl	8000b98 <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4613      	mov	r3, r2
 8003b78:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003b7e:	e00d      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	0b5b      	lsrs	r3, r3, #13
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003b9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3748      	adds	r7, #72	; 0x48
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	00f42400 	.word	0x00f42400
 8003bb0:	007a1200 	.word	0x007a1200
 8003bb4:	080095c4 	.word	0x080095c4

08003bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bbc:	4b02      	ldr	r3, [pc, #8]	; (8003bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	20000000 	.word	0x20000000

08003bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bd0:	f7ff fff2 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	080095e0 	.word	0x080095e0

08003bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bf8:	f7ff ffde 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0adb      	lsrs	r3, r3, #11
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4903      	ldr	r1, [pc, #12]	; (8003c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	080095e0 	.word	0x080095e0

08003c1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c28:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d12c      	bne.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c34:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003c40:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e016      	b.n	8003c7a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4c:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c56:	6253      	str	r3, [r2, #36]	; 0x24
 8003c58:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003c64:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003c6c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6e:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c78:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003c80:	d105      	bne.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c88:	d101      	bne.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003c94:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0f      	ldr	r2, [pc, #60]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 0201 	bic.w	r2, r3, #1
 8003ca8:	490b      	ldr	r1, [pc, #44]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d001      	beq.n	8003cc2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40007000 	.word	0x40007000
 8003cd8:	40023c00 	.word	0x40023c00

08003cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e031      	b.n	8003d52 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd ff56 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f000 f92c 	bl	8003f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d001      	beq.n	8003d74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e032      	b.n	8003dda <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d00e      	beq.n	8003da4 <HAL_TIM_Base_Start+0x48>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a16      	ldr	r2, [pc, #88]	; (8003de4 <HAL_TIM_Base_Start+0x88>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_TIM_Base_Start+0x48>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <HAL_TIM_Base_Start+0x8c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_TIM_Base_Start+0x48>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a13      	ldr	r2, [pc, #76]	; (8003dec <HAL_TIM_Base_Start+0x90>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d111      	bne.n	8003dc8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b06      	cmp	r3, #6
 8003db4:	d010      	beq.n	8003dd8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc6:	e007      	b.n	8003dd8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800
 8003dec:	40010800 	.word	0x40010800

08003df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_TIM_ConfigClockSource+0x18>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e0b3      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x180>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e40:	d03e      	beq.n	8003ec0 <HAL_TIM_ConfigClockSource+0xd0>
 8003e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e46:	f200 8087 	bhi.w	8003f58 <HAL_TIM_ConfigClockSource+0x168>
 8003e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4e:	f000 8085 	beq.w	8003f5c <HAL_TIM_ConfigClockSource+0x16c>
 8003e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e56:	d87f      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x168>
 8003e58:	2b70      	cmp	r3, #112	; 0x70
 8003e5a:	d01a      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0xa2>
 8003e5c:	2b70      	cmp	r3, #112	; 0x70
 8003e5e:	d87b      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x168>
 8003e60:	2b60      	cmp	r3, #96	; 0x60
 8003e62:	d050      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x116>
 8003e64:	2b60      	cmp	r3, #96	; 0x60
 8003e66:	d877      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x168>
 8003e68:	2b50      	cmp	r3, #80	; 0x50
 8003e6a:	d03c      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xf6>
 8003e6c:	2b50      	cmp	r3, #80	; 0x50
 8003e6e:	d873      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x168>
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d058      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x136>
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d86f      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x168>
 8003e78:	2b30      	cmp	r3, #48	; 0x30
 8003e7a:	d064      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x156>
 8003e7c:	2b30      	cmp	r3, #48	; 0x30
 8003e7e:	d86b      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x168>
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d060      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x156>
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d867      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x168>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d05c      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x156>
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d05a      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e90:	e062      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6899      	ldr	r1, [r3, #8]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f000 f950 	bl	8004146 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	609a      	str	r2, [r3, #8]
      break;
 8003ebe:	e04e      	b.n	8003f5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	6899      	ldr	r1, [r3, #8]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f000 f939 	bl	8004146 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee2:	609a      	str	r2, [r3, #8]
      break;
 8003ee4:	e03b      	b.n	8003f5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f000 f8b0 	bl	8004058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2150      	movs	r1, #80	; 0x50
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f907 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003f04:	e02b      	b.n	8003f5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f000 f8ce 	bl	80040b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2160      	movs	r1, #96	; 0x60
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f8f7 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003f24:	e01b      	b.n	8003f5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6859      	ldr	r1, [r3, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f000 f890 	bl	8004058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2140      	movs	r1, #64	; 0x40
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f8e7 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003f44:	e00b      	b.n	8003f5e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4610      	mov	r0, r2
 8003f52:	f000 f8de 	bl	8004112 <TIM_ITRx_SetConfig>
        break;
 8003f56:	e002      	b.n	8003f5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f58:	bf00      	nop
 8003f5a:	e000      	b.n	8003f5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8e:	d00f      	beq.n	8003fb0 <TIM_Base_SetConfig+0x38>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a2b      	ldr	r2, [pc, #172]	; (8004040 <TIM_Base_SetConfig+0xc8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00b      	beq.n	8003fb0 <TIM_Base_SetConfig+0x38>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <TIM_Base_SetConfig+0xcc>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d007      	beq.n	8003fb0 <TIM_Base_SetConfig+0x38>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a29      	ldr	r2, [pc, #164]	; (8004048 <TIM_Base_SetConfig+0xd0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <TIM_Base_SetConfig+0x38>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a28      	ldr	r2, [pc, #160]	; (800404c <TIM_Base_SetConfig+0xd4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d108      	bne.n	8003fc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d017      	beq.n	8003ffa <TIM_Base_SetConfig+0x82>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <TIM_Base_SetConfig+0xc8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <TIM_Base_SetConfig+0x82>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <TIM_Base_SetConfig+0xcc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00f      	beq.n	8003ffa <TIM_Base_SetConfig+0x82>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1a      	ldr	r2, [pc, #104]	; (8004048 <TIM_Base_SetConfig+0xd0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00b      	beq.n	8003ffa <TIM_Base_SetConfig+0x82>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a19      	ldr	r2, [pc, #100]	; (800404c <TIM_Base_SetConfig+0xd4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d007      	beq.n	8003ffa <TIM_Base_SetConfig+0x82>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a18      	ldr	r2, [pc, #96]	; (8004050 <TIM_Base_SetConfig+0xd8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_Base_SetConfig+0x82>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a17      	ldr	r2, [pc, #92]	; (8004054 <TIM_Base_SetConfig+0xdc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d108      	bne.n	800400c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	615a      	str	r2, [r3, #20]
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	40010800 	.word	0x40010800
 8004050:	40010c00 	.word	0x40010c00
 8004054:	40011000 	.word	0x40011000

08004058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 030a 	bic.w	r3, r3, #10
 8004094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	f023 0210 	bic.w	r2, r3, #16
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	031b      	lsls	r3, r3, #12
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	621a      	str	r2, [r3, #32]
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	f043 0307 	orr.w	r3, r3, #7
 8004134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	609a      	str	r2, [r3, #8]
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004146:	b480      	push	{r7}
 8004148:	b087      	sub	sp, #28
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004160:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	021a      	lsls	r2, r3, #8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	431a      	orrs	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4313      	orrs	r3, r2
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	609a      	str	r2, [r3, #8]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004198:	2302      	movs	r3, #2
 800419a:	e046      	b.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d00e      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a13      	ldr	r2, [pc, #76]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d009      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a12      	ldr	r2, [pc, #72]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a10      	ldr	r2, [pc, #64]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10c      	bne.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	4313      	orrs	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr
 8004234:	40000400 	.word	0x40000400
 8004238:	40000800 	.word	0x40000800
 800423c:	40010800 	.word	0x40010800

08004240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e03f      	b.n	80042d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fd fd44 	bl	8001cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	; 0x24
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fc25 	bl	8004ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b08a      	sub	sp, #40	; 0x28
 80042de:	af02      	add	r7, sp, #8
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	4613      	mov	r3, r2
 80042e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d17c      	bne.n	80043f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <HAL_UART_Transmit+0x2c>
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e075      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_UART_Transmit+0x3e>
 8004314:	2302      	movs	r3, #2
 8004316:	e06e      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2221      	movs	r2, #33	; 0x21
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432e:	f7fd fdef 	bl	8001f10 <HAL_GetTick>
 8004332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004348:	d108      	bne.n	800435c <HAL_UART_Transmit+0x82>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	e003      	b.n	8004364 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800436c:	e02a      	b.n	80043c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2200      	movs	r2, #0
 8004376:	2180      	movs	r1, #128	; 0x80
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fa11 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e036      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800439c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3302      	adds	r3, #2
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	e007      	b.n	80043b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	3301      	adds	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1cf      	bne.n	800436e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2140      	movs	r1, #64	; 0x40
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f9e1 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e006      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004420:	2300      	movs	r3, #0
 8004422:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10d      	bne.n	8004452 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_UART_IRQHandler+0x52>
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fa99 	bl	8004982 <UART_Receive_IT>
      return;
 8004450:	e17b      	b.n	800474a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80b1 	beq.w	80045bc <HAL_UART_IRQHandler+0x1bc>
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <HAL_UART_IRQHandler+0x70>
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80a6 	beq.w	80045bc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_UART_IRQHandler+0x90>
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f043 0201 	orr.w	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_UART_IRQHandler+0xb0>
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f043 0202 	orr.w	r2, r3, #2
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_UART_IRQHandler+0xd0>
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f043 0204 	orr.w	r2, r3, #4
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00f      	beq.n	80044fa <HAL_UART_IRQHandler+0xfa>
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <HAL_UART_IRQHandler+0xee>
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f043 0208 	orr.w	r2, r3, #8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 811e 	beq.w	8004740 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_UART_IRQHandler+0x11e>
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fa32 	bl	8004982 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b40      	cmp	r3, #64	; 0x40
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <HAL_UART_IRQHandler+0x146>
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d031      	beq.n	80045aa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f974 	bl	8004834 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d123      	bne.n	80045a2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004568:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	2b00      	cmp	r3, #0
 8004570:	d013      	beq.n	800459a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	4a76      	ldr	r2, [pc, #472]	; (8004750 <HAL_UART_IRQHandler+0x350>)
 8004578:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd fe3c 	bl	80021fc <HAL_DMA_Abort_IT>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004594:	4610      	mov	r0, r2
 8004596:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004598:	e00e      	b.n	80045b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f8ec 	bl	8004778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	e00a      	b.n	80045b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f8e8 	bl	8004778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a8:	e006      	b.n	80045b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8e4 	bl	8004778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045b6:	e0c3      	b.n	8004740 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	bf00      	nop
    return;
 80045ba:	e0c1      	b.n	8004740 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	f040 80a1 	bne.w	8004708 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 809b 	beq.w	8004708 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 8095 	beq.w	8004708 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b40      	cmp	r3, #64	; 0x40
 8004600:	d14e      	bne.n	80046a0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800460c:	8a3b      	ldrh	r3, [r7, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8098 	beq.w	8004744 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004618:	8a3a      	ldrh	r2, [r7, #16]
 800461a:	429a      	cmp	r2, r3
 800461c:	f080 8092 	bcs.w	8004744 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8a3a      	ldrh	r2, [r7, #16]
 8004624:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b20      	cmp	r3, #32
 800462e:	d02b      	beq.n	8004688 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800463e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0201 	bic.w	r2, r2, #1
 800464e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800465e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0210 	bic.w	r2, r2, #16
 800467c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd fd7d 	bl	8002182 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004690:	b29b      	uxth	r3, r3
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	b29b      	uxth	r3, r3
 8004696:	4619      	mov	r1, r3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f876 	bl	800478a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800469e:	e051      	b.n	8004744 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d047      	beq.n	8004748 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80046b8:	8a7b      	ldrh	r3, [r7, #18]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d044      	beq.n	8004748 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046cc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0210 	bic.w	r2, r2, #16
 80046fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046fc:	8a7b      	ldrh	r3, [r7, #18]
 80046fe:	4619      	mov	r1, r3
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f842 	bl	800478a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004706:	e01f      	b.n	8004748 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <HAL_UART_IRQHandler+0x324>
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f8c9 	bl	80048b4 <UART_Transmit_IT>
    return;
 8004722:	e012      	b.n	800474a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00d      	beq.n	800474a <HAL_UART_IRQHandler+0x34a>
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f90a 	bl	8004952 <UART_EndTransmit_IT>
    return;
 800473e:	e004      	b.n	800474a <HAL_UART_IRQHandler+0x34a>
    return;
 8004740:	bf00      	nop
 8004742:	e002      	b.n	800474a <HAL_UART_IRQHandler+0x34a>
      return;
 8004744:	bf00      	nop
 8004746:	e000      	b.n	800474a <HAL_UART_IRQHandler+0x34a>
      return;
 8004748:	bf00      	nop
  }
}
 800474a:	3728      	adds	r7, #40	; 0x28
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	0800488d 	.word	0x0800488d

08004754 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr

08004778 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr

0800478a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	460b      	mov	r3, r1
 8004794:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b0:	e02c      	b.n	800480c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b8:	d028      	beq.n	800480c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047c0:	f7fd fba6 	bl	8001f10 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d21d      	bcs.n	800480c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0201 	bic.w	r2, r2, #1
 80047ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e00f      	b.n	800482c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4013      	ands	r3, r2
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	429a      	cmp	r2, r3
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	429a      	cmp	r2, r3
 8004828:	d0c3      	beq.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800484a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	2b01      	cmp	r3, #1
 8004862:	d107      	bne.n	8004874 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0210 	bic.w	r2, r2, #16
 8004872:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff ff66 	bl	8004778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b21      	cmp	r3, #33	; 0x21
 80048c6:	d13e      	bne.n	8004946 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d0:	d114      	bne.n	80048fc <UART_Transmit_IT+0x48>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d110      	bne.n	80048fc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	1c9a      	adds	r2, r3, #2
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	621a      	str	r2, [r3, #32]
 80048fa:	e008      	b.n	800490e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	1c59      	adds	r1, r3, #1
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6211      	str	r1, [r2, #32]
 8004906:	781a      	ldrb	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29b      	uxth	r3, r3
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4619      	mov	r1, r3
 800491c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10f      	bne.n	8004942 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004930:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004940:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	e000      	b.n	8004948 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004946:	2302      	movs	r3, #2
  }
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004968:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff feee 	bl	8004754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b086      	sub	sp, #24
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b22      	cmp	r3, #34	; 0x22
 8004994:	f040 8099 	bne.w	8004aca <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a0:	d117      	bne.n	80049d2 <UART_Receive_IT+0x50>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d113      	bne.n	80049d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	1c9a      	adds	r2, r3, #2
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
 80049d0:	e026      	b.n	8004a20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e4:	d007      	beq.n	80049f6 <UART_Receive_IT+0x74>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <UART_Receive_IT+0x82>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	e008      	b.n	8004a16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d148      	bne.n	8004ac6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0220 	bic.w	r2, r2, #32
 8004a42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695a      	ldr	r2, [r3, #20]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d123      	bne.n	8004abc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0210 	bic.w	r2, r2, #16
 8004a88:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d10a      	bne.n	8004aae <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff fe68 	bl	800478a <HAL_UARTEx_RxEventCallback>
 8004aba:	e002      	b.n	8004ac2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff fe52 	bl	8004766 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e002      	b.n	8004acc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e000      	b.n	8004acc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004aca:	2302      	movs	r3, #2
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b14:	f023 030c 	bic.w	r3, r3, #12
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699a      	ldr	r2, [r3, #24]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a55      	ldr	r2, [pc, #340]	; (8004c94 <UART_SetConfig+0x1c0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d103      	bne.n	8004b4a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b42:	f7ff f857 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	e002      	b.n	8004b50 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b4a:	f7ff f83f 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8004b4e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b58:	d14c      	bne.n	8004bf4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009a      	lsls	r2, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	4a49      	ldr	r2, [pc, #292]	; (8004c98 <UART_SetConfig+0x1c4>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	0119      	lsls	r1, r3, #4
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	009a      	lsls	r2, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b90:	4b41      	ldr	r3, [pc, #260]	; (8004c98 <UART_SetConfig+0x1c4>)
 8004b92:	fba3 0302 	umull	r0, r3, r3, r2
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	2064      	movs	r0, #100	; 0x64
 8004b9a:	fb00 f303 	mul.w	r3, r0, r3
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	3332      	adds	r3, #50	; 0x32
 8004ba4:	4a3c      	ldr	r2, [pc, #240]	; (8004c98 <UART_SetConfig+0x1c4>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bb2:	4419      	add	r1, r3
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009a      	lsls	r2, r3, #2
 8004bbe:	441a      	add	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bca:	4b33      	ldr	r3, [pc, #204]	; (8004c98 <UART_SetConfig+0x1c4>)
 8004bcc:	fba3 0302 	umull	r0, r3, r3, r2
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	2064      	movs	r0, #100	; 0x64
 8004bd4:	fb00 f303 	mul.w	r3, r0, r3
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	3332      	adds	r3, #50	; 0x32
 8004bde:	4a2e      	ldr	r2, [pc, #184]	; (8004c98 <UART_SetConfig+0x1c4>)
 8004be0:	fba2 2303 	umull	r2, r3, r2, r3
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	f003 0207 	and.w	r2, r3, #7
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	440a      	add	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bf2:	e04a      	b.n	8004c8a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009a      	lsls	r2, r3, #2
 8004bfe:	441a      	add	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0a:	4a23      	ldr	r2, [pc, #140]	; (8004c98 <UART_SetConfig+0x1c4>)
 8004c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	0119      	lsls	r1, r3, #4
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009a      	lsls	r2, r3, #2
 8004c1e:	441a      	add	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <UART_SetConfig+0x1c4>)
 8004c2c:	fba3 0302 	umull	r0, r3, r3, r2
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	2064      	movs	r0, #100	; 0x64
 8004c34:	fb00 f303 	mul.w	r3, r0, r3
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	3332      	adds	r3, #50	; 0x32
 8004c3e:	4a16      	ldr	r2, [pc, #88]	; (8004c98 <UART_SetConfig+0x1c4>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4a:	4419      	add	r1, r3
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009a      	lsls	r2, r3, #2
 8004c56:	441a      	add	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <UART_SetConfig+0x1c4>)
 8004c64:	fba3 0302 	umull	r0, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2064      	movs	r0, #100	; 0x64
 8004c6c:	fb00 f303 	mul.w	r3, r0, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	3332      	adds	r3, #50	; 0x32
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <UART_SetConfig+0x1c4>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 020f 	and.w	r2, r3, #15
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	440a      	add	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40013800 	.word	0x40013800
 8004c98:	51eb851f 	.word	0x51eb851f

08004c9c <__errno>:
 8004c9c:	4b01      	ldr	r3, [pc, #4]	; (8004ca4 <__errno+0x8>)
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	2000000c 	.word	0x2000000c

08004ca8 <__libc_init_array>:
 8004ca8:	b570      	push	{r4, r5, r6, lr}
 8004caa:	2600      	movs	r6, #0
 8004cac:	4d0c      	ldr	r5, [pc, #48]	; (8004ce0 <__libc_init_array+0x38>)
 8004cae:	4c0d      	ldr	r4, [pc, #52]	; (8004ce4 <__libc_init_array+0x3c>)
 8004cb0:	1b64      	subs	r4, r4, r5
 8004cb2:	10a4      	asrs	r4, r4, #2
 8004cb4:	42a6      	cmp	r6, r4
 8004cb6:	d109      	bne.n	8004ccc <__libc_init_array+0x24>
 8004cb8:	f004 fc50 	bl	800955c <_init>
 8004cbc:	2600      	movs	r6, #0
 8004cbe:	4d0a      	ldr	r5, [pc, #40]	; (8004ce8 <__libc_init_array+0x40>)
 8004cc0:	4c0a      	ldr	r4, [pc, #40]	; (8004cec <__libc_init_array+0x44>)
 8004cc2:	1b64      	subs	r4, r4, r5
 8004cc4:	10a4      	asrs	r4, r4, #2
 8004cc6:	42a6      	cmp	r6, r4
 8004cc8:	d105      	bne.n	8004cd6 <__libc_init_array+0x2e>
 8004cca:	bd70      	pop	{r4, r5, r6, pc}
 8004ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd0:	4798      	blx	r3
 8004cd2:	3601      	adds	r6, #1
 8004cd4:	e7ee      	b.n	8004cb4 <__libc_init_array+0xc>
 8004cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cda:	4798      	blx	r3
 8004cdc:	3601      	adds	r6, #1
 8004cde:	e7f2      	b.n	8004cc6 <__libc_init_array+0x1e>
 8004ce0:	08009a94 	.word	0x08009a94
 8004ce4:	08009a94 	.word	0x08009a94
 8004ce8:	08009a94 	.word	0x08009a94
 8004cec:	08009a98 	.word	0x08009a98

08004cf0 <memset>:
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	4402      	add	r2, r0
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d100      	bne.n	8004cfa <memset+0xa>
 8004cf8:	4770      	bx	lr
 8004cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfe:	e7f9      	b.n	8004cf4 <memset+0x4>

08004d00 <__cvt>:
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d06:	461f      	mov	r7, r3
 8004d08:	bfbb      	ittet	lt
 8004d0a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d0e:	461f      	movlt	r7, r3
 8004d10:	2300      	movge	r3, #0
 8004d12:	232d      	movlt	r3, #45	; 0x2d
 8004d14:	b088      	sub	sp, #32
 8004d16:	4614      	mov	r4, r2
 8004d18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d1a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d1c:	7013      	strb	r3, [r2, #0]
 8004d1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d20:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d24:	f023 0820 	bic.w	r8, r3, #32
 8004d28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d2c:	d005      	beq.n	8004d3a <__cvt+0x3a>
 8004d2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d32:	d100      	bne.n	8004d36 <__cvt+0x36>
 8004d34:	3501      	adds	r5, #1
 8004d36:	2302      	movs	r3, #2
 8004d38:	e000      	b.n	8004d3c <__cvt+0x3c>
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	aa07      	add	r2, sp, #28
 8004d3e:	9204      	str	r2, [sp, #16]
 8004d40:	aa06      	add	r2, sp, #24
 8004d42:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d46:	e9cd 3500 	strd	r3, r5, [sp]
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	463b      	mov	r3, r7
 8004d4e:	f001 fd83 	bl	8006858 <_dtoa_r>
 8004d52:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d56:	4606      	mov	r6, r0
 8004d58:	d102      	bne.n	8004d60 <__cvt+0x60>
 8004d5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d5c:	07db      	lsls	r3, r3, #31
 8004d5e:	d522      	bpl.n	8004da6 <__cvt+0xa6>
 8004d60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d64:	eb06 0905 	add.w	r9, r6, r5
 8004d68:	d110      	bne.n	8004d8c <__cvt+0x8c>
 8004d6a:	7833      	ldrb	r3, [r6, #0]
 8004d6c:	2b30      	cmp	r3, #48	; 0x30
 8004d6e:	d10a      	bne.n	8004d86 <__cvt+0x86>
 8004d70:	2200      	movs	r2, #0
 8004d72:	2300      	movs	r3, #0
 8004d74:	4620      	mov	r0, r4
 8004d76:	4639      	mov	r1, r7
 8004d78:	f7fb fe2e 	bl	80009d8 <__aeabi_dcmpeq>
 8004d7c:	b918      	cbnz	r0, 8004d86 <__cvt+0x86>
 8004d7e:	f1c5 0501 	rsb	r5, r5, #1
 8004d82:	f8ca 5000 	str.w	r5, [sl]
 8004d86:	f8da 3000 	ldr.w	r3, [sl]
 8004d8a:	4499      	add	r9, r3
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2300      	movs	r3, #0
 8004d90:	4620      	mov	r0, r4
 8004d92:	4639      	mov	r1, r7
 8004d94:	f7fb fe20 	bl	80009d8 <__aeabi_dcmpeq>
 8004d98:	b108      	cbz	r0, 8004d9e <__cvt+0x9e>
 8004d9a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d9e:	2230      	movs	r2, #48	; 0x30
 8004da0:	9b07      	ldr	r3, [sp, #28]
 8004da2:	454b      	cmp	r3, r9
 8004da4:	d307      	bcc.n	8004db6 <__cvt+0xb6>
 8004da6:	4630      	mov	r0, r6
 8004da8:	9b07      	ldr	r3, [sp, #28]
 8004daa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004dac:	1b9b      	subs	r3, r3, r6
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	b008      	add	sp, #32
 8004db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db6:	1c59      	adds	r1, r3, #1
 8004db8:	9107      	str	r1, [sp, #28]
 8004dba:	701a      	strb	r2, [r3, #0]
 8004dbc:	e7f0      	b.n	8004da0 <__cvt+0xa0>

08004dbe <__exponent>:
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dc2:	2900      	cmp	r1, #0
 8004dc4:	f803 2b02 	strb.w	r2, [r3], #2
 8004dc8:	bfb6      	itet	lt
 8004dca:	222d      	movlt	r2, #45	; 0x2d
 8004dcc:	222b      	movge	r2, #43	; 0x2b
 8004dce:	4249      	neglt	r1, r1
 8004dd0:	2909      	cmp	r1, #9
 8004dd2:	7042      	strb	r2, [r0, #1]
 8004dd4:	dd2b      	ble.n	8004e2e <__exponent+0x70>
 8004dd6:	f10d 0407 	add.w	r4, sp, #7
 8004dda:	46a4      	mov	ip, r4
 8004ddc:	270a      	movs	r7, #10
 8004dde:	fb91 f6f7 	sdiv	r6, r1, r7
 8004de2:	460a      	mov	r2, r1
 8004de4:	46a6      	mov	lr, r4
 8004de6:	fb07 1516 	mls	r5, r7, r6, r1
 8004dea:	2a63      	cmp	r2, #99	; 0x63
 8004dec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004df0:	4631      	mov	r1, r6
 8004df2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004df6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004dfa:	dcf0      	bgt.n	8004dde <__exponent+0x20>
 8004dfc:	3130      	adds	r1, #48	; 0x30
 8004dfe:	f1ae 0502 	sub.w	r5, lr, #2
 8004e02:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e06:	4629      	mov	r1, r5
 8004e08:	1c44      	adds	r4, r0, #1
 8004e0a:	4561      	cmp	r1, ip
 8004e0c:	d30a      	bcc.n	8004e24 <__exponent+0x66>
 8004e0e:	f10d 0209 	add.w	r2, sp, #9
 8004e12:	eba2 020e 	sub.w	r2, r2, lr
 8004e16:	4565      	cmp	r5, ip
 8004e18:	bf88      	it	hi
 8004e1a:	2200      	movhi	r2, #0
 8004e1c:	4413      	add	r3, r2
 8004e1e:	1a18      	subs	r0, r3, r0
 8004e20:	b003      	add	sp, #12
 8004e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e28:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e2c:	e7ed      	b.n	8004e0a <__exponent+0x4c>
 8004e2e:	2330      	movs	r3, #48	; 0x30
 8004e30:	3130      	adds	r1, #48	; 0x30
 8004e32:	7083      	strb	r3, [r0, #2]
 8004e34:	70c1      	strb	r1, [r0, #3]
 8004e36:	1d03      	adds	r3, r0, #4
 8004e38:	e7f1      	b.n	8004e1e <__exponent+0x60>
	...

08004e3c <_printf_float>:
 8004e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e40:	b091      	sub	sp, #68	; 0x44
 8004e42:	460c      	mov	r4, r1
 8004e44:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004e48:	4616      	mov	r6, r2
 8004e4a:	461f      	mov	r7, r3
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	f002 fe57 	bl	8007b00 <_localeconv_r>
 8004e52:	6803      	ldr	r3, [r0, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	9309      	str	r3, [sp, #36]	; 0x24
 8004e58:	f7fb f992 	bl	8000180 <strlen>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	930e      	str	r3, [sp, #56]	; 0x38
 8004e60:	f8d8 3000 	ldr.w	r3, [r8]
 8004e64:	900a      	str	r0, [sp, #40]	; 0x28
 8004e66:	3307      	adds	r3, #7
 8004e68:	f023 0307 	bic.w	r3, r3, #7
 8004e6c:	f103 0208 	add.w	r2, r3, #8
 8004e70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e74:	f8d4 b000 	ldr.w	fp, [r4]
 8004e78:	f8c8 2000 	str.w	r2, [r8]
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e84:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004e88:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e92:	4640      	mov	r0, r8
 8004e94:	4b9c      	ldr	r3, [pc, #624]	; (8005108 <_printf_float+0x2cc>)
 8004e96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e98:	f7fb fdd0 	bl	8000a3c <__aeabi_dcmpun>
 8004e9c:	bb70      	cbnz	r0, 8004efc <_printf_float+0xc0>
 8004e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	4b98      	ldr	r3, [pc, #608]	; (8005108 <_printf_float+0x2cc>)
 8004ea6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ea8:	f7fb fdaa 	bl	8000a00 <__aeabi_dcmple>
 8004eac:	bb30      	cbnz	r0, 8004efc <_printf_float+0xc0>
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	4651      	mov	r1, sl
 8004eb6:	f7fb fd99 	bl	80009ec <__aeabi_dcmplt>
 8004eba:	b110      	cbz	r0, 8004ec2 <_printf_float+0x86>
 8004ebc:	232d      	movs	r3, #45	; 0x2d
 8004ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec2:	4b92      	ldr	r3, [pc, #584]	; (800510c <_printf_float+0x2d0>)
 8004ec4:	4892      	ldr	r0, [pc, #584]	; (8005110 <_printf_float+0x2d4>)
 8004ec6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004eca:	bf94      	ite	ls
 8004ecc:	4698      	movls	r8, r3
 8004ece:	4680      	movhi	r8, r0
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	f04f 0a00 	mov.w	sl, #0
 8004ed6:	6123      	str	r3, [r4, #16]
 8004ed8:	f02b 0304 	bic.w	r3, fp, #4
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	4633      	mov	r3, r6
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	9700      	str	r7, [sp, #0]
 8004ee6:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ee8:	f000 f9d4 	bl	8005294 <_printf_common>
 8004eec:	3001      	adds	r0, #1
 8004eee:	f040 8090 	bne.w	8005012 <_printf_float+0x1d6>
 8004ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ef6:	b011      	add	sp, #68	; 0x44
 8004ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efc:	4642      	mov	r2, r8
 8004efe:	4653      	mov	r3, sl
 8004f00:	4640      	mov	r0, r8
 8004f02:	4651      	mov	r1, sl
 8004f04:	f7fb fd9a 	bl	8000a3c <__aeabi_dcmpun>
 8004f08:	b148      	cbz	r0, 8004f1e <_printf_float+0xe2>
 8004f0a:	f1ba 0f00 	cmp.w	sl, #0
 8004f0e:	bfb8      	it	lt
 8004f10:	232d      	movlt	r3, #45	; 0x2d
 8004f12:	4880      	ldr	r0, [pc, #512]	; (8005114 <_printf_float+0x2d8>)
 8004f14:	bfb8      	it	lt
 8004f16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f1a:	4b7f      	ldr	r3, [pc, #508]	; (8005118 <_printf_float+0x2dc>)
 8004f1c:	e7d3      	b.n	8004ec6 <_printf_float+0x8a>
 8004f1e:	6863      	ldr	r3, [r4, #4]
 8004f20:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	d142      	bne.n	8004fae <_printf_float+0x172>
 8004f28:	2306      	movs	r3, #6
 8004f2a:	6063      	str	r3, [r4, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	9206      	str	r2, [sp, #24]
 8004f30:	aa0e      	add	r2, sp, #56	; 0x38
 8004f32:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f36:	aa0d      	add	r2, sp, #52	; 0x34
 8004f38:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f3c:	9203      	str	r2, [sp, #12]
 8004f3e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	6863      	ldr	r3, [r4, #4]
 8004f4a:	4642      	mov	r2, r8
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	4628      	mov	r0, r5
 8004f50:	4653      	mov	r3, sl
 8004f52:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f54:	f7ff fed4 	bl	8004d00 <__cvt>
 8004f58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f5a:	4680      	mov	r8, r0
 8004f5c:	2947      	cmp	r1, #71	; 0x47
 8004f5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f60:	d108      	bne.n	8004f74 <_printf_float+0x138>
 8004f62:	1cc8      	adds	r0, r1, #3
 8004f64:	db02      	blt.n	8004f6c <_printf_float+0x130>
 8004f66:	6863      	ldr	r3, [r4, #4]
 8004f68:	4299      	cmp	r1, r3
 8004f6a:	dd40      	ble.n	8004fee <_printf_float+0x1b2>
 8004f6c:	f1a9 0902 	sub.w	r9, r9, #2
 8004f70:	fa5f f989 	uxtb.w	r9, r9
 8004f74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f78:	d81f      	bhi.n	8004fba <_printf_float+0x17e>
 8004f7a:	464a      	mov	r2, r9
 8004f7c:	3901      	subs	r1, #1
 8004f7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f82:	910d      	str	r1, [sp, #52]	; 0x34
 8004f84:	f7ff ff1b 	bl	8004dbe <__exponent>
 8004f88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f8a:	4682      	mov	sl, r0
 8004f8c:	1813      	adds	r3, r2, r0
 8004f8e:	2a01      	cmp	r2, #1
 8004f90:	6123      	str	r3, [r4, #16]
 8004f92:	dc02      	bgt.n	8004f9a <_printf_float+0x15e>
 8004f94:	6822      	ldr	r2, [r4, #0]
 8004f96:	07d2      	lsls	r2, r2, #31
 8004f98:	d501      	bpl.n	8004f9e <_printf_float+0x162>
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	6123      	str	r3, [r4, #16]
 8004f9e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d09b      	beq.n	8004ede <_printf_float+0xa2>
 8004fa6:	232d      	movs	r3, #45	; 0x2d
 8004fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fac:	e797      	b.n	8004ede <_printf_float+0xa2>
 8004fae:	2947      	cmp	r1, #71	; 0x47
 8004fb0:	d1bc      	bne.n	8004f2c <_printf_float+0xf0>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1ba      	bne.n	8004f2c <_printf_float+0xf0>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e7b7      	b.n	8004f2a <_printf_float+0xee>
 8004fba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004fbe:	d118      	bne.n	8004ff2 <_printf_float+0x1b6>
 8004fc0:	2900      	cmp	r1, #0
 8004fc2:	6863      	ldr	r3, [r4, #4]
 8004fc4:	dd0b      	ble.n	8004fde <_printf_float+0x1a2>
 8004fc6:	6121      	str	r1, [r4, #16]
 8004fc8:	b913      	cbnz	r3, 8004fd0 <_printf_float+0x194>
 8004fca:	6822      	ldr	r2, [r4, #0]
 8004fcc:	07d0      	lsls	r0, r2, #31
 8004fce:	d502      	bpl.n	8004fd6 <_printf_float+0x19a>
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	440b      	add	r3, r1
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	f04f 0a00 	mov.w	sl, #0
 8004fda:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fdc:	e7df      	b.n	8004f9e <_printf_float+0x162>
 8004fde:	b913      	cbnz	r3, 8004fe6 <_printf_float+0x1aa>
 8004fe0:	6822      	ldr	r2, [r4, #0]
 8004fe2:	07d2      	lsls	r2, r2, #31
 8004fe4:	d501      	bpl.n	8004fea <_printf_float+0x1ae>
 8004fe6:	3302      	adds	r3, #2
 8004fe8:	e7f4      	b.n	8004fd4 <_printf_float+0x198>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e7f2      	b.n	8004fd4 <_printf_float+0x198>
 8004fee:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ff4:	4299      	cmp	r1, r3
 8004ff6:	db05      	blt.n	8005004 <_printf_float+0x1c8>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	6121      	str	r1, [r4, #16]
 8004ffc:	07d8      	lsls	r0, r3, #31
 8004ffe:	d5ea      	bpl.n	8004fd6 <_printf_float+0x19a>
 8005000:	1c4b      	adds	r3, r1, #1
 8005002:	e7e7      	b.n	8004fd4 <_printf_float+0x198>
 8005004:	2900      	cmp	r1, #0
 8005006:	bfcc      	ite	gt
 8005008:	2201      	movgt	r2, #1
 800500a:	f1c1 0202 	rsble	r2, r1, #2
 800500e:	4413      	add	r3, r2
 8005010:	e7e0      	b.n	8004fd4 <_printf_float+0x198>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	055a      	lsls	r2, r3, #21
 8005016:	d407      	bmi.n	8005028 <_printf_float+0x1ec>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	4642      	mov	r2, r8
 800501c:	4631      	mov	r1, r6
 800501e:	4628      	mov	r0, r5
 8005020:	47b8      	blx	r7
 8005022:	3001      	adds	r0, #1
 8005024:	d12b      	bne.n	800507e <_printf_float+0x242>
 8005026:	e764      	b.n	8004ef2 <_printf_float+0xb6>
 8005028:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800502c:	f240 80dd 	bls.w	80051ea <_printf_float+0x3ae>
 8005030:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005034:	2200      	movs	r2, #0
 8005036:	2300      	movs	r3, #0
 8005038:	f7fb fcce 	bl	80009d8 <__aeabi_dcmpeq>
 800503c:	2800      	cmp	r0, #0
 800503e:	d033      	beq.n	80050a8 <_printf_float+0x26c>
 8005040:	2301      	movs	r3, #1
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	4a35      	ldr	r2, [pc, #212]	; (800511c <_printf_float+0x2e0>)
 8005048:	47b8      	blx	r7
 800504a:	3001      	adds	r0, #1
 800504c:	f43f af51 	beq.w	8004ef2 <_printf_float+0xb6>
 8005050:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005054:	429a      	cmp	r2, r3
 8005056:	db02      	blt.n	800505e <_printf_float+0x222>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	07d8      	lsls	r0, r3, #31
 800505c:	d50f      	bpl.n	800507e <_printf_float+0x242>
 800505e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	47b8      	blx	r7
 8005068:	3001      	adds	r0, #1
 800506a:	f43f af42 	beq.w	8004ef2 <_printf_float+0xb6>
 800506e:	f04f 0800 	mov.w	r8, #0
 8005072:	f104 091a 	add.w	r9, r4, #26
 8005076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005078:	3b01      	subs	r3, #1
 800507a:	4543      	cmp	r3, r8
 800507c:	dc09      	bgt.n	8005092 <_printf_float+0x256>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	079b      	lsls	r3, r3, #30
 8005082:	f100 8102 	bmi.w	800528a <_printf_float+0x44e>
 8005086:	68e0      	ldr	r0, [r4, #12]
 8005088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800508a:	4298      	cmp	r0, r3
 800508c:	bfb8      	it	lt
 800508e:	4618      	movlt	r0, r3
 8005090:	e731      	b.n	8004ef6 <_printf_float+0xba>
 8005092:	2301      	movs	r3, #1
 8005094:	464a      	mov	r2, r9
 8005096:	4631      	mov	r1, r6
 8005098:	4628      	mov	r0, r5
 800509a:	47b8      	blx	r7
 800509c:	3001      	adds	r0, #1
 800509e:	f43f af28 	beq.w	8004ef2 <_printf_float+0xb6>
 80050a2:	f108 0801 	add.w	r8, r8, #1
 80050a6:	e7e6      	b.n	8005076 <_printf_float+0x23a>
 80050a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	dc38      	bgt.n	8005120 <_printf_float+0x2e4>
 80050ae:	2301      	movs	r3, #1
 80050b0:	4631      	mov	r1, r6
 80050b2:	4628      	mov	r0, r5
 80050b4:	4a19      	ldr	r2, [pc, #100]	; (800511c <_printf_float+0x2e0>)
 80050b6:	47b8      	blx	r7
 80050b8:	3001      	adds	r0, #1
 80050ba:	f43f af1a 	beq.w	8004ef2 <_printf_float+0xb6>
 80050be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050c2:	4313      	orrs	r3, r2
 80050c4:	d102      	bne.n	80050cc <_printf_float+0x290>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	07d9      	lsls	r1, r3, #31
 80050ca:	d5d8      	bpl.n	800507e <_printf_float+0x242>
 80050cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050d0:	4631      	mov	r1, r6
 80050d2:	4628      	mov	r0, r5
 80050d4:	47b8      	blx	r7
 80050d6:	3001      	adds	r0, #1
 80050d8:	f43f af0b 	beq.w	8004ef2 <_printf_float+0xb6>
 80050dc:	f04f 0900 	mov.w	r9, #0
 80050e0:	f104 0a1a 	add.w	sl, r4, #26
 80050e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050e6:	425b      	negs	r3, r3
 80050e8:	454b      	cmp	r3, r9
 80050ea:	dc01      	bgt.n	80050f0 <_printf_float+0x2b4>
 80050ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050ee:	e794      	b.n	800501a <_printf_float+0x1de>
 80050f0:	2301      	movs	r3, #1
 80050f2:	4652      	mov	r2, sl
 80050f4:	4631      	mov	r1, r6
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b8      	blx	r7
 80050fa:	3001      	adds	r0, #1
 80050fc:	f43f aef9 	beq.w	8004ef2 <_printf_float+0xb6>
 8005100:	f109 0901 	add.w	r9, r9, #1
 8005104:	e7ee      	b.n	80050e4 <_printf_float+0x2a8>
 8005106:	bf00      	nop
 8005108:	7fefffff 	.word	0x7fefffff
 800510c:	080095ec 	.word	0x080095ec
 8005110:	080095f0 	.word	0x080095f0
 8005114:	080095f8 	.word	0x080095f8
 8005118:	080095f4 	.word	0x080095f4
 800511c:	080095fc 	.word	0x080095fc
 8005120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005122:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005124:	429a      	cmp	r2, r3
 8005126:	bfa8      	it	ge
 8005128:	461a      	movge	r2, r3
 800512a:	2a00      	cmp	r2, #0
 800512c:	4691      	mov	r9, r2
 800512e:	dc37      	bgt.n	80051a0 <_printf_float+0x364>
 8005130:	f04f 0b00 	mov.w	fp, #0
 8005134:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005138:	f104 021a 	add.w	r2, r4, #26
 800513c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005140:	ebaa 0309 	sub.w	r3, sl, r9
 8005144:	455b      	cmp	r3, fp
 8005146:	dc33      	bgt.n	80051b0 <_printf_float+0x374>
 8005148:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800514c:	429a      	cmp	r2, r3
 800514e:	db3b      	blt.n	80051c8 <_printf_float+0x38c>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	07da      	lsls	r2, r3, #31
 8005154:	d438      	bmi.n	80051c8 <_printf_float+0x38c>
 8005156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005158:	990d      	ldr	r1, [sp, #52]	; 0x34
 800515a:	eba3 020a 	sub.w	r2, r3, sl
 800515e:	eba3 0901 	sub.w	r9, r3, r1
 8005162:	4591      	cmp	r9, r2
 8005164:	bfa8      	it	ge
 8005166:	4691      	movge	r9, r2
 8005168:	f1b9 0f00 	cmp.w	r9, #0
 800516c:	dc34      	bgt.n	80051d8 <_printf_float+0x39c>
 800516e:	f04f 0800 	mov.w	r8, #0
 8005172:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005176:	f104 0a1a 	add.w	sl, r4, #26
 800517a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	eba3 0309 	sub.w	r3, r3, r9
 8005184:	4543      	cmp	r3, r8
 8005186:	f77f af7a 	ble.w	800507e <_printf_float+0x242>
 800518a:	2301      	movs	r3, #1
 800518c:	4652      	mov	r2, sl
 800518e:	4631      	mov	r1, r6
 8005190:	4628      	mov	r0, r5
 8005192:	47b8      	blx	r7
 8005194:	3001      	adds	r0, #1
 8005196:	f43f aeac 	beq.w	8004ef2 <_printf_float+0xb6>
 800519a:	f108 0801 	add.w	r8, r8, #1
 800519e:	e7ec      	b.n	800517a <_printf_float+0x33e>
 80051a0:	4613      	mov	r3, r2
 80051a2:	4631      	mov	r1, r6
 80051a4:	4642      	mov	r2, r8
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	d1c0      	bne.n	8005130 <_printf_float+0x2f4>
 80051ae:	e6a0      	b.n	8004ef2 <_printf_float+0xb6>
 80051b0:	2301      	movs	r3, #1
 80051b2:	4631      	mov	r1, r6
 80051b4:	4628      	mov	r0, r5
 80051b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80051b8:	47b8      	blx	r7
 80051ba:	3001      	adds	r0, #1
 80051bc:	f43f ae99 	beq.w	8004ef2 <_printf_float+0xb6>
 80051c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051c2:	f10b 0b01 	add.w	fp, fp, #1
 80051c6:	e7b9      	b.n	800513c <_printf_float+0x300>
 80051c8:	4631      	mov	r1, r6
 80051ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b8      	blx	r7
 80051d2:	3001      	adds	r0, #1
 80051d4:	d1bf      	bne.n	8005156 <_printf_float+0x31a>
 80051d6:	e68c      	b.n	8004ef2 <_printf_float+0xb6>
 80051d8:	464b      	mov	r3, r9
 80051da:	4631      	mov	r1, r6
 80051dc:	4628      	mov	r0, r5
 80051de:	eb08 020a 	add.w	r2, r8, sl
 80051e2:	47b8      	blx	r7
 80051e4:	3001      	adds	r0, #1
 80051e6:	d1c2      	bne.n	800516e <_printf_float+0x332>
 80051e8:	e683      	b.n	8004ef2 <_printf_float+0xb6>
 80051ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051ec:	2a01      	cmp	r2, #1
 80051ee:	dc01      	bgt.n	80051f4 <_printf_float+0x3b8>
 80051f0:	07db      	lsls	r3, r3, #31
 80051f2:	d537      	bpl.n	8005264 <_printf_float+0x428>
 80051f4:	2301      	movs	r3, #1
 80051f6:	4642      	mov	r2, r8
 80051f8:	4631      	mov	r1, r6
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	f43f ae77 	beq.w	8004ef2 <_printf_float+0xb6>
 8005204:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	47b8      	blx	r7
 800520e:	3001      	adds	r0, #1
 8005210:	f43f ae6f 	beq.w	8004ef2 <_printf_float+0xb6>
 8005214:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005218:	2200      	movs	r2, #0
 800521a:	2300      	movs	r3, #0
 800521c:	f7fb fbdc 	bl	80009d8 <__aeabi_dcmpeq>
 8005220:	b9d8      	cbnz	r0, 800525a <_printf_float+0x41e>
 8005222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005224:	f108 0201 	add.w	r2, r8, #1
 8005228:	3b01      	subs	r3, #1
 800522a:	4631      	mov	r1, r6
 800522c:	4628      	mov	r0, r5
 800522e:	47b8      	blx	r7
 8005230:	3001      	adds	r0, #1
 8005232:	d10e      	bne.n	8005252 <_printf_float+0x416>
 8005234:	e65d      	b.n	8004ef2 <_printf_float+0xb6>
 8005236:	2301      	movs	r3, #1
 8005238:	464a      	mov	r2, r9
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	f43f ae56 	beq.w	8004ef2 <_printf_float+0xb6>
 8005246:	f108 0801 	add.w	r8, r8, #1
 800524a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800524c:	3b01      	subs	r3, #1
 800524e:	4543      	cmp	r3, r8
 8005250:	dcf1      	bgt.n	8005236 <_printf_float+0x3fa>
 8005252:	4653      	mov	r3, sl
 8005254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005258:	e6e0      	b.n	800501c <_printf_float+0x1e0>
 800525a:	f04f 0800 	mov.w	r8, #0
 800525e:	f104 091a 	add.w	r9, r4, #26
 8005262:	e7f2      	b.n	800524a <_printf_float+0x40e>
 8005264:	2301      	movs	r3, #1
 8005266:	4642      	mov	r2, r8
 8005268:	e7df      	b.n	800522a <_printf_float+0x3ee>
 800526a:	2301      	movs	r3, #1
 800526c:	464a      	mov	r2, r9
 800526e:	4631      	mov	r1, r6
 8005270:	4628      	mov	r0, r5
 8005272:	47b8      	blx	r7
 8005274:	3001      	adds	r0, #1
 8005276:	f43f ae3c 	beq.w	8004ef2 <_printf_float+0xb6>
 800527a:	f108 0801 	add.w	r8, r8, #1
 800527e:	68e3      	ldr	r3, [r4, #12]
 8005280:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005282:	1a5b      	subs	r3, r3, r1
 8005284:	4543      	cmp	r3, r8
 8005286:	dcf0      	bgt.n	800526a <_printf_float+0x42e>
 8005288:	e6fd      	b.n	8005086 <_printf_float+0x24a>
 800528a:	f04f 0800 	mov.w	r8, #0
 800528e:	f104 0919 	add.w	r9, r4, #25
 8005292:	e7f4      	b.n	800527e <_printf_float+0x442>

08005294 <_printf_common>:
 8005294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005298:	4616      	mov	r6, r2
 800529a:	4699      	mov	r9, r3
 800529c:	688a      	ldr	r2, [r1, #8]
 800529e:	690b      	ldr	r3, [r1, #16]
 80052a0:	4607      	mov	r7, r0
 80052a2:	4293      	cmp	r3, r2
 80052a4:	bfb8      	it	lt
 80052a6:	4613      	movlt	r3, r2
 80052a8:	6033      	str	r3, [r6, #0]
 80052aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052ae:	460c      	mov	r4, r1
 80052b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052b4:	b10a      	cbz	r2, 80052ba <_printf_common+0x26>
 80052b6:	3301      	adds	r3, #1
 80052b8:	6033      	str	r3, [r6, #0]
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	0699      	lsls	r1, r3, #26
 80052be:	bf42      	ittt	mi
 80052c0:	6833      	ldrmi	r3, [r6, #0]
 80052c2:	3302      	addmi	r3, #2
 80052c4:	6033      	strmi	r3, [r6, #0]
 80052c6:	6825      	ldr	r5, [r4, #0]
 80052c8:	f015 0506 	ands.w	r5, r5, #6
 80052cc:	d106      	bne.n	80052dc <_printf_common+0x48>
 80052ce:	f104 0a19 	add.w	sl, r4, #25
 80052d2:	68e3      	ldr	r3, [r4, #12]
 80052d4:	6832      	ldr	r2, [r6, #0]
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	42ab      	cmp	r3, r5
 80052da:	dc28      	bgt.n	800532e <_printf_common+0x9a>
 80052dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052e0:	1e13      	subs	r3, r2, #0
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	bf18      	it	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	0692      	lsls	r2, r2, #26
 80052ea:	d42d      	bmi.n	8005348 <_printf_common+0xb4>
 80052ec:	4649      	mov	r1, r9
 80052ee:	4638      	mov	r0, r7
 80052f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052f4:	47c0      	blx	r8
 80052f6:	3001      	adds	r0, #1
 80052f8:	d020      	beq.n	800533c <_printf_common+0xa8>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	68e5      	ldr	r5, [r4, #12]
 80052fe:	f003 0306 	and.w	r3, r3, #6
 8005302:	2b04      	cmp	r3, #4
 8005304:	bf18      	it	ne
 8005306:	2500      	movne	r5, #0
 8005308:	6832      	ldr	r2, [r6, #0]
 800530a:	f04f 0600 	mov.w	r6, #0
 800530e:	68a3      	ldr	r3, [r4, #8]
 8005310:	bf08      	it	eq
 8005312:	1aad      	subeq	r5, r5, r2
 8005314:	6922      	ldr	r2, [r4, #16]
 8005316:	bf08      	it	eq
 8005318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800531c:	4293      	cmp	r3, r2
 800531e:	bfc4      	itt	gt
 8005320:	1a9b      	subgt	r3, r3, r2
 8005322:	18ed      	addgt	r5, r5, r3
 8005324:	341a      	adds	r4, #26
 8005326:	42b5      	cmp	r5, r6
 8005328:	d11a      	bne.n	8005360 <_printf_common+0xcc>
 800532a:	2000      	movs	r0, #0
 800532c:	e008      	b.n	8005340 <_printf_common+0xac>
 800532e:	2301      	movs	r3, #1
 8005330:	4652      	mov	r2, sl
 8005332:	4649      	mov	r1, r9
 8005334:	4638      	mov	r0, r7
 8005336:	47c0      	blx	r8
 8005338:	3001      	adds	r0, #1
 800533a:	d103      	bne.n	8005344 <_printf_common+0xb0>
 800533c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005344:	3501      	adds	r5, #1
 8005346:	e7c4      	b.n	80052d2 <_printf_common+0x3e>
 8005348:	2030      	movs	r0, #48	; 0x30
 800534a:	18e1      	adds	r1, r4, r3
 800534c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005356:	4422      	add	r2, r4
 8005358:	3302      	adds	r3, #2
 800535a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800535e:	e7c5      	b.n	80052ec <_printf_common+0x58>
 8005360:	2301      	movs	r3, #1
 8005362:	4622      	mov	r2, r4
 8005364:	4649      	mov	r1, r9
 8005366:	4638      	mov	r0, r7
 8005368:	47c0      	blx	r8
 800536a:	3001      	adds	r0, #1
 800536c:	d0e6      	beq.n	800533c <_printf_common+0xa8>
 800536e:	3601      	adds	r6, #1
 8005370:	e7d9      	b.n	8005326 <_printf_common+0x92>
	...

08005374 <_printf_i>:
 8005374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005378:	7e0f      	ldrb	r7, [r1, #24]
 800537a:	4691      	mov	r9, r2
 800537c:	2f78      	cmp	r7, #120	; 0x78
 800537e:	4680      	mov	r8, r0
 8005380:	460c      	mov	r4, r1
 8005382:	469a      	mov	sl, r3
 8005384:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005386:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800538a:	d807      	bhi.n	800539c <_printf_i+0x28>
 800538c:	2f62      	cmp	r7, #98	; 0x62
 800538e:	d80a      	bhi.n	80053a6 <_printf_i+0x32>
 8005390:	2f00      	cmp	r7, #0
 8005392:	f000 80d9 	beq.w	8005548 <_printf_i+0x1d4>
 8005396:	2f58      	cmp	r7, #88	; 0x58
 8005398:	f000 80a4 	beq.w	80054e4 <_printf_i+0x170>
 800539c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053a4:	e03a      	b.n	800541c <_printf_i+0xa8>
 80053a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053aa:	2b15      	cmp	r3, #21
 80053ac:	d8f6      	bhi.n	800539c <_printf_i+0x28>
 80053ae:	a101      	add	r1, pc, #4	; (adr r1, 80053b4 <_printf_i+0x40>)
 80053b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053b4:	0800540d 	.word	0x0800540d
 80053b8:	08005421 	.word	0x08005421
 80053bc:	0800539d 	.word	0x0800539d
 80053c0:	0800539d 	.word	0x0800539d
 80053c4:	0800539d 	.word	0x0800539d
 80053c8:	0800539d 	.word	0x0800539d
 80053cc:	08005421 	.word	0x08005421
 80053d0:	0800539d 	.word	0x0800539d
 80053d4:	0800539d 	.word	0x0800539d
 80053d8:	0800539d 	.word	0x0800539d
 80053dc:	0800539d 	.word	0x0800539d
 80053e0:	0800552f 	.word	0x0800552f
 80053e4:	08005451 	.word	0x08005451
 80053e8:	08005511 	.word	0x08005511
 80053ec:	0800539d 	.word	0x0800539d
 80053f0:	0800539d 	.word	0x0800539d
 80053f4:	08005551 	.word	0x08005551
 80053f8:	0800539d 	.word	0x0800539d
 80053fc:	08005451 	.word	0x08005451
 8005400:	0800539d 	.word	0x0800539d
 8005404:	0800539d 	.word	0x0800539d
 8005408:	08005519 	.word	0x08005519
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	1d1a      	adds	r2, r3, #4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	602a      	str	r2, [r5, #0]
 8005414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800541c:	2301      	movs	r3, #1
 800541e:	e0a4      	b.n	800556a <_printf_i+0x1f6>
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	6829      	ldr	r1, [r5, #0]
 8005424:	0606      	lsls	r6, r0, #24
 8005426:	f101 0304 	add.w	r3, r1, #4
 800542a:	d50a      	bpl.n	8005442 <_printf_i+0xce>
 800542c:	680e      	ldr	r6, [r1, #0]
 800542e:	602b      	str	r3, [r5, #0]
 8005430:	2e00      	cmp	r6, #0
 8005432:	da03      	bge.n	800543c <_printf_i+0xc8>
 8005434:	232d      	movs	r3, #45	; 0x2d
 8005436:	4276      	negs	r6, r6
 8005438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800543c:	230a      	movs	r3, #10
 800543e:	485e      	ldr	r0, [pc, #376]	; (80055b8 <_printf_i+0x244>)
 8005440:	e019      	b.n	8005476 <_printf_i+0x102>
 8005442:	680e      	ldr	r6, [r1, #0]
 8005444:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005448:	602b      	str	r3, [r5, #0]
 800544a:	bf18      	it	ne
 800544c:	b236      	sxthne	r6, r6
 800544e:	e7ef      	b.n	8005430 <_printf_i+0xbc>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	6820      	ldr	r0, [r4, #0]
 8005454:	1d19      	adds	r1, r3, #4
 8005456:	6029      	str	r1, [r5, #0]
 8005458:	0601      	lsls	r1, r0, #24
 800545a:	d501      	bpl.n	8005460 <_printf_i+0xec>
 800545c:	681e      	ldr	r6, [r3, #0]
 800545e:	e002      	b.n	8005466 <_printf_i+0xf2>
 8005460:	0646      	lsls	r6, r0, #25
 8005462:	d5fb      	bpl.n	800545c <_printf_i+0xe8>
 8005464:	881e      	ldrh	r6, [r3, #0]
 8005466:	2f6f      	cmp	r7, #111	; 0x6f
 8005468:	bf0c      	ite	eq
 800546a:	2308      	moveq	r3, #8
 800546c:	230a      	movne	r3, #10
 800546e:	4852      	ldr	r0, [pc, #328]	; (80055b8 <_printf_i+0x244>)
 8005470:	2100      	movs	r1, #0
 8005472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005476:	6865      	ldr	r5, [r4, #4]
 8005478:	2d00      	cmp	r5, #0
 800547a:	bfa8      	it	ge
 800547c:	6821      	ldrge	r1, [r4, #0]
 800547e:	60a5      	str	r5, [r4, #8]
 8005480:	bfa4      	itt	ge
 8005482:	f021 0104 	bicge.w	r1, r1, #4
 8005486:	6021      	strge	r1, [r4, #0]
 8005488:	b90e      	cbnz	r6, 800548e <_printf_i+0x11a>
 800548a:	2d00      	cmp	r5, #0
 800548c:	d04d      	beq.n	800552a <_printf_i+0x1b6>
 800548e:	4615      	mov	r5, r2
 8005490:	fbb6 f1f3 	udiv	r1, r6, r3
 8005494:	fb03 6711 	mls	r7, r3, r1, r6
 8005498:	5dc7      	ldrb	r7, [r0, r7]
 800549a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800549e:	4637      	mov	r7, r6
 80054a0:	42bb      	cmp	r3, r7
 80054a2:	460e      	mov	r6, r1
 80054a4:	d9f4      	bls.n	8005490 <_printf_i+0x11c>
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d10b      	bne.n	80054c2 <_printf_i+0x14e>
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	07de      	lsls	r6, r3, #31
 80054ae:	d508      	bpl.n	80054c2 <_printf_i+0x14e>
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	6861      	ldr	r1, [r4, #4]
 80054b4:	4299      	cmp	r1, r3
 80054b6:	bfde      	ittt	le
 80054b8:	2330      	movle	r3, #48	; 0x30
 80054ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054be:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80054c2:	1b52      	subs	r2, r2, r5
 80054c4:	6122      	str	r2, [r4, #16]
 80054c6:	464b      	mov	r3, r9
 80054c8:	4621      	mov	r1, r4
 80054ca:	4640      	mov	r0, r8
 80054cc:	f8cd a000 	str.w	sl, [sp]
 80054d0:	aa03      	add	r2, sp, #12
 80054d2:	f7ff fedf 	bl	8005294 <_printf_common>
 80054d6:	3001      	adds	r0, #1
 80054d8:	d14c      	bne.n	8005574 <_printf_i+0x200>
 80054da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054de:	b004      	add	sp, #16
 80054e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e4:	4834      	ldr	r0, [pc, #208]	; (80055b8 <_printf_i+0x244>)
 80054e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054ea:	6829      	ldr	r1, [r5, #0]
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80054f2:	6029      	str	r1, [r5, #0]
 80054f4:	061d      	lsls	r5, r3, #24
 80054f6:	d514      	bpl.n	8005522 <_printf_i+0x1ae>
 80054f8:	07df      	lsls	r7, r3, #31
 80054fa:	bf44      	itt	mi
 80054fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005500:	6023      	strmi	r3, [r4, #0]
 8005502:	b91e      	cbnz	r6, 800550c <_printf_i+0x198>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	f023 0320 	bic.w	r3, r3, #32
 800550a:	6023      	str	r3, [r4, #0]
 800550c:	2310      	movs	r3, #16
 800550e:	e7af      	b.n	8005470 <_printf_i+0xfc>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	f043 0320 	orr.w	r3, r3, #32
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	2378      	movs	r3, #120	; 0x78
 800551a:	4828      	ldr	r0, [pc, #160]	; (80055bc <_printf_i+0x248>)
 800551c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005520:	e7e3      	b.n	80054ea <_printf_i+0x176>
 8005522:	0659      	lsls	r1, r3, #25
 8005524:	bf48      	it	mi
 8005526:	b2b6      	uxthmi	r6, r6
 8005528:	e7e6      	b.n	80054f8 <_printf_i+0x184>
 800552a:	4615      	mov	r5, r2
 800552c:	e7bb      	b.n	80054a6 <_printf_i+0x132>
 800552e:	682b      	ldr	r3, [r5, #0]
 8005530:	6826      	ldr	r6, [r4, #0]
 8005532:	1d18      	adds	r0, r3, #4
 8005534:	6961      	ldr	r1, [r4, #20]
 8005536:	6028      	str	r0, [r5, #0]
 8005538:	0635      	lsls	r5, r6, #24
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	d501      	bpl.n	8005542 <_printf_i+0x1ce>
 800553e:	6019      	str	r1, [r3, #0]
 8005540:	e002      	b.n	8005548 <_printf_i+0x1d4>
 8005542:	0670      	lsls	r0, r6, #25
 8005544:	d5fb      	bpl.n	800553e <_printf_i+0x1ca>
 8005546:	8019      	strh	r1, [r3, #0]
 8005548:	2300      	movs	r3, #0
 800554a:	4615      	mov	r5, r2
 800554c:	6123      	str	r3, [r4, #16]
 800554e:	e7ba      	b.n	80054c6 <_printf_i+0x152>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	2100      	movs	r1, #0
 8005554:	1d1a      	adds	r2, r3, #4
 8005556:	602a      	str	r2, [r5, #0]
 8005558:	681d      	ldr	r5, [r3, #0]
 800555a:	6862      	ldr	r2, [r4, #4]
 800555c:	4628      	mov	r0, r5
 800555e:	f002 faed 	bl	8007b3c <memchr>
 8005562:	b108      	cbz	r0, 8005568 <_printf_i+0x1f4>
 8005564:	1b40      	subs	r0, r0, r5
 8005566:	6060      	str	r0, [r4, #4]
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	2300      	movs	r3, #0
 800556e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005572:	e7a8      	b.n	80054c6 <_printf_i+0x152>
 8005574:	462a      	mov	r2, r5
 8005576:	4649      	mov	r1, r9
 8005578:	4640      	mov	r0, r8
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	47d0      	blx	sl
 800557e:	3001      	adds	r0, #1
 8005580:	d0ab      	beq.n	80054da <_printf_i+0x166>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	079b      	lsls	r3, r3, #30
 8005586:	d413      	bmi.n	80055b0 <_printf_i+0x23c>
 8005588:	68e0      	ldr	r0, [r4, #12]
 800558a:	9b03      	ldr	r3, [sp, #12]
 800558c:	4298      	cmp	r0, r3
 800558e:	bfb8      	it	lt
 8005590:	4618      	movlt	r0, r3
 8005592:	e7a4      	b.n	80054de <_printf_i+0x16a>
 8005594:	2301      	movs	r3, #1
 8005596:	4632      	mov	r2, r6
 8005598:	4649      	mov	r1, r9
 800559a:	4640      	mov	r0, r8
 800559c:	47d0      	blx	sl
 800559e:	3001      	adds	r0, #1
 80055a0:	d09b      	beq.n	80054da <_printf_i+0x166>
 80055a2:	3501      	adds	r5, #1
 80055a4:	68e3      	ldr	r3, [r4, #12]
 80055a6:	9903      	ldr	r1, [sp, #12]
 80055a8:	1a5b      	subs	r3, r3, r1
 80055aa:	42ab      	cmp	r3, r5
 80055ac:	dcf2      	bgt.n	8005594 <_printf_i+0x220>
 80055ae:	e7eb      	b.n	8005588 <_printf_i+0x214>
 80055b0:	2500      	movs	r5, #0
 80055b2:	f104 0619 	add.w	r6, r4, #25
 80055b6:	e7f5      	b.n	80055a4 <_printf_i+0x230>
 80055b8:	080095fe 	.word	0x080095fe
 80055bc:	0800960f 	.word	0x0800960f

080055c0 <_scanf_float>:
 80055c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	b087      	sub	sp, #28
 80055c6:	9303      	str	r3, [sp, #12]
 80055c8:	688b      	ldr	r3, [r1, #8]
 80055ca:	4617      	mov	r7, r2
 80055cc:	1e5a      	subs	r2, r3, #1
 80055ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80055d2:	bf85      	ittet	hi
 80055d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80055d8:	195b      	addhi	r3, r3, r5
 80055da:	2300      	movls	r3, #0
 80055dc:	9302      	strhi	r3, [sp, #8]
 80055de:	bf88      	it	hi
 80055e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80055e4:	468b      	mov	fp, r1
 80055e6:	f04f 0500 	mov.w	r5, #0
 80055ea:	bf8c      	ite	hi
 80055ec:	608b      	strhi	r3, [r1, #8]
 80055ee:	9302      	strls	r3, [sp, #8]
 80055f0:	680b      	ldr	r3, [r1, #0]
 80055f2:	4680      	mov	r8, r0
 80055f4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80055f8:	f84b 3b1c 	str.w	r3, [fp], #28
 80055fc:	460c      	mov	r4, r1
 80055fe:	465e      	mov	r6, fp
 8005600:	46aa      	mov	sl, r5
 8005602:	46a9      	mov	r9, r5
 8005604:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005608:	9501      	str	r5, [sp, #4]
 800560a:	68a2      	ldr	r2, [r4, #8]
 800560c:	b152      	cbz	r2, 8005624 <_scanf_float+0x64>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b4e      	cmp	r3, #78	; 0x4e
 8005614:	d864      	bhi.n	80056e0 <_scanf_float+0x120>
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d83c      	bhi.n	8005694 <_scanf_float+0xd4>
 800561a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800561e:	b2c8      	uxtb	r0, r1
 8005620:	280e      	cmp	r0, #14
 8005622:	d93a      	bls.n	800569a <_scanf_float+0xda>
 8005624:	f1b9 0f00 	cmp.w	r9, #0
 8005628:	d003      	beq.n	8005632 <_scanf_float+0x72>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005636:	f1ba 0f01 	cmp.w	sl, #1
 800563a:	f200 8113 	bhi.w	8005864 <_scanf_float+0x2a4>
 800563e:	455e      	cmp	r6, fp
 8005640:	f200 8105 	bhi.w	800584e <_scanf_float+0x28e>
 8005644:	2501      	movs	r5, #1
 8005646:	4628      	mov	r0, r5
 8005648:	b007      	add	sp, #28
 800564a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005652:	2a0d      	cmp	r2, #13
 8005654:	d8e6      	bhi.n	8005624 <_scanf_float+0x64>
 8005656:	a101      	add	r1, pc, #4	; (adr r1, 800565c <_scanf_float+0x9c>)
 8005658:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800565c:	0800579b 	.word	0x0800579b
 8005660:	08005625 	.word	0x08005625
 8005664:	08005625 	.word	0x08005625
 8005668:	08005625 	.word	0x08005625
 800566c:	080057fb 	.word	0x080057fb
 8005670:	080057d3 	.word	0x080057d3
 8005674:	08005625 	.word	0x08005625
 8005678:	08005625 	.word	0x08005625
 800567c:	080057a9 	.word	0x080057a9
 8005680:	08005625 	.word	0x08005625
 8005684:	08005625 	.word	0x08005625
 8005688:	08005625 	.word	0x08005625
 800568c:	08005625 	.word	0x08005625
 8005690:	08005761 	.word	0x08005761
 8005694:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005698:	e7db      	b.n	8005652 <_scanf_float+0x92>
 800569a:	290e      	cmp	r1, #14
 800569c:	d8c2      	bhi.n	8005624 <_scanf_float+0x64>
 800569e:	a001      	add	r0, pc, #4	; (adr r0, 80056a4 <_scanf_float+0xe4>)
 80056a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80056a4:	08005753 	.word	0x08005753
 80056a8:	08005625 	.word	0x08005625
 80056ac:	08005753 	.word	0x08005753
 80056b0:	080057e7 	.word	0x080057e7
 80056b4:	08005625 	.word	0x08005625
 80056b8:	08005701 	.word	0x08005701
 80056bc:	0800573d 	.word	0x0800573d
 80056c0:	0800573d 	.word	0x0800573d
 80056c4:	0800573d 	.word	0x0800573d
 80056c8:	0800573d 	.word	0x0800573d
 80056cc:	0800573d 	.word	0x0800573d
 80056d0:	0800573d 	.word	0x0800573d
 80056d4:	0800573d 	.word	0x0800573d
 80056d8:	0800573d 	.word	0x0800573d
 80056dc:	0800573d 	.word	0x0800573d
 80056e0:	2b6e      	cmp	r3, #110	; 0x6e
 80056e2:	d809      	bhi.n	80056f8 <_scanf_float+0x138>
 80056e4:	2b60      	cmp	r3, #96	; 0x60
 80056e6:	d8b2      	bhi.n	800564e <_scanf_float+0x8e>
 80056e8:	2b54      	cmp	r3, #84	; 0x54
 80056ea:	d077      	beq.n	80057dc <_scanf_float+0x21c>
 80056ec:	2b59      	cmp	r3, #89	; 0x59
 80056ee:	d199      	bne.n	8005624 <_scanf_float+0x64>
 80056f0:	2d07      	cmp	r5, #7
 80056f2:	d197      	bne.n	8005624 <_scanf_float+0x64>
 80056f4:	2508      	movs	r5, #8
 80056f6:	e029      	b.n	800574c <_scanf_float+0x18c>
 80056f8:	2b74      	cmp	r3, #116	; 0x74
 80056fa:	d06f      	beq.n	80057dc <_scanf_float+0x21c>
 80056fc:	2b79      	cmp	r3, #121	; 0x79
 80056fe:	e7f6      	b.n	80056ee <_scanf_float+0x12e>
 8005700:	6821      	ldr	r1, [r4, #0]
 8005702:	05c8      	lsls	r0, r1, #23
 8005704:	d51a      	bpl.n	800573c <_scanf_float+0x17c>
 8005706:	9b02      	ldr	r3, [sp, #8]
 8005708:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800570c:	6021      	str	r1, [r4, #0]
 800570e:	f109 0901 	add.w	r9, r9, #1
 8005712:	b11b      	cbz	r3, 800571c <_scanf_float+0x15c>
 8005714:	3b01      	subs	r3, #1
 8005716:	3201      	adds	r2, #1
 8005718:	9302      	str	r3, [sp, #8]
 800571a:	60a2      	str	r2, [r4, #8]
 800571c:	68a3      	ldr	r3, [r4, #8]
 800571e:	3b01      	subs	r3, #1
 8005720:	60a3      	str	r3, [r4, #8]
 8005722:	6923      	ldr	r3, [r4, #16]
 8005724:	3301      	adds	r3, #1
 8005726:	6123      	str	r3, [r4, #16]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3b01      	subs	r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	f340 8084 	ble.w	800583c <_scanf_float+0x27c>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	3301      	adds	r3, #1
 8005738:	603b      	str	r3, [r7, #0]
 800573a:	e766      	b.n	800560a <_scanf_float+0x4a>
 800573c:	eb1a 0f05 	cmn.w	sl, r5
 8005740:	f47f af70 	bne.w	8005624 <_scanf_float+0x64>
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800574a:	6022      	str	r2, [r4, #0]
 800574c:	f806 3b01 	strb.w	r3, [r6], #1
 8005750:	e7e4      	b.n	800571c <_scanf_float+0x15c>
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	0610      	lsls	r0, r2, #24
 8005756:	f57f af65 	bpl.w	8005624 <_scanf_float+0x64>
 800575a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800575e:	e7f4      	b.n	800574a <_scanf_float+0x18a>
 8005760:	f1ba 0f00 	cmp.w	sl, #0
 8005764:	d10e      	bne.n	8005784 <_scanf_float+0x1c4>
 8005766:	f1b9 0f00 	cmp.w	r9, #0
 800576a:	d10e      	bne.n	800578a <_scanf_float+0x1ca>
 800576c:	6822      	ldr	r2, [r4, #0]
 800576e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005772:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005776:	d108      	bne.n	800578a <_scanf_float+0x1ca>
 8005778:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800577c:	f04f 0a01 	mov.w	sl, #1
 8005780:	6022      	str	r2, [r4, #0]
 8005782:	e7e3      	b.n	800574c <_scanf_float+0x18c>
 8005784:	f1ba 0f02 	cmp.w	sl, #2
 8005788:	d055      	beq.n	8005836 <_scanf_float+0x276>
 800578a:	2d01      	cmp	r5, #1
 800578c:	d002      	beq.n	8005794 <_scanf_float+0x1d4>
 800578e:	2d04      	cmp	r5, #4
 8005790:	f47f af48 	bne.w	8005624 <_scanf_float+0x64>
 8005794:	3501      	adds	r5, #1
 8005796:	b2ed      	uxtb	r5, r5
 8005798:	e7d8      	b.n	800574c <_scanf_float+0x18c>
 800579a:	f1ba 0f01 	cmp.w	sl, #1
 800579e:	f47f af41 	bne.w	8005624 <_scanf_float+0x64>
 80057a2:	f04f 0a02 	mov.w	sl, #2
 80057a6:	e7d1      	b.n	800574c <_scanf_float+0x18c>
 80057a8:	b97d      	cbnz	r5, 80057ca <_scanf_float+0x20a>
 80057aa:	f1b9 0f00 	cmp.w	r9, #0
 80057ae:	f47f af3c 	bne.w	800562a <_scanf_float+0x6a>
 80057b2:	6822      	ldr	r2, [r4, #0]
 80057b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80057bc:	f47f af39 	bne.w	8005632 <_scanf_float+0x72>
 80057c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057c4:	2501      	movs	r5, #1
 80057c6:	6022      	str	r2, [r4, #0]
 80057c8:	e7c0      	b.n	800574c <_scanf_float+0x18c>
 80057ca:	2d03      	cmp	r5, #3
 80057cc:	d0e2      	beq.n	8005794 <_scanf_float+0x1d4>
 80057ce:	2d05      	cmp	r5, #5
 80057d0:	e7de      	b.n	8005790 <_scanf_float+0x1d0>
 80057d2:	2d02      	cmp	r5, #2
 80057d4:	f47f af26 	bne.w	8005624 <_scanf_float+0x64>
 80057d8:	2503      	movs	r5, #3
 80057da:	e7b7      	b.n	800574c <_scanf_float+0x18c>
 80057dc:	2d06      	cmp	r5, #6
 80057de:	f47f af21 	bne.w	8005624 <_scanf_float+0x64>
 80057e2:	2507      	movs	r5, #7
 80057e4:	e7b2      	b.n	800574c <_scanf_float+0x18c>
 80057e6:	6822      	ldr	r2, [r4, #0]
 80057e8:	0591      	lsls	r1, r2, #22
 80057ea:	f57f af1b 	bpl.w	8005624 <_scanf_float+0x64>
 80057ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80057f2:	6022      	str	r2, [r4, #0]
 80057f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80057f8:	e7a8      	b.n	800574c <_scanf_float+0x18c>
 80057fa:	6822      	ldr	r2, [r4, #0]
 80057fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005800:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005804:	d006      	beq.n	8005814 <_scanf_float+0x254>
 8005806:	0550      	lsls	r0, r2, #21
 8005808:	f57f af0c 	bpl.w	8005624 <_scanf_float+0x64>
 800580c:	f1b9 0f00 	cmp.w	r9, #0
 8005810:	f43f af0f 	beq.w	8005632 <_scanf_float+0x72>
 8005814:	0591      	lsls	r1, r2, #22
 8005816:	bf58      	it	pl
 8005818:	9901      	ldrpl	r1, [sp, #4]
 800581a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800581e:	bf58      	it	pl
 8005820:	eba9 0101 	subpl.w	r1, r9, r1
 8005824:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005828:	f04f 0900 	mov.w	r9, #0
 800582c:	bf58      	it	pl
 800582e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005832:	6022      	str	r2, [r4, #0]
 8005834:	e78a      	b.n	800574c <_scanf_float+0x18c>
 8005836:	f04f 0a03 	mov.w	sl, #3
 800583a:	e787      	b.n	800574c <_scanf_float+0x18c>
 800583c:	4639      	mov	r1, r7
 800583e:	4640      	mov	r0, r8
 8005840:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005844:	4798      	blx	r3
 8005846:	2800      	cmp	r0, #0
 8005848:	f43f aedf 	beq.w	800560a <_scanf_float+0x4a>
 800584c:	e6ea      	b.n	8005624 <_scanf_float+0x64>
 800584e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005852:	463a      	mov	r2, r7
 8005854:	4640      	mov	r0, r8
 8005856:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800585a:	4798      	blx	r3
 800585c:	6923      	ldr	r3, [r4, #16]
 800585e:	3b01      	subs	r3, #1
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	e6ec      	b.n	800563e <_scanf_float+0x7e>
 8005864:	1e6b      	subs	r3, r5, #1
 8005866:	2b06      	cmp	r3, #6
 8005868:	d825      	bhi.n	80058b6 <_scanf_float+0x2f6>
 800586a:	2d02      	cmp	r5, #2
 800586c:	d836      	bhi.n	80058dc <_scanf_float+0x31c>
 800586e:	455e      	cmp	r6, fp
 8005870:	f67f aee8 	bls.w	8005644 <_scanf_float+0x84>
 8005874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005878:	463a      	mov	r2, r7
 800587a:	4640      	mov	r0, r8
 800587c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005880:	4798      	blx	r3
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	3b01      	subs	r3, #1
 8005886:	6123      	str	r3, [r4, #16]
 8005888:	e7f1      	b.n	800586e <_scanf_float+0x2ae>
 800588a:	9802      	ldr	r0, [sp, #8]
 800588c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005890:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005894:	463a      	mov	r2, r7
 8005896:	9002      	str	r0, [sp, #8]
 8005898:	4640      	mov	r0, r8
 800589a:	4798      	blx	r3
 800589c:	6923      	ldr	r3, [r4, #16]
 800589e:	3b01      	subs	r3, #1
 80058a0:	6123      	str	r3, [r4, #16]
 80058a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80058a6:	fa5f fa8a 	uxtb.w	sl, sl
 80058aa:	f1ba 0f02 	cmp.w	sl, #2
 80058ae:	d1ec      	bne.n	800588a <_scanf_float+0x2ca>
 80058b0:	3d03      	subs	r5, #3
 80058b2:	b2ed      	uxtb	r5, r5
 80058b4:	1b76      	subs	r6, r6, r5
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	05da      	lsls	r2, r3, #23
 80058ba:	d52f      	bpl.n	800591c <_scanf_float+0x35c>
 80058bc:	055b      	lsls	r3, r3, #21
 80058be:	d510      	bpl.n	80058e2 <_scanf_float+0x322>
 80058c0:	455e      	cmp	r6, fp
 80058c2:	f67f aebf 	bls.w	8005644 <_scanf_float+0x84>
 80058c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058ca:	463a      	mov	r2, r7
 80058cc:	4640      	mov	r0, r8
 80058ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058d2:	4798      	blx	r3
 80058d4:	6923      	ldr	r3, [r4, #16]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	6123      	str	r3, [r4, #16]
 80058da:	e7f1      	b.n	80058c0 <_scanf_float+0x300>
 80058dc:	46aa      	mov	sl, r5
 80058de:	9602      	str	r6, [sp, #8]
 80058e0:	e7df      	b.n	80058a2 <_scanf_float+0x2e2>
 80058e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80058e6:	6923      	ldr	r3, [r4, #16]
 80058e8:	2965      	cmp	r1, #101	; 0x65
 80058ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80058ee:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80058f2:	6123      	str	r3, [r4, #16]
 80058f4:	d00c      	beq.n	8005910 <_scanf_float+0x350>
 80058f6:	2945      	cmp	r1, #69	; 0x45
 80058f8:	d00a      	beq.n	8005910 <_scanf_float+0x350>
 80058fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058fe:	463a      	mov	r2, r7
 8005900:	4640      	mov	r0, r8
 8005902:	4798      	blx	r3
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800590a:	3b01      	subs	r3, #1
 800590c:	1eb5      	subs	r5, r6, #2
 800590e:	6123      	str	r3, [r4, #16]
 8005910:	463a      	mov	r2, r7
 8005912:	4640      	mov	r0, r8
 8005914:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005918:	4798      	blx	r3
 800591a:	462e      	mov	r6, r5
 800591c:	6825      	ldr	r5, [r4, #0]
 800591e:	f015 0510 	ands.w	r5, r5, #16
 8005922:	d155      	bne.n	80059d0 <_scanf_float+0x410>
 8005924:	7035      	strb	r5, [r6, #0]
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800592c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005930:	d11b      	bne.n	800596a <_scanf_float+0x3aa>
 8005932:	9b01      	ldr	r3, [sp, #4]
 8005934:	454b      	cmp	r3, r9
 8005936:	eba3 0209 	sub.w	r2, r3, r9
 800593a:	d123      	bne.n	8005984 <_scanf_float+0x3c4>
 800593c:	2200      	movs	r2, #0
 800593e:	4659      	mov	r1, fp
 8005940:	4640      	mov	r0, r8
 8005942:	f000 fe79 	bl	8006638 <_strtod_r>
 8005946:	6822      	ldr	r2, [r4, #0]
 8005948:	9b03      	ldr	r3, [sp, #12]
 800594a:	f012 0f02 	tst.w	r2, #2
 800594e:	4606      	mov	r6, r0
 8005950:	460f      	mov	r7, r1
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	d021      	beq.n	800599a <_scanf_float+0x3da>
 8005956:	1d1a      	adds	r2, r3, #4
 8005958:	9903      	ldr	r1, [sp, #12]
 800595a:	600a      	str	r2, [r1, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	e9c3 6700 	strd	r6, r7, [r3]
 8005962:	68e3      	ldr	r3, [r4, #12]
 8005964:	3301      	adds	r3, #1
 8005966:	60e3      	str	r3, [r4, #12]
 8005968:	e66d      	b.n	8005646 <_scanf_float+0x86>
 800596a:	9b04      	ldr	r3, [sp, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0e5      	beq.n	800593c <_scanf_float+0x37c>
 8005970:	9905      	ldr	r1, [sp, #20]
 8005972:	230a      	movs	r3, #10
 8005974:	462a      	mov	r2, r5
 8005976:	4640      	mov	r0, r8
 8005978:	3101      	adds	r1, #1
 800597a:	f000 fedf 	bl	800673c <_strtol_r>
 800597e:	9b04      	ldr	r3, [sp, #16]
 8005980:	9e05      	ldr	r6, [sp, #20]
 8005982:	1ac2      	subs	r2, r0, r3
 8005984:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005988:	429e      	cmp	r6, r3
 800598a:	bf28      	it	cs
 800598c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005990:	4630      	mov	r0, r6
 8005992:	4910      	ldr	r1, [pc, #64]	; (80059d4 <_scanf_float+0x414>)
 8005994:	f000 f826 	bl	80059e4 <siprintf>
 8005998:	e7d0      	b.n	800593c <_scanf_float+0x37c>
 800599a:	f012 0f04 	tst.w	r2, #4
 800599e:	f103 0204 	add.w	r2, r3, #4
 80059a2:	d1d9      	bne.n	8005958 <_scanf_float+0x398>
 80059a4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80059a8:	f8cc 2000 	str.w	r2, [ip]
 80059ac:	f8d3 8000 	ldr.w	r8, [r3]
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	f7fb f842 	bl	8000a3c <__aeabi_dcmpun>
 80059b8:	b128      	cbz	r0, 80059c6 <_scanf_float+0x406>
 80059ba:	4807      	ldr	r0, [pc, #28]	; (80059d8 <_scanf_float+0x418>)
 80059bc:	f000 f80e 	bl	80059dc <nanf>
 80059c0:	f8c8 0000 	str.w	r0, [r8]
 80059c4:	e7cd      	b.n	8005962 <_scanf_float+0x3a2>
 80059c6:	4630      	mov	r0, r6
 80059c8:	4639      	mov	r1, r7
 80059ca:	f7fb f895 	bl	8000af8 <__aeabi_d2f>
 80059ce:	e7f7      	b.n	80059c0 <_scanf_float+0x400>
 80059d0:	2500      	movs	r5, #0
 80059d2:	e638      	b.n	8005646 <_scanf_float+0x86>
 80059d4:	08009620 	.word	0x08009620
 80059d8:	08009a28 	.word	0x08009a28

080059dc <nanf>:
 80059dc:	4800      	ldr	r0, [pc, #0]	; (80059e0 <nanf+0x4>)
 80059de:	4770      	bx	lr
 80059e0:	7fc00000 	.word	0x7fc00000

080059e4 <siprintf>:
 80059e4:	b40e      	push	{r1, r2, r3}
 80059e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059ea:	b500      	push	{lr}
 80059ec:	b09c      	sub	sp, #112	; 0x70
 80059ee:	ab1d      	add	r3, sp, #116	; 0x74
 80059f0:	9002      	str	r0, [sp, #8]
 80059f2:	9006      	str	r0, [sp, #24]
 80059f4:	9107      	str	r1, [sp, #28]
 80059f6:	9104      	str	r1, [sp, #16]
 80059f8:	4808      	ldr	r0, [pc, #32]	; (8005a1c <siprintf+0x38>)
 80059fa:	4909      	ldr	r1, [pc, #36]	; (8005a20 <siprintf+0x3c>)
 80059fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a00:	9105      	str	r1, [sp, #20]
 8005a02:	6800      	ldr	r0, [r0, #0]
 8005a04:	a902      	add	r1, sp, #8
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	f002 feb8 	bl	800877c <_svfiprintf_r>
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	9b02      	ldr	r3, [sp, #8]
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	b01c      	add	sp, #112	; 0x70
 8005a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a18:	b003      	add	sp, #12
 8005a1a:	4770      	bx	lr
 8005a1c:	2000000c 	.word	0x2000000c
 8005a20:	ffff0208 	.word	0xffff0208

08005a24 <sulp>:
 8005a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a28:	460f      	mov	r7, r1
 8005a2a:	4690      	mov	r8, r2
 8005a2c:	f002 fc12 	bl	8008254 <__ulp>
 8005a30:	4604      	mov	r4, r0
 8005a32:	460d      	mov	r5, r1
 8005a34:	f1b8 0f00 	cmp.w	r8, #0
 8005a38:	d011      	beq.n	8005a5e <sulp+0x3a>
 8005a3a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005a3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dd0b      	ble.n	8005a5e <sulp+0x3a>
 8005a46:	2400      	movs	r4, #0
 8005a48:	051b      	lsls	r3, r3, #20
 8005a4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005a4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	f7fa fd57 	bl	8000508 <__aeabi_dmul>
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	460d      	mov	r5, r1
 8005a5e:	4620      	mov	r0, r4
 8005a60:	4629      	mov	r1, r5
 8005a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005a68 <_strtod_l>:
 8005a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6c:	469b      	mov	fp, r3
 8005a6e:	2300      	movs	r3, #0
 8005a70:	b09f      	sub	sp, #124	; 0x7c
 8005a72:	931a      	str	r3, [sp, #104]	; 0x68
 8005a74:	4b9e      	ldr	r3, [pc, #632]	; (8005cf0 <_strtod_l+0x288>)
 8005a76:	4682      	mov	sl, r0
 8005a78:	681f      	ldr	r7, [r3, #0]
 8005a7a:	460e      	mov	r6, r1
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	9215      	str	r2, [sp, #84]	; 0x54
 8005a80:	f7fa fb7e 	bl	8000180 <strlen>
 8005a84:	f04f 0800 	mov.w	r8, #0
 8005a88:	4604      	mov	r4, r0
 8005a8a:	f04f 0900 	mov.w	r9, #0
 8005a8e:	9619      	str	r6, [sp, #100]	; 0x64
 8005a90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a92:	781a      	ldrb	r2, [r3, #0]
 8005a94:	2a2b      	cmp	r2, #43	; 0x2b
 8005a96:	d04c      	beq.n	8005b32 <_strtod_l+0xca>
 8005a98:	d83a      	bhi.n	8005b10 <_strtod_l+0xa8>
 8005a9a:	2a0d      	cmp	r2, #13
 8005a9c:	d833      	bhi.n	8005b06 <_strtod_l+0x9e>
 8005a9e:	2a08      	cmp	r2, #8
 8005aa0:	d833      	bhi.n	8005b0a <_strtod_l+0xa2>
 8005aa2:	2a00      	cmp	r2, #0
 8005aa4:	d03d      	beq.n	8005b22 <_strtod_l+0xba>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8005aaa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005aac:	782b      	ldrb	r3, [r5, #0]
 8005aae:	2b30      	cmp	r3, #48	; 0x30
 8005ab0:	f040 80aa 	bne.w	8005c08 <_strtod_l+0x1a0>
 8005ab4:	786b      	ldrb	r3, [r5, #1]
 8005ab6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005aba:	2b58      	cmp	r3, #88	; 0x58
 8005abc:	d166      	bne.n	8005b8c <_strtod_l+0x124>
 8005abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac0:	4650      	mov	r0, sl
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	ab1a      	add	r3, sp, #104	; 0x68
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	4a8a      	ldr	r2, [pc, #552]	; (8005cf4 <_strtod_l+0x28c>)
 8005aca:	f8cd b008 	str.w	fp, [sp, #8]
 8005ace:	ab1b      	add	r3, sp, #108	; 0x6c
 8005ad0:	a919      	add	r1, sp, #100	; 0x64
 8005ad2:	f001 fd17 	bl	8007504 <__gethex>
 8005ad6:	f010 0607 	ands.w	r6, r0, #7
 8005ada:	4604      	mov	r4, r0
 8005adc:	d005      	beq.n	8005aea <_strtod_l+0x82>
 8005ade:	2e06      	cmp	r6, #6
 8005ae0:	d129      	bne.n	8005b36 <_strtod_l+0xce>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	9519      	str	r5, [sp, #100]	; 0x64
 8005ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8005aea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f040 858a 	bne.w	8006606 <_strtod_l+0xb9e>
 8005af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af4:	b1d3      	cbz	r3, 8005b2c <_strtod_l+0xc4>
 8005af6:	4642      	mov	r2, r8
 8005af8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005afc:	4610      	mov	r0, r2
 8005afe:	4619      	mov	r1, r3
 8005b00:	b01f      	add	sp, #124	; 0x7c
 8005b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b06:	2a20      	cmp	r2, #32
 8005b08:	d1cd      	bne.n	8005aa6 <_strtod_l+0x3e>
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	9319      	str	r3, [sp, #100]	; 0x64
 8005b0e:	e7bf      	b.n	8005a90 <_strtod_l+0x28>
 8005b10:	2a2d      	cmp	r2, #45	; 0x2d
 8005b12:	d1c8      	bne.n	8005aa6 <_strtod_l+0x3e>
 8005b14:	2201      	movs	r2, #1
 8005b16:	920a      	str	r2, [sp, #40]	; 0x28
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	9219      	str	r2, [sp, #100]	; 0x64
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1c3      	bne.n	8005aaa <_strtod_l+0x42>
 8005b22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b24:	9619      	str	r6, [sp, #100]	; 0x64
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f040 856b 	bne.w	8006602 <_strtod_l+0xb9a>
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	464b      	mov	r3, r9
 8005b30:	e7e4      	b.n	8005afc <_strtod_l+0x94>
 8005b32:	2200      	movs	r2, #0
 8005b34:	e7ef      	b.n	8005b16 <_strtod_l+0xae>
 8005b36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005b38:	b13a      	cbz	r2, 8005b4a <_strtod_l+0xe2>
 8005b3a:	2135      	movs	r1, #53	; 0x35
 8005b3c:	a81c      	add	r0, sp, #112	; 0x70
 8005b3e:	f002 fc8d 	bl	800845c <__copybits>
 8005b42:	4650      	mov	r0, sl
 8005b44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b46:	f002 f855 	bl	8007bf4 <_Bfree>
 8005b4a:	3e01      	subs	r6, #1
 8005b4c:	2e04      	cmp	r6, #4
 8005b4e:	d806      	bhi.n	8005b5e <_strtod_l+0xf6>
 8005b50:	e8df f006 	tbb	[pc, r6]
 8005b54:	1714030a 	.word	0x1714030a
 8005b58:	0a          	.byte	0x0a
 8005b59:	00          	.byte	0x00
 8005b5a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005b5e:	0721      	lsls	r1, r4, #28
 8005b60:	d5c3      	bpl.n	8005aea <_strtod_l+0x82>
 8005b62:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005b66:	e7c0      	b.n	8005aea <_strtod_l+0x82>
 8005b68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005b6a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005b6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005b72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b76:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005b7a:	e7f0      	b.n	8005b5e <_strtod_l+0xf6>
 8005b7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005cf8 <_strtod_l+0x290>
 8005b80:	e7ed      	b.n	8005b5e <_strtod_l+0xf6>
 8005b82:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005b86:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005b8a:	e7e8      	b.n	8005b5e <_strtod_l+0xf6>
 8005b8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	9219      	str	r2, [sp, #100]	; 0x64
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	2b30      	cmp	r3, #48	; 0x30
 8005b96:	d0f9      	beq.n	8005b8c <_strtod_l+0x124>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0a6      	beq.n	8005aea <_strtod_l+0x82>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	9307      	str	r3, [sp, #28]
 8005ba0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ba2:	220a      	movs	r2, #10
 8005ba4:	9308      	str	r3, [sp, #32]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	469b      	mov	fp, r3
 8005baa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005bae:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005bb0:	7805      	ldrb	r5, [r0, #0]
 8005bb2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005bb6:	b2d9      	uxtb	r1, r3
 8005bb8:	2909      	cmp	r1, #9
 8005bba:	d927      	bls.n	8005c0c <_strtod_l+0x1a4>
 8005bbc:	4622      	mov	r2, r4
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	f002 fef2 	bl	80089a8 <strncmp>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d033      	beq.n	8005c30 <_strtod_l+0x1c8>
 8005bc8:	2000      	movs	r0, #0
 8005bca:	462a      	mov	r2, r5
 8005bcc:	465c      	mov	r4, fp
 8005bce:	4603      	mov	r3, r0
 8005bd0:	9004      	str	r0, [sp, #16]
 8005bd2:	2a65      	cmp	r2, #101	; 0x65
 8005bd4:	d001      	beq.n	8005bda <_strtod_l+0x172>
 8005bd6:	2a45      	cmp	r2, #69	; 0x45
 8005bd8:	d114      	bne.n	8005c04 <_strtod_l+0x19c>
 8005bda:	b91c      	cbnz	r4, 8005be4 <_strtod_l+0x17c>
 8005bdc:	9a07      	ldr	r2, [sp, #28]
 8005bde:	4302      	orrs	r2, r0
 8005be0:	d09f      	beq.n	8005b22 <_strtod_l+0xba>
 8005be2:	2400      	movs	r4, #0
 8005be4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005be6:	1c72      	adds	r2, r6, #1
 8005be8:	9219      	str	r2, [sp, #100]	; 0x64
 8005bea:	7872      	ldrb	r2, [r6, #1]
 8005bec:	2a2b      	cmp	r2, #43	; 0x2b
 8005bee:	d079      	beq.n	8005ce4 <_strtod_l+0x27c>
 8005bf0:	2a2d      	cmp	r2, #45	; 0x2d
 8005bf2:	f000 8083 	beq.w	8005cfc <_strtod_l+0x294>
 8005bf6:	2700      	movs	r7, #0
 8005bf8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005bfc:	2909      	cmp	r1, #9
 8005bfe:	f240 8083 	bls.w	8005d08 <_strtod_l+0x2a0>
 8005c02:	9619      	str	r6, [sp, #100]	; 0x64
 8005c04:	2500      	movs	r5, #0
 8005c06:	e09f      	b.n	8005d48 <_strtod_l+0x2e0>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e7c8      	b.n	8005b9e <_strtod_l+0x136>
 8005c0c:	f1bb 0f08 	cmp.w	fp, #8
 8005c10:	bfd5      	itete	le
 8005c12:	9906      	ldrle	r1, [sp, #24]
 8005c14:	9905      	ldrgt	r1, [sp, #20]
 8005c16:	fb02 3301 	mlale	r3, r2, r1, r3
 8005c1a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005c1e:	f100 0001 	add.w	r0, r0, #1
 8005c22:	bfd4      	ite	le
 8005c24:	9306      	strle	r3, [sp, #24]
 8005c26:	9305      	strgt	r3, [sp, #20]
 8005c28:	f10b 0b01 	add.w	fp, fp, #1
 8005c2c:	9019      	str	r0, [sp, #100]	; 0x64
 8005c2e:	e7be      	b.n	8005bae <_strtod_l+0x146>
 8005c30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c32:	191a      	adds	r2, r3, r4
 8005c34:	9219      	str	r2, [sp, #100]	; 0x64
 8005c36:	5d1a      	ldrb	r2, [r3, r4]
 8005c38:	f1bb 0f00 	cmp.w	fp, #0
 8005c3c:	d036      	beq.n	8005cac <_strtod_l+0x244>
 8005c3e:	465c      	mov	r4, fp
 8005c40:	9004      	str	r0, [sp, #16]
 8005c42:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005c46:	2b09      	cmp	r3, #9
 8005c48:	d912      	bls.n	8005c70 <_strtod_l+0x208>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e7c1      	b.n	8005bd2 <_strtod_l+0x16a>
 8005c4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c50:	3001      	adds	r0, #1
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	9219      	str	r2, [sp, #100]	; 0x64
 8005c56:	785a      	ldrb	r2, [r3, #1]
 8005c58:	2a30      	cmp	r2, #48	; 0x30
 8005c5a:	d0f8      	beq.n	8005c4e <_strtod_l+0x1e6>
 8005c5c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	f200 84d5 	bhi.w	8006610 <_strtod_l+0xba8>
 8005c66:	9004      	str	r0, [sp, #16]
 8005c68:	2000      	movs	r0, #0
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c6e:	9308      	str	r3, [sp, #32]
 8005c70:	3a30      	subs	r2, #48	; 0x30
 8005c72:	f100 0301 	add.w	r3, r0, #1
 8005c76:	d013      	beq.n	8005ca0 <_strtod_l+0x238>
 8005c78:	9904      	ldr	r1, [sp, #16]
 8005c7a:	1905      	adds	r5, r0, r4
 8005c7c:	4419      	add	r1, r3
 8005c7e:	9104      	str	r1, [sp, #16]
 8005c80:	4623      	mov	r3, r4
 8005c82:	210a      	movs	r1, #10
 8005c84:	42ab      	cmp	r3, r5
 8005c86:	d113      	bne.n	8005cb0 <_strtod_l+0x248>
 8005c88:	1823      	adds	r3, r4, r0
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	f104 0401 	add.w	r4, r4, #1
 8005c90:	4404      	add	r4, r0
 8005c92:	dc1b      	bgt.n	8005ccc <_strtod_l+0x264>
 8005c94:	230a      	movs	r3, #10
 8005c96:	9906      	ldr	r1, [sp, #24]
 8005c98:	fb03 2301 	mla	r3, r3, r1, r2
 8005c9c:	9306      	str	r3, [sp, #24]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	1c51      	adds	r1, r2, #1
 8005ca6:	9119      	str	r1, [sp, #100]	; 0x64
 8005ca8:	7852      	ldrb	r2, [r2, #1]
 8005caa:	e7ca      	b.n	8005c42 <_strtod_l+0x1da>
 8005cac:	4658      	mov	r0, fp
 8005cae:	e7d3      	b.n	8005c58 <_strtod_l+0x1f0>
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	dc04      	bgt.n	8005cbe <_strtod_l+0x256>
 8005cb4:	9f06      	ldr	r7, [sp, #24]
 8005cb6:	434f      	muls	r7, r1
 8005cb8:	9706      	str	r7, [sp, #24]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	e7e2      	b.n	8005c84 <_strtod_l+0x21c>
 8005cbe:	1c5f      	adds	r7, r3, #1
 8005cc0:	2f10      	cmp	r7, #16
 8005cc2:	bfde      	ittt	le
 8005cc4:	9f05      	ldrle	r7, [sp, #20]
 8005cc6:	434f      	mulle	r7, r1
 8005cc8:	9705      	strle	r7, [sp, #20]
 8005cca:	e7f6      	b.n	8005cba <_strtod_l+0x252>
 8005ccc:	2c10      	cmp	r4, #16
 8005cce:	bfdf      	itttt	le
 8005cd0:	230a      	movle	r3, #10
 8005cd2:	9905      	ldrle	r1, [sp, #20]
 8005cd4:	fb03 2301 	mlale	r3, r3, r1, r2
 8005cd8:	9305      	strle	r3, [sp, #20]
 8005cda:	e7e0      	b.n	8005c9e <_strtod_l+0x236>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	9304      	str	r3, [sp, #16]
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e77b      	b.n	8005bdc <_strtod_l+0x174>
 8005ce4:	2700      	movs	r7, #0
 8005ce6:	1cb2      	adds	r2, r6, #2
 8005ce8:	9219      	str	r2, [sp, #100]	; 0x64
 8005cea:	78b2      	ldrb	r2, [r6, #2]
 8005cec:	e784      	b.n	8005bf8 <_strtod_l+0x190>
 8005cee:	bf00      	nop
 8005cf0:	08009870 	.word	0x08009870
 8005cf4:	08009628 	.word	0x08009628
 8005cf8:	7ff00000 	.word	0x7ff00000
 8005cfc:	2701      	movs	r7, #1
 8005cfe:	e7f2      	b.n	8005ce6 <_strtod_l+0x27e>
 8005d00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d02:	1c51      	adds	r1, r2, #1
 8005d04:	9119      	str	r1, [sp, #100]	; 0x64
 8005d06:	7852      	ldrb	r2, [r2, #1]
 8005d08:	2a30      	cmp	r2, #48	; 0x30
 8005d0a:	d0f9      	beq.n	8005d00 <_strtod_l+0x298>
 8005d0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005d10:	2908      	cmp	r1, #8
 8005d12:	f63f af77 	bhi.w	8005c04 <_strtod_l+0x19c>
 8005d16:	f04f 0e0a 	mov.w	lr, #10
 8005d1a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005d1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d20:	9209      	str	r2, [sp, #36]	; 0x24
 8005d22:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d24:	1c51      	adds	r1, r2, #1
 8005d26:	9119      	str	r1, [sp, #100]	; 0x64
 8005d28:	7852      	ldrb	r2, [r2, #1]
 8005d2a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005d2e:	2d09      	cmp	r5, #9
 8005d30:	d935      	bls.n	8005d9e <_strtod_l+0x336>
 8005d32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d34:	1b49      	subs	r1, r1, r5
 8005d36:	2908      	cmp	r1, #8
 8005d38:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005d3c:	dc02      	bgt.n	8005d44 <_strtod_l+0x2dc>
 8005d3e:	4565      	cmp	r5, ip
 8005d40:	bfa8      	it	ge
 8005d42:	4665      	movge	r5, ip
 8005d44:	b107      	cbz	r7, 8005d48 <_strtod_l+0x2e0>
 8005d46:	426d      	negs	r5, r5
 8005d48:	2c00      	cmp	r4, #0
 8005d4a:	d14c      	bne.n	8005de6 <_strtod_l+0x37e>
 8005d4c:	9907      	ldr	r1, [sp, #28]
 8005d4e:	4301      	orrs	r1, r0
 8005d50:	f47f aecb 	bne.w	8005aea <_strtod_l+0x82>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f47f aee4 	bne.w	8005b22 <_strtod_l+0xba>
 8005d5a:	2a69      	cmp	r2, #105	; 0x69
 8005d5c:	d026      	beq.n	8005dac <_strtod_l+0x344>
 8005d5e:	dc23      	bgt.n	8005da8 <_strtod_l+0x340>
 8005d60:	2a49      	cmp	r2, #73	; 0x49
 8005d62:	d023      	beq.n	8005dac <_strtod_l+0x344>
 8005d64:	2a4e      	cmp	r2, #78	; 0x4e
 8005d66:	f47f aedc 	bne.w	8005b22 <_strtod_l+0xba>
 8005d6a:	499d      	ldr	r1, [pc, #628]	; (8005fe0 <_strtod_l+0x578>)
 8005d6c:	a819      	add	r0, sp, #100	; 0x64
 8005d6e:	f001 fe17 	bl	80079a0 <__match>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	f43f aed5 	beq.w	8005b22 <_strtod_l+0xba>
 8005d78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b28      	cmp	r3, #40	; 0x28
 8005d7e:	d12c      	bne.n	8005dda <_strtod_l+0x372>
 8005d80:	4998      	ldr	r1, [pc, #608]	; (8005fe4 <_strtod_l+0x57c>)
 8005d82:	aa1c      	add	r2, sp, #112	; 0x70
 8005d84:	a819      	add	r0, sp, #100	; 0x64
 8005d86:	f001 fe1f 	bl	80079c8 <__hexnan>
 8005d8a:	2805      	cmp	r0, #5
 8005d8c:	d125      	bne.n	8005dda <_strtod_l+0x372>
 8005d8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d90:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005d94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005d98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005d9c:	e6a5      	b.n	8005aea <_strtod_l+0x82>
 8005d9e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005da2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005da6:	e7bc      	b.n	8005d22 <_strtod_l+0x2ba>
 8005da8:	2a6e      	cmp	r2, #110	; 0x6e
 8005daa:	e7dc      	b.n	8005d66 <_strtod_l+0x2fe>
 8005dac:	498e      	ldr	r1, [pc, #568]	; (8005fe8 <_strtod_l+0x580>)
 8005dae:	a819      	add	r0, sp, #100	; 0x64
 8005db0:	f001 fdf6 	bl	80079a0 <__match>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	f43f aeb4 	beq.w	8005b22 <_strtod_l+0xba>
 8005dba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dbc:	498b      	ldr	r1, [pc, #556]	; (8005fec <_strtod_l+0x584>)
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	a819      	add	r0, sp, #100	; 0x64
 8005dc2:	9319      	str	r3, [sp, #100]	; 0x64
 8005dc4:	f001 fdec 	bl	80079a0 <__match>
 8005dc8:	b910      	cbnz	r0, 8005dd0 <_strtod_l+0x368>
 8005dca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dcc:	3301      	adds	r3, #1
 8005dce:	9319      	str	r3, [sp, #100]	; 0x64
 8005dd0:	f04f 0800 	mov.w	r8, #0
 8005dd4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005ff0 <_strtod_l+0x588>
 8005dd8:	e687      	b.n	8005aea <_strtod_l+0x82>
 8005dda:	4886      	ldr	r0, [pc, #536]	; (8005ff4 <_strtod_l+0x58c>)
 8005ddc:	f002 fdce 	bl	800897c <nan>
 8005de0:	4680      	mov	r8, r0
 8005de2:	4689      	mov	r9, r1
 8005de4:	e681      	b.n	8005aea <_strtod_l+0x82>
 8005de6:	9b04      	ldr	r3, [sp, #16]
 8005de8:	f1bb 0f00 	cmp.w	fp, #0
 8005dec:	bf08      	it	eq
 8005dee:	46a3      	moveq	fp, r4
 8005df0:	1aeb      	subs	r3, r5, r3
 8005df2:	2c10      	cmp	r4, #16
 8005df4:	9806      	ldr	r0, [sp, #24]
 8005df6:	4626      	mov	r6, r4
 8005df8:	9307      	str	r3, [sp, #28]
 8005dfa:	bfa8      	it	ge
 8005dfc:	2610      	movge	r6, #16
 8005dfe:	f7fa fb09 	bl	8000414 <__aeabi_ui2d>
 8005e02:	2c09      	cmp	r4, #9
 8005e04:	4680      	mov	r8, r0
 8005e06:	4689      	mov	r9, r1
 8005e08:	dd13      	ble.n	8005e32 <_strtod_l+0x3ca>
 8005e0a:	4b7b      	ldr	r3, [pc, #492]	; (8005ff8 <_strtod_l+0x590>)
 8005e0c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e10:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005e14:	f7fa fb78 	bl	8000508 <__aeabi_dmul>
 8005e18:	4680      	mov	r8, r0
 8005e1a:	9805      	ldr	r0, [sp, #20]
 8005e1c:	4689      	mov	r9, r1
 8005e1e:	f7fa faf9 	bl	8000414 <__aeabi_ui2d>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4640      	mov	r0, r8
 8005e28:	4649      	mov	r1, r9
 8005e2a:	f7fa f9b7 	bl	800019c <__adddf3>
 8005e2e:	4680      	mov	r8, r0
 8005e30:	4689      	mov	r9, r1
 8005e32:	2c0f      	cmp	r4, #15
 8005e34:	dc36      	bgt.n	8005ea4 <_strtod_l+0x43c>
 8005e36:	9b07      	ldr	r3, [sp, #28]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f43f ae56 	beq.w	8005aea <_strtod_l+0x82>
 8005e3e:	dd22      	ble.n	8005e86 <_strtod_l+0x41e>
 8005e40:	2b16      	cmp	r3, #22
 8005e42:	dc09      	bgt.n	8005e58 <_strtod_l+0x3f0>
 8005e44:	496c      	ldr	r1, [pc, #432]	; (8005ff8 <_strtod_l+0x590>)
 8005e46:	4642      	mov	r2, r8
 8005e48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e4c:	464b      	mov	r3, r9
 8005e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e52:	f7fa fb59 	bl	8000508 <__aeabi_dmul>
 8005e56:	e7c3      	b.n	8005de0 <_strtod_l+0x378>
 8005e58:	9a07      	ldr	r2, [sp, #28]
 8005e5a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	db20      	blt.n	8005ea4 <_strtod_l+0x43c>
 8005e62:	4d65      	ldr	r5, [pc, #404]	; (8005ff8 <_strtod_l+0x590>)
 8005e64:	f1c4 040f 	rsb	r4, r4, #15
 8005e68:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e72:	464b      	mov	r3, r9
 8005e74:	f7fa fb48 	bl	8000508 <__aeabi_dmul>
 8005e78:	9b07      	ldr	r3, [sp, #28]
 8005e7a:	1b1c      	subs	r4, r3, r4
 8005e7c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005e80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e84:	e7e5      	b.n	8005e52 <_strtod_l+0x3ea>
 8005e86:	9b07      	ldr	r3, [sp, #28]
 8005e88:	3316      	adds	r3, #22
 8005e8a:	db0b      	blt.n	8005ea4 <_strtod_l+0x43c>
 8005e8c:	9b04      	ldr	r3, [sp, #16]
 8005e8e:	4640      	mov	r0, r8
 8005e90:	1b5d      	subs	r5, r3, r5
 8005e92:	4b59      	ldr	r3, [pc, #356]	; (8005ff8 <_strtod_l+0x590>)
 8005e94:	4649      	mov	r1, r9
 8005e96:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005e9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e9e:	f7fa fc5d 	bl	800075c <__aeabi_ddiv>
 8005ea2:	e79d      	b.n	8005de0 <_strtod_l+0x378>
 8005ea4:	9b07      	ldr	r3, [sp, #28]
 8005ea6:	1ba6      	subs	r6, r4, r6
 8005ea8:	441e      	add	r6, r3
 8005eaa:	2e00      	cmp	r6, #0
 8005eac:	dd74      	ble.n	8005f98 <_strtod_l+0x530>
 8005eae:	f016 030f 	ands.w	r3, r6, #15
 8005eb2:	d00a      	beq.n	8005eca <_strtod_l+0x462>
 8005eb4:	4950      	ldr	r1, [pc, #320]	; (8005ff8 <_strtod_l+0x590>)
 8005eb6:	4642      	mov	r2, r8
 8005eb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	f7fa fb21 	bl	8000508 <__aeabi_dmul>
 8005ec6:	4680      	mov	r8, r0
 8005ec8:	4689      	mov	r9, r1
 8005eca:	f036 060f 	bics.w	r6, r6, #15
 8005ece:	d052      	beq.n	8005f76 <_strtod_l+0x50e>
 8005ed0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005ed4:	dd27      	ble.n	8005f26 <_strtod_l+0x4be>
 8005ed6:	f04f 0b00 	mov.w	fp, #0
 8005eda:	f8cd b010 	str.w	fp, [sp, #16]
 8005ede:	f8cd b020 	str.w	fp, [sp, #32]
 8005ee2:	f8cd b018 	str.w	fp, [sp, #24]
 8005ee6:	2322      	movs	r3, #34	; 0x22
 8005ee8:	f04f 0800 	mov.w	r8, #0
 8005eec:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005ff0 <_strtod_l+0x588>
 8005ef0:	f8ca 3000 	str.w	r3, [sl]
 8005ef4:	9b08      	ldr	r3, [sp, #32]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f43f adf7 	beq.w	8005aea <_strtod_l+0x82>
 8005efc:	4650      	mov	r0, sl
 8005efe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005f00:	f001 fe78 	bl	8007bf4 <_Bfree>
 8005f04:	4650      	mov	r0, sl
 8005f06:	9906      	ldr	r1, [sp, #24]
 8005f08:	f001 fe74 	bl	8007bf4 <_Bfree>
 8005f0c:	4650      	mov	r0, sl
 8005f0e:	9904      	ldr	r1, [sp, #16]
 8005f10:	f001 fe70 	bl	8007bf4 <_Bfree>
 8005f14:	4650      	mov	r0, sl
 8005f16:	9908      	ldr	r1, [sp, #32]
 8005f18:	f001 fe6c 	bl	8007bf4 <_Bfree>
 8005f1c:	4659      	mov	r1, fp
 8005f1e:	4650      	mov	r0, sl
 8005f20:	f001 fe68 	bl	8007bf4 <_Bfree>
 8005f24:	e5e1      	b.n	8005aea <_strtod_l+0x82>
 8005f26:	4b35      	ldr	r3, [pc, #212]	; (8005ffc <_strtod_l+0x594>)
 8005f28:	4640      	mov	r0, r8
 8005f2a:	9305      	str	r3, [sp, #20]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	4649      	mov	r1, r9
 8005f30:	461f      	mov	r7, r3
 8005f32:	1136      	asrs	r6, r6, #4
 8005f34:	2e01      	cmp	r6, #1
 8005f36:	dc21      	bgt.n	8005f7c <_strtod_l+0x514>
 8005f38:	b10b      	cbz	r3, 8005f3e <_strtod_l+0x4d6>
 8005f3a:	4680      	mov	r8, r0
 8005f3c:	4689      	mov	r9, r1
 8005f3e:	4b2f      	ldr	r3, [pc, #188]	; (8005ffc <_strtod_l+0x594>)
 8005f40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005f44:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005f48:	4642      	mov	r2, r8
 8005f4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f4e:	464b      	mov	r3, r9
 8005f50:	f7fa fada 	bl	8000508 <__aeabi_dmul>
 8005f54:	4b26      	ldr	r3, [pc, #152]	; (8005ff0 <_strtod_l+0x588>)
 8005f56:	460a      	mov	r2, r1
 8005f58:	400b      	ands	r3, r1
 8005f5a:	4929      	ldr	r1, [pc, #164]	; (8006000 <_strtod_l+0x598>)
 8005f5c:	4680      	mov	r8, r0
 8005f5e:	428b      	cmp	r3, r1
 8005f60:	d8b9      	bhi.n	8005ed6 <_strtod_l+0x46e>
 8005f62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005f66:	428b      	cmp	r3, r1
 8005f68:	bf86      	itte	hi
 8005f6a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8005f6e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006004 <_strtod_l+0x59c>
 8005f72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005f76:	2300      	movs	r3, #0
 8005f78:	9305      	str	r3, [sp, #20]
 8005f7a:	e07f      	b.n	800607c <_strtod_l+0x614>
 8005f7c:	07f2      	lsls	r2, r6, #31
 8005f7e:	d505      	bpl.n	8005f8c <_strtod_l+0x524>
 8005f80:	9b05      	ldr	r3, [sp, #20]
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	f7fa fabf 	bl	8000508 <__aeabi_dmul>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	9a05      	ldr	r2, [sp, #20]
 8005f8e:	3701      	adds	r7, #1
 8005f90:	3208      	adds	r2, #8
 8005f92:	1076      	asrs	r6, r6, #1
 8005f94:	9205      	str	r2, [sp, #20]
 8005f96:	e7cd      	b.n	8005f34 <_strtod_l+0x4cc>
 8005f98:	d0ed      	beq.n	8005f76 <_strtod_l+0x50e>
 8005f9a:	4276      	negs	r6, r6
 8005f9c:	f016 020f 	ands.w	r2, r6, #15
 8005fa0:	d00a      	beq.n	8005fb8 <_strtod_l+0x550>
 8005fa2:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <_strtod_l+0x590>)
 8005fa4:	4640      	mov	r0, r8
 8005fa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005faa:	4649      	mov	r1, r9
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f7fa fbd4 	bl	800075c <__aeabi_ddiv>
 8005fb4:	4680      	mov	r8, r0
 8005fb6:	4689      	mov	r9, r1
 8005fb8:	1136      	asrs	r6, r6, #4
 8005fba:	d0dc      	beq.n	8005f76 <_strtod_l+0x50e>
 8005fbc:	2e1f      	cmp	r6, #31
 8005fbe:	dd23      	ble.n	8006008 <_strtod_l+0x5a0>
 8005fc0:	f04f 0b00 	mov.w	fp, #0
 8005fc4:	f8cd b010 	str.w	fp, [sp, #16]
 8005fc8:	f8cd b020 	str.w	fp, [sp, #32]
 8005fcc:	f8cd b018 	str.w	fp, [sp, #24]
 8005fd0:	2322      	movs	r3, #34	; 0x22
 8005fd2:	f04f 0800 	mov.w	r8, #0
 8005fd6:	f04f 0900 	mov.w	r9, #0
 8005fda:	f8ca 3000 	str.w	r3, [sl]
 8005fde:	e789      	b.n	8005ef4 <_strtod_l+0x48c>
 8005fe0:	080095f9 	.word	0x080095f9
 8005fe4:	0800963c 	.word	0x0800963c
 8005fe8:	080095f1 	.word	0x080095f1
 8005fec:	0800977c 	.word	0x0800977c
 8005ff0:	7ff00000 	.word	0x7ff00000
 8005ff4:	08009a28 	.word	0x08009a28
 8005ff8:	08009908 	.word	0x08009908
 8005ffc:	080098e0 	.word	0x080098e0
 8006000:	7ca00000 	.word	0x7ca00000
 8006004:	7fefffff 	.word	0x7fefffff
 8006008:	f016 0310 	ands.w	r3, r6, #16
 800600c:	bf18      	it	ne
 800600e:	236a      	movne	r3, #106	; 0x6a
 8006010:	4640      	mov	r0, r8
 8006012:	9305      	str	r3, [sp, #20]
 8006014:	4649      	mov	r1, r9
 8006016:	2300      	movs	r3, #0
 8006018:	4fb0      	ldr	r7, [pc, #704]	; (80062dc <_strtod_l+0x874>)
 800601a:	07f2      	lsls	r2, r6, #31
 800601c:	d504      	bpl.n	8006028 <_strtod_l+0x5c0>
 800601e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006022:	f7fa fa71 	bl	8000508 <__aeabi_dmul>
 8006026:	2301      	movs	r3, #1
 8006028:	1076      	asrs	r6, r6, #1
 800602a:	f107 0708 	add.w	r7, r7, #8
 800602e:	d1f4      	bne.n	800601a <_strtod_l+0x5b2>
 8006030:	b10b      	cbz	r3, 8006036 <_strtod_l+0x5ce>
 8006032:	4680      	mov	r8, r0
 8006034:	4689      	mov	r9, r1
 8006036:	9b05      	ldr	r3, [sp, #20]
 8006038:	b1c3      	cbz	r3, 800606c <_strtod_l+0x604>
 800603a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800603e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006042:	2b00      	cmp	r3, #0
 8006044:	4649      	mov	r1, r9
 8006046:	dd11      	ble.n	800606c <_strtod_l+0x604>
 8006048:	2b1f      	cmp	r3, #31
 800604a:	f340 8127 	ble.w	800629c <_strtod_l+0x834>
 800604e:	2b34      	cmp	r3, #52	; 0x34
 8006050:	bfd8      	it	le
 8006052:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8006056:	f04f 0800 	mov.w	r8, #0
 800605a:	bfcf      	iteee	gt
 800605c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006060:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006064:	fa03 f202 	lslle.w	r2, r3, r2
 8006068:	ea02 0901 	andle.w	r9, r2, r1
 800606c:	2200      	movs	r2, #0
 800606e:	2300      	movs	r3, #0
 8006070:	4640      	mov	r0, r8
 8006072:	4649      	mov	r1, r9
 8006074:	f7fa fcb0 	bl	80009d8 <__aeabi_dcmpeq>
 8006078:	2800      	cmp	r0, #0
 800607a:	d1a1      	bne.n	8005fc0 <_strtod_l+0x558>
 800607c:	9b06      	ldr	r3, [sp, #24]
 800607e:	465a      	mov	r2, fp
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	4650      	mov	r0, sl
 8006084:	4623      	mov	r3, r4
 8006086:	9908      	ldr	r1, [sp, #32]
 8006088:	f001 fe1c 	bl	8007cc4 <__s2b>
 800608c:	9008      	str	r0, [sp, #32]
 800608e:	2800      	cmp	r0, #0
 8006090:	f43f af21 	beq.w	8005ed6 <_strtod_l+0x46e>
 8006094:	9b04      	ldr	r3, [sp, #16]
 8006096:	f04f 0b00 	mov.w	fp, #0
 800609a:	1b5d      	subs	r5, r3, r5
 800609c:	9b07      	ldr	r3, [sp, #28]
 800609e:	f8cd b010 	str.w	fp, [sp, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	bfb4      	ite	lt
 80060a6:	462b      	movlt	r3, r5
 80060a8:	2300      	movge	r3, #0
 80060aa:	930e      	str	r3, [sp, #56]	; 0x38
 80060ac:	9b07      	ldr	r3, [sp, #28]
 80060ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80060b2:	9314      	str	r3, [sp, #80]	; 0x50
 80060b4:	9b08      	ldr	r3, [sp, #32]
 80060b6:	4650      	mov	r0, sl
 80060b8:	6859      	ldr	r1, [r3, #4]
 80060ba:	f001 fd5b 	bl	8007b74 <_Balloc>
 80060be:	9006      	str	r0, [sp, #24]
 80060c0:	2800      	cmp	r0, #0
 80060c2:	f43f af10 	beq.w	8005ee6 <_strtod_l+0x47e>
 80060c6:	9b08      	ldr	r3, [sp, #32]
 80060c8:	300c      	adds	r0, #12
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	f103 010c 	add.w	r1, r3, #12
 80060d0:	3202      	adds	r2, #2
 80060d2:	0092      	lsls	r2, r2, #2
 80060d4:	f001 fd40 	bl	8007b58 <memcpy>
 80060d8:	ab1c      	add	r3, sp, #112	; 0x70
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	ab1b      	add	r3, sp, #108	; 0x6c
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	4642      	mov	r2, r8
 80060e2:	464b      	mov	r3, r9
 80060e4:	4650      	mov	r0, sl
 80060e6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80060ea:	f002 f92d 	bl	8008348 <__d2b>
 80060ee:	901a      	str	r0, [sp, #104]	; 0x68
 80060f0:	2800      	cmp	r0, #0
 80060f2:	f43f aef8 	beq.w	8005ee6 <_strtod_l+0x47e>
 80060f6:	2101      	movs	r1, #1
 80060f8:	4650      	mov	r0, sl
 80060fa:	f001 fe7b 	bl	8007df4 <__i2b>
 80060fe:	4603      	mov	r3, r0
 8006100:	9004      	str	r0, [sp, #16]
 8006102:	2800      	cmp	r0, #0
 8006104:	f43f aeef 	beq.w	8005ee6 <_strtod_l+0x47e>
 8006108:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800610a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800610c:	2d00      	cmp	r5, #0
 800610e:	bfab      	itete	ge
 8006110:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006112:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006114:	18ee      	addge	r6, r5, r3
 8006116:	1b5c      	sublt	r4, r3, r5
 8006118:	9b05      	ldr	r3, [sp, #20]
 800611a:	bfa8      	it	ge
 800611c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800611e:	eba5 0503 	sub.w	r5, r5, r3
 8006122:	4415      	add	r5, r2
 8006124:	4b6e      	ldr	r3, [pc, #440]	; (80062e0 <_strtod_l+0x878>)
 8006126:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800612a:	bfb8      	it	lt
 800612c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800612e:	429d      	cmp	r5, r3
 8006130:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006134:	f280 80c4 	bge.w	80062c0 <_strtod_l+0x858>
 8006138:	1b5b      	subs	r3, r3, r5
 800613a:	2b1f      	cmp	r3, #31
 800613c:	f04f 0701 	mov.w	r7, #1
 8006140:	eba2 0203 	sub.w	r2, r2, r3
 8006144:	f300 80b1 	bgt.w	80062aa <_strtod_l+0x842>
 8006148:	2500      	movs	r5, #0
 800614a:	fa07 f303 	lsl.w	r3, r7, r3
 800614e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006150:	18b7      	adds	r7, r6, r2
 8006152:	9b05      	ldr	r3, [sp, #20]
 8006154:	42be      	cmp	r6, r7
 8006156:	4414      	add	r4, r2
 8006158:	441c      	add	r4, r3
 800615a:	4633      	mov	r3, r6
 800615c:	bfa8      	it	ge
 800615e:	463b      	movge	r3, r7
 8006160:	42a3      	cmp	r3, r4
 8006162:	bfa8      	it	ge
 8006164:	4623      	movge	r3, r4
 8006166:	2b00      	cmp	r3, #0
 8006168:	bfc2      	ittt	gt
 800616a:	1aff      	subgt	r7, r7, r3
 800616c:	1ae4      	subgt	r4, r4, r3
 800616e:	1af6      	subgt	r6, r6, r3
 8006170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006172:	2b00      	cmp	r3, #0
 8006174:	dd17      	ble.n	80061a6 <_strtod_l+0x73e>
 8006176:	461a      	mov	r2, r3
 8006178:	4650      	mov	r0, sl
 800617a:	9904      	ldr	r1, [sp, #16]
 800617c:	f001 fef8 	bl	8007f70 <__pow5mult>
 8006180:	9004      	str	r0, [sp, #16]
 8006182:	2800      	cmp	r0, #0
 8006184:	f43f aeaf 	beq.w	8005ee6 <_strtod_l+0x47e>
 8006188:	4601      	mov	r1, r0
 800618a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800618c:	4650      	mov	r0, sl
 800618e:	f001 fe47 	bl	8007e20 <__multiply>
 8006192:	9009      	str	r0, [sp, #36]	; 0x24
 8006194:	2800      	cmp	r0, #0
 8006196:	f43f aea6 	beq.w	8005ee6 <_strtod_l+0x47e>
 800619a:	4650      	mov	r0, sl
 800619c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800619e:	f001 fd29 	bl	8007bf4 <_Bfree>
 80061a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a4:	931a      	str	r3, [sp, #104]	; 0x68
 80061a6:	2f00      	cmp	r7, #0
 80061a8:	f300 808e 	bgt.w	80062c8 <_strtod_l+0x860>
 80061ac:	9b07      	ldr	r3, [sp, #28]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	dd08      	ble.n	80061c4 <_strtod_l+0x75c>
 80061b2:	4650      	mov	r0, sl
 80061b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80061b6:	9906      	ldr	r1, [sp, #24]
 80061b8:	f001 feda 	bl	8007f70 <__pow5mult>
 80061bc:	9006      	str	r0, [sp, #24]
 80061be:	2800      	cmp	r0, #0
 80061c0:	f43f ae91 	beq.w	8005ee6 <_strtod_l+0x47e>
 80061c4:	2c00      	cmp	r4, #0
 80061c6:	dd08      	ble.n	80061da <_strtod_l+0x772>
 80061c8:	4622      	mov	r2, r4
 80061ca:	4650      	mov	r0, sl
 80061cc:	9906      	ldr	r1, [sp, #24]
 80061ce:	f001 ff29 	bl	8008024 <__lshift>
 80061d2:	9006      	str	r0, [sp, #24]
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f43f ae86 	beq.w	8005ee6 <_strtod_l+0x47e>
 80061da:	2e00      	cmp	r6, #0
 80061dc:	dd08      	ble.n	80061f0 <_strtod_l+0x788>
 80061de:	4632      	mov	r2, r6
 80061e0:	4650      	mov	r0, sl
 80061e2:	9904      	ldr	r1, [sp, #16]
 80061e4:	f001 ff1e 	bl	8008024 <__lshift>
 80061e8:	9004      	str	r0, [sp, #16]
 80061ea:	2800      	cmp	r0, #0
 80061ec:	f43f ae7b 	beq.w	8005ee6 <_strtod_l+0x47e>
 80061f0:	4650      	mov	r0, sl
 80061f2:	9a06      	ldr	r2, [sp, #24]
 80061f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80061f6:	f001 ffa1 	bl	800813c <__mdiff>
 80061fa:	4683      	mov	fp, r0
 80061fc:	2800      	cmp	r0, #0
 80061fe:	f43f ae72 	beq.w	8005ee6 <_strtod_l+0x47e>
 8006202:	2400      	movs	r4, #0
 8006204:	68c3      	ldr	r3, [r0, #12]
 8006206:	9904      	ldr	r1, [sp, #16]
 8006208:	60c4      	str	r4, [r0, #12]
 800620a:	930b      	str	r3, [sp, #44]	; 0x2c
 800620c:	f001 ff7a 	bl	8008104 <__mcmp>
 8006210:	42a0      	cmp	r0, r4
 8006212:	da6b      	bge.n	80062ec <_strtod_l+0x884>
 8006214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006216:	ea53 0308 	orrs.w	r3, r3, r8
 800621a:	f040 8091 	bne.w	8006340 <_strtod_l+0x8d8>
 800621e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006222:	2b00      	cmp	r3, #0
 8006224:	f040 808c 	bne.w	8006340 <_strtod_l+0x8d8>
 8006228:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800622c:	0d1b      	lsrs	r3, r3, #20
 800622e:	051b      	lsls	r3, r3, #20
 8006230:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006234:	f240 8084 	bls.w	8006340 <_strtod_l+0x8d8>
 8006238:	f8db 3014 	ldr.w	r3, [fp, #20]
 800623c:	b91b      	cbnz	r3, 8006246 <_strtod_l+0x7de>
 800623e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006242:	2b01      	cmp	r3, #1
 8006244:	dd7c      	ble.n	8006340 <_strtod_l+0x8d8>
 8006246:	4659      	mov	r1, fp
 8006248:	2201      	movs	r2, #1
 800624a:	4650      	mov	r0, sl
 800624c:	f001 feea 	bl	8008024 <__lshift>
 8006250:	9904      	ldr	r1, [sp, #16]
 8006252:	4683      	mov	fp, r0
 8006254:	f001 ff56 	bl	8008104 <__mcmp>
 8006258:	2800      	cmp	r0, #0
 800625a:	dd71      	ble.n	8006340 <_strtod_l+0x8d8>
 800625c:	9905      	ldr	r1, [sp, #20]
 800625e:	464b      	mov	r3, r9
 8006260:	4a20      	ldr	r2, [pc, #128]	; (80062e4 <_strtod_l+0x87c>)
 8006262:	2900      	cmp	r1, #0
 8006264:	f000 808c 	beq.w	8006380 <_strtod_l+0x918>
 8006268:	ea02 0109 	and.w	r1, r2, r9
 800626c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006270:	f300 8086 	bgt.w	8006380 <_strtod_l+0x918>
 8006274:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006278:	f77f aeaa 	ble.w	8005fd0 <_strtod_l+0x568>
 800627c:	4640      	mov	r0, r8
 800627e:	4649      	mov	r1, r9
 8006280:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <_strtod_l+0x880>)
 8006282:	2200      	movs	r2, #0
 8006284:	f7fa f940 	bl	8000508 <__aeabi_dmul>
 8006288:	460b      	mov	r3, r1
 800628a:	4303      	orrs	r3, r0
 800628c:	bf08      	it	eq
 800628e:	2322      	moveq	r3, #34	; 0x22
 8006290:	4680      	mov	r8, r0
 8006292:	4689      	mov	r9, r1
 8006294:	bf08      	it	eq
 8006296:	f8ca 3000 	streq.w	r3, [sl]
 800629a:	e62f      	b.n	8005efc <_strtod_l+0x494>
 800629c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	ea03 0808 	and.w	r8, r3, r8
 80062a8:	e6e0      	b.n	800606c <_strtod_l+0x604>
 80062aa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80062ae:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80062b2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80062b6:	35e2      	adds	r5, #226	; 0xe2
 80062b8:	fa07 f505 	lsl.w	r5, r7, r5
 80062bc:	970f      	str	r7, [sp, #60]	; 0x3c
 80062be:	e747      	b.n	8006150 <_strtod_l+0x6e8>
 80062c0:	2301      	movs	r3, #1
 80062c2:	2500      	movs	r5, #0
 80062c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80062c6:	e743      	b.n	8006150 <_strtod_l+0x6e8>
 80062c8:	463a      	mov	r2, r7
 80062ca:	4650      	mov	r0, sl
 80062cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80062ce:	f001 fea9 	bl	8008024 <__lshift>
 80062d2:	901a      	str	r0, [sp, #104]	; 0x68
 80062d4:	2800      	cmp	r0, #0
 80062d6:	f47f af69 	bne.w	80061ac <_strtod_l+0x744>
 80062da:	e604      	b.n	8005ee6 <_strtod_l+0x47e>
 80062dc:	08009650 	.word	0x08009650
 80062e0:	fffffc02 	.word	0xfffffc02
 80062e4:	7ff00000 	.word	0x7ff00000
 80062e8:	39500000 	.word	0x39500000
 80062ec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80062f0:	d165      	bne.n	80063be <_strtod_l+0x956>
 80062f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062f8:	b35a      	cbz	r2, 8006352 <_strtod_l+0x8ea>
 80062fa:	4a99      	ldr	r2, [pc, #612]	; (8006560 <_strtod_l+0xaf8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d12b      	bne.n	8006358 <_strtod_l+0x8f0>
 8006300:	9b05      	ldr	r3, [sp, #20]
 8006302:	4641      	mov	r1, r8
 8006304:	b303      	cbz	r3, 8006348 <_strtod_l+0x8e0>
 8006306:	464a      	mov	r2, r9
 8006308:	4b96      	ldr	r3, [pc, #600]	; (8006564 <_strtod_l+0xafc>)
 800630a:	4013      	ands	r3, r2
 800630c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006314:	d81b      	bhi.n	800634e <_strtod_l+0x8e6>
 8006316:	0d1b      	lsrs	r3, r3, #20
 8006318:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	4299      	cmp	r1, r3
 8006322:	d119      	bne.n	8006358 <_strtod_l+0x8f0>
 8006324:	4b90      	ldr	r3, [pc, #576]	; (8006568 <_strtod_l+0xb00>)
 8006326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006328:	429a      	cmp	r2, r3
 800632a:	d102      	bne.n	8006332 <_strtod_l+0x8ca>
 800632c:	3101      	adds	r1, #1
 800632e:	f43f adda 	beq.w	8005ee6 <_strtod_l+0x47e>
 8006332:	f04f 0800 	mov.w	r8, #0
 8006336:	4b8b      	ldr	r3, [pc, #556]	; (8006564 <_strtod_l+0xafc>)
 8006338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800633a:	401a      	ands	r2, r3
 800633c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006340:	9b05      	ldr	r3, [sp, #20]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d19a      	bne.n	800627c <_strtod_l+0x814>
 8006346:	e5d9      	b.n	8005efc <_strtod_l+0x494>
 8006348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800634c:	e7e8      	b.n	8006320 <_strtod_l+0x8b8>
 800634e:	4613      	mov	r3, r2
 8006350:	e7e6      	b.n	8006320 <_strtod_l+0x8b8>
 8006352:	ea53 0308 	orrs.w	r3, r3, r8
 8006356:	d081      	beq.n	800625c <_strtod_l+0x7f4>
 8006358:	b1e5      	cbz	r5, 8006394 <_strtod_l+0x92c>
 800635a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800635c:	421d      	tst	r5, r3
 800635e:	d0ef      	beq.n	8006340 <_strtod_l+0x8d8>
 8006360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006362:	4640      	mov	r0, r8
 8006364:	4649      	mov	r1, r9
 8006366:	9a05      	ldr	r2, [sp, #20]
 8006368:	b1c3      	cbz	r3, 800639c <_strtod_l+0x934>
 800636a:	f7ff fb5b 	bl	8005a24 <sulp>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006376:	f7f9 ff11 	bl	800019c <__adddf3>
 800637a:	4680      	mov	r8, r0
 800637c:	4689      	mov	r9, r1
 800637e:	e7df      	b.n	8006340 <_strtod_l+0x8d8>
 8006380:	4013      	ands	r3, r2
 8006382:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006386:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800638a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800638e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006392:	e7d5      	b.n	8006340 <_strtod_l+0x8d8>
 8006394:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006396:	ea13 0f08 	tst.w	r3, r8
 800639a:	e7e0      	b.n	800635e <_strtod_l+0x8f6>
 800639c:	f7ff fb42 	bl	8005a24 <sulp>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063a8:	f7f9 fef6 	bl	8000198 <__aeabi_dsub>
 80063ac:	2200      	movs	r2, #0
 80063ae:	2300      	movs	r3, #0
 80063b0:	4680      	mov	r8, r0
 80063b2:	4689      	mov	r9, r1
 80063b4:	f7fa fb10 	bl	80009d8 <__aeabi_dcmpeq>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d0c1      	beq.n	8006340 <_strtod_l+0x8d8>
 80063bc:	e608      	b.n	8005fd0 <_strtod_l+0x568>
 80063be:	4658      	mov	r0, fp
 80063c0:	9904      	ldr	r1, [sp, #16]
 80063c2:	f002 f81d 	bl	8008400 <__ratio>
 80063c6:	2200      	movs	r2, #0
 80063c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063cc:	4606      	mov	r6, r0
 80063ce:	460f      	mov	r7, r1
 80063d0:	f7fa fb16 	bl	8000a00 <__aeabi_dcmple>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d070      	beq.n	80064ba <_strtod_l+0xa52>
 80063d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d042      	beq.n	8006464 <_strtod_l+0x9fc>
 80063de:	2600      	movs	r6, #0
 80063e0:	4f62      	ldr	r7, [pc, #392]	; (800656c <_strtod_l+0xb04>)
 80063e2:	4d62      	ldr	r5, [pc, #392]	; (800656c <_strtod_l+0xb04>)
 80063e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ea:	0d1b      	lsrs	r3, r3, #20
 80063ec:	051b      	lsls	r3, r3, #20
 80063ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80063f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063f2:	4b5f      	ldr	r3, [pc, #380]	; (8006570 <_strtod_l+0xb08>)
 80063f4:	429a      	cmp	r2, r3
 80063f6:	f040 80c3 	bne.w	8006580 <_strtod_l+0xb18>
 80063fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fc:	4640      	mov	r0, r8
 80063fe:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006402:	4649      	mov	r1, r9
 8006404:	f001 ff26 	bl	8008254 <__ulp>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4630      	mov	r0, r6
 800640e:	4639      	mov	r1, r7
 8006410:	f7fa f87a 	bl	8000508 <__aeabi_dmul>
 8006414:	4642      	mov	r2, r8
 8006416:	464b      	mov	r3, r9
 8006418:	f7f9 fec0 	bl	800019c <__adddf3>
 800641c:	460b      	mov	r3, r1
 800641e:	4951      	ldr	r1, [pc, #324]	; (8006564 <_strtod_l+0xafc>)
 8006420:	4a54      	ldr	r2, [pc, #336]	; (8006574 <_strtod_l+0xb0c>)
 8006422:	4019      	ands	r1, r3
 8006424:	4291      	cmp	r1, r2
 8006426:	4680      	mov	r8, r0
 8006428:	d95d      	bls.n	80064e6 <_strtod_l+0xa7e>
 800642a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800642c:	4b4e      	ldr	r3, [pc, #312]	; (8006568 <_strtod_l+0xb00>)
 800642e:	429a      	cmp	r2, r3
 8006430:	d103      	bne.n	800643a <_strtod_l+0x9d2>
 8006432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006434:	3301      	adds	r3, #1
 8006436:	f43f ad56 	beq.w	8005ee6 <_strtod_l+0x47e>
 800643a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800643e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006568 <_strtod_l+0xb00>
 8006442:	4650      	mov	r0, sl
 8006444:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006446:	f001 fbd5 	bl	8007bf4 <_Bfree>
 800644a:	4650      	mov	r0, sl
 800644c:	9906      	ldr	r1, [sp, #24]
 800644e:	f001 fbd1 	bl	8007bf4 <_Bfree>
 8006452:	4650      	mov	r0, sl
 8006454:	9904      	ldr	r1, [sp, #16]
 8006456:	f001 fbcd 	bl	8007bf4 <_Bfree>
 800645a:	4659      	mov	r1, fp
 800645c:	4650      	mov	r0, sl
 800645e:	f001 fbc9 	bl	8007bf4 <_Bfree>
 8006462:	e627      	b.n	80060b4 <_strtod_l+0x64c>
 8006464:	f1b8 0f00 	cmp.w	r8, #0
 8006468:	d119      	bne.n	800649e <_strtod_l+0xa36>
 800646a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006470:	b9e3      	cbnz	r3, 80064ac <_strtod_l+0xa44>
 8006472:	2200      	movs	r2, #0
 8006474:	4630      	mov	r0, r6
 8006476:	4639      	mov	r1, r7
 8006478:	4b3c      	ldr	r3, [pc, #240]	; (800656c <_strtod_l+0xb04>)
 800647a:	f7fa fab7 	bl	80009ec <__aeabi_dcmplt>
 800647e:	b9c8      	cbnz	r0, 80064b4 <_strtod_l+0xa4c>
 8006480:	2200      	movs	r2, #0
 8006482:	4630      	mov	r0, r6
 8006484:	4639      	mov	r1, r7
 8006486:	4b3c      	ldr	r3, [pc, #240]	; (8006578 <_strtod_l+0xb10>)
 8006488:	f7fa f83e 	bl	8000508 <__aeabi_dmul>
 800648c:	4604      	mov	r4, r0
 800648e:	460d      	mov	r5, r1
 8006490:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006494:	9416      	str	r4, [sp, #88]	; 0x58
 8006496:	9317      	str	r3, [sp, #92]	; 0x5c
 8006498:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800649c:	e7a2      	b.n	80063e4 <_strtod_l+0x97c>
 800649e:	f1b8 0f01 	cmp.w	r8, #1
 80064a2:	d103      	bne.n	80064ac <_strtod_l+0xa44>
 80064a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f43f ad92 	beq.w	8005fd0 <_strtod_l+0x568>
 80064ac:	2600      	movs	r6, #0
 80064ae:	2400      	movs	r4, #0
 80064b0:	4f32      	ldr	r7, [pc, #200]	; (800657c <_strtod_l+0xb14>)
 80064b2:	e796      	b.n	80063e2 <_strtod_l+0x97a>
 80064b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80064b6:	4d30      	ldr	r5, [pc, #192]	; (8006578 <_strtod_l+0xb10>)
 80064b8:	e7ea      	b.n	8006490 <_strtod_l+0xa28>
 80064ba:	4b2f      	ldr	r3, [pc, #188]	; (8006578 <_strtod_l+0xb10>)
 80064bc:	2200      	movs	r2, #0
 80064be:	4630      	mov	r0, r6
 80064c0:	4639      	mov	r1, r7
 80064c2:	f7fa f821 	bl	8000508 <__aeabi_dmul>
 80064c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c8:	4604      	mov	r4, r0
 80064ca:	460d      	mov	r5, r1
 80064cc:	b933      	cbnz	r3, 80064dc <_strtod_l+0xa74>
 80064ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064d2:	9010      	str	r0, [sp, #64]	; 0x40
 80064d4:	9311      	str	r3, [sp, #68]	; 0x44
 80064d6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80064da:	e783      	b.n	80063e4 <_strtod_l+0x97c>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80064e4:	e7f7      	b.n	80064d6 <_strtod_l+0xa6e>
 80064e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80064ea:	9b05      	ldr	r3, [sp, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1a8      	bne.n	8006442 <_strtod_l+0x9da>
 80064f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064f6:	0d1b      	lsrs	r3, r3, #20
 80064f8:	051b      	lsls	r3, r3, #20
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d1a1      	bne.n	8006442 <_strtod_l+0x9da>
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7fa fb61 	bl	8000bc8 <__aeabi_d2lz>
 8006506:	f7f9 ffd1 	bl	80004ac <__aeabi_l2d>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4620      	mov	r0, r4
 8006510:	4629      	mov	r1, r5
 8006512:	f7f9 fe41 	bl	8000198 <__aeabi_dsub>
 8006516:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800651c:	ea43 0308 	orr.w	r3, r3, r8
 8006520:	4313      	orrs	r3, r2
 8006522:	4604      	mov	r4, r0
 8006524:	460d      	mov	r5, r1
 8006526:	d066      	beq.n	80065f6 <_strtod_l+0xb8e>
 8006528:	a309      	add	r3, pc, #36	; (adr r3, 8006550 <_strtod_l+0xae8>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f7fa fa5d 	bl	80009ec <__aeabi_dcmplt>
 8006532:	2800      	cmp	r0, #0
 8006534:	f47f ace2 	bne.w	8005efc <_strtod_l+0x494>
 8006538:	a307      	add	r3, pc, #28	; (adr r3, 8006558 <_strtod_l+0xaf0>)
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	4620      	mov	r0, r4
 8006540:	4629      	mov	r1, r5
 8006542:	f7fa fa71 	bl	8000a28 <__aeabi_dcmpgt>
 8006546:	2800      	cmp	r0, #0
 8006548:	f43f af7b 	beq.w	8006442 <_strtod_l+0x9da>
 800654c:	e4d6      	b.n	8005efc <_strtod_l+0x494>
 800654e:	bf00      	nop
 8006550:	94a03595 	.word	0x94a03595
 8006554:	3fdfffff 	.word	0x3fdfffff
 8006558:	35afe535 	.word	0x35afe535
 800655c:	3fe00000 	.word	0x3fe00000
 8006560:	000fffff 	.word	0x000fffff
 8006564:	7ff00000 	.word	0x7ff00000
 8006568:	7fefffff 	.word	0x7fefffff
 800656c:	3ff00000 	.word	0x3ff00000
 8006570:	7fe00000 	.word	0x7fe00000
 8006574:	7c9fffff 	.word	0x7c9fffff
 8006578:	3fe00000 	.word	0x3fe00000
 800657c:	bff00000 	.word	0xbff00000
 8006580:	9b05      	ldr	r3, [sp, #20]
 8006582:	b313      	cbz	r3, 80065ca <_strtod_l+0xb62>
 8006584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006586:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800658a:	d81e      	bhi.n	80065ca <_strtod_l+0xb62>
 800658c:	a326      	add	r3, pc, #152	; (adr r3, 8006628 <_strtod_l+0xbc0>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	4620      	mov	r0, r4
 8006594:	4629      	mov	r1, r5
 8006596:	f7fa fa33 	bl	8000a00 <__aeabi_dcmple>
 800659a:	b190      	cbz	r0, 80065c2 <_strtod_l+0xb5a>
 800659c:	4629      	mov	r1, r5
 800659e:	4620      	mov	r0, r4
 80065a0:	f7fa fa8a 	bl	8000ab8 <__aeabi_d2uiz>
 80065a4:	2801      	cmp	r0, #1
 80065a6:	bf38      	it	cc
 80065a8:	2001      	movcc	r0, #1
 80065aa:	f7f9 ff33 	bl	8000414 <__aeabi_ui2d>
 80065ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065b0:	4604      	mov	r4, r0
 80065b2:	460d      	mov	r5, r1
 80065b4:	b9d3      	cbnz	r3, 80065ec <_strtod_l+0xb84>
 80065b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065ba:	9012      	str	r0, [sp, #72]	; 0x48
 80065bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80065be:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80065c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065c4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80065c8:	1a9f      	subs	r7, r3, r2
 80065ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065ce:	f001 fe41 	bl	8008254 <__ulp>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4630      	mov	r0, r6
 80065d8:	4639      	mov	r1, r7
 80065da:	f7f9 ff95 	bl	8000508 <__aeabi_dmul>
 80065de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065e2:	f7f9 fddb 	bl	800019c <__adddf3>
 80065e6:	4680      	mov	r8, r0
 80065e8:	4689      	mov	r9, r1
 80065ea:	e77e      	b.n	80064ea <_strtod_l+0xa82>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80065f4:	e7e3      	b.n	80065be <_strtod_l+0xb56>
 80065f6:	a30e      	add	r3, pc, #56	; (adr r3, 8006630 <_strtod_l+0xbc8>)
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f7fa f9f6 	bl	80009ec <__aeabi_dcmplt>
 8006600:	e7a1      	b.n	8006546 <_strtod_l+0xade>
 8006602:	2300      	movs	r3, #0
 8006604:	930a      	str	r3, [sp, #40]	; 0x28
 8006606:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006608:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	f7ff ba71 	b.w	8005af2 <_strtod_l+0x8a>
 8006610:	2a65      	cmp	r2, #101	; 0x65
 8006612:	f43f ab63 	beq.w	8005cdc <_strtod_l+0x274>
 8006616:	2a45      	cmp	r2, #69	; 0x45
 8006618:	f43f ab60 	beq.w	8005cdc <_strtod_l+0x274>
 800661c:	2301      	movs	r3, #1
 800661e:	f7ff bb95 	b.w	8005d4c <_strtod_l+0x2e4>
 8006622:	bf00      	nop
 8006624:	f3af 8000 	nop.w
 8006628:	ffc00000 	.word	0xffc00000
 800662c:	41dfffff 	.word	0x41dfffff
 8006630:	94a03595 	.word	0x94a03595
 8006634:	3fcfffff 	.word	0x3fcfffff

08006638 <_strtod_r>:
 8006638:	4b01      	ldr	r3, [pc, #4]	; (8006640 <_strtod_r+0x8>)
 800663a:	f7ff ba15 	b.w	8005a68 <_strtod_l>
 800663e:	bf00      	nop
 8006640:	20000074 	.word	0x20000074

08006644 <_strtol_l.constprop.0>:
 8006644:	2b01      	cmp	r3, #1
 8006646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800664a:	4680      	mov	r8, r0
 800664c:	d001      	beq.n	8006652 <_strtol_l.constprop.0+0xe>
 800664e:	2b24      	cmp	r3, #36	; 0x24
 8006650:	d906      	bls.n	8006660 <_strtol_l.constprop.0+0x1c>
 8006652:	f7fe fb23 	bl	8004c9c <__errno>
 8006656:	2316      	movs	r3, #22
 8006658:	6003      	str	r3, [r0, #0]
 800665a:	2000      	movs	r0, #0
 800665c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006660:	460d      	mov	r5, r1
 8006662:	4f35      	ldr	r7, [pc, #212]	; (8006738 <_strtol_l.constprop.0+0xf4>)
 8006664:	4628      	mov	r0, r5
 8006666:	f815 4b01 	ldrb.w	r4, [r5], #1
 800666a:	5de6      	ldrb	r6, [r4, r7]
 800666c:	f016 0608 	ands.w	r6, r6, #8
 8006670:	d1f8      	bne.n	8006664 <_strtol_l.constprop.0+0x20>
 8006672:	2c2d      	cmp	r4, #45	; 0x2d
 8006674:	d12f      	bne.n	80066d6 <_strtol_l.constprop.0+0x92>
 8006676:	2601      	movs	r6, #1
 8006678:	782c      	ldrb	r4, [r5, #0]
 800667a:	1c85      	adds	r5, r0, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d057      	beq.n	8006730 <_strtol_l.constprop.0+0xec>
 8006680:	2b10      	cmp	r3, #16
 8006682:	d109      	bne.n	8006698 <_strtol_l.constprop.0+0x54>
 8006684:	2c30      	cmp	r4, #48	; 0x30
 8006686:	d107      	bne.n	8006698 <_strtol_l.constprop.0+0x54>
 8006688:	7828      	ldrb	r0, [r5, #0]
 800668a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800668e:	2858      	cmp	r0, #88	; 0x58
 8006690:	d149      	bne.n	8006726 <_strtol_l.constprop.0+0xe2>
 8006692:	2310      	movs	r3, #16
 8006694:	786c      	ldrb	r4, [r5, #1]
 8006696:	3502      	adds	r5, #2
 8006698:	2700      	movs	r7, #0
 800669a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800669e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80066a2:	fbbe f9f3 	udiv	r9, lr, r3
 80066a6:	4638      	mov	r0, r7
 80066a8:	fb03 ea19 	mls	sl, r3, r9, lr
 80066ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80066b0:	f1bc 0f09 	cmp.w	ip, #9
 80066b4:	d814      	bhi.n	80066e0 <_strtol_l.constprop.0+0x9c>
 80066b6:	4664      	mov	r4, ip
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	dd22      	ble.n	8006702 <_strtol_l.constprop.0+0xbe>
 80066bc:	2f00      	cmp	r7, #0
 80066be:	db1d      	blt.n	80066fc <_strtol_l.constprop.0+0xb8>
 80066c0:	4581      	cmp	r9, r0
 80066c2:	d31b      	bcc.n	80066fc <_strtol_l.constprop.0+0xb8>
 80066c4:	d101      	bne.n	80066ca <_strtol_l.constprop.0+0x86>
 80066c6:	45a2      	cmp	sl, r4
 80066c8:	db18      	blt.n	80066fc <_strtol_l.constprop.0+0xb8>
 80066ca:	2701      	movs	r7, #1
 80066cc:	fb00 4003 	mla	r0, r0, r3, r4
 80066d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066d4:	e7ea      	b.n	80066ac <_strtol_l.constprop.0+0x68>
 80066d6:	2c2b      	cmp	r4, #43	; 0x2b
 80066d8:	bf04      	itt	eq
 80066da:	782c      	ldrbeq	r4, [r5, #0]
 80066dc:	1c85      	addeq	r5, r0, #2
 80066de:	e7cd      	b.n	800667c <_strtol_l.constprop.0+0x38>
 80066e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80066e4:	f1bc 0f19 	cmp.w	ip, #25
 80066e8:	d801      	bhi.n	80066ee <_strtol_l.constprop.0+0xaa>
 80066ea:	3c37      	subs	r4, #55	; 0x37
 80066ec:	e7e4      	b.n	80066b8 <_strtol_l.constprop.0+0x74>
 80066ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80066f2:	f1bc 0f19 	cmp.w	ip, #25
 80066f6:	d804      	bhi.n	8006702 <_strtol_l.constprop.0+0xbe>
 80066f8:	3c57      	subs	r4, #87	; 0x57
 80066fa:	e7dd      	b.n	80066b8 <_strtol_l.constprop.0+0x74>
 80066fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006700:	e7e6      	b.n	80066d0 <_strtol_l.constprop.0+0x8c>
 8006702:	2f00      	cmp	r7, #0
 8006704:	da07      	bge.n	8006716 <_strtol_l.constprop.0+0xd2>
 8006706:	2322      	movs	r3, #34	; 0x22
 8006708:	4670      	mov	r0, lr
 800670a:	f8c8 3000 	str.w	r3, [r8]
 800670e:	2a00      	cmp	r2, #0
 8006710:	d0a4      	beq.n	800665c <_strtol_l.constprop.0+0x18>
 8006712:	1e69      	subs	r1, r5, #1
 8006714:	e005      	b.n	8006722 <_strtol_l.constprop.0+0xde>
 8006716:	b106      	cbz	r6, 800671a <_strtol_l.constprop.0+0xd6>
 8006718:	4240      	negs	r0, r0
 800671a:	2a00      	cmp	r2, #0
 800671c:	d09e      	beq.n	800665c <_strtol_l.constprop.0+0x18>
 800671e:	2f00      	cmp	r7, #0
 8006720:	d1f7      	bne.n	8006712 <_strtol_l.constprop.0+0xce>
 8006722:	6011      	str	r1, [r2, #0]
 8006724:	e79a      	b.n	800665c <_strtol_l.constprop.0+0x18>
 8006726:	2430      	movs	r4, #48	; 0x30
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1b5      	bne.n	8006698 <_strtol_l.constprop.0+0x54>
 800672c:	2308      	movs	r3, #8
 800672e:	e7b3      	b.n	8006698 <_strtol_l.constprop.0+0x54>
 8006730:	2c30      	cmp	r4, #48	; 0x30
 8006732:	d0a9      	beq.n	8006688 <_strtol_l.constprop.0+0x44>
 8006734:	230a      	movs	r3, #10
 8006736:	e7af      	b.n	8006698 <_strtol_l.constprop.0+0x54>
 8006738:	08009679 	.word	0x08009679

0800673c <_strtol_r>:
 800673c:	f7ff bf82 	b.w	8006644 <_strtol_l.constprop.0>

08006740 <quorem>:
 8006740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	6903      	ldr	r3, [r0, #16]
 8006746:	690c      	ldr	r4, [r1, #16]
 8006748:	4607      	mov	r7, r0
 800674a:	42a3      	cmp	r3, r4
 800674c:	f2c0 8082 	blt.w	8006854 <quorem+0x114>
 8006750:	3c01      	subs	r4, #1
 8006752:	f100 0514 	add.w	r5, r0, #20
 8006756:	f101 0814 	add.w	r8, r1, #20
 800675a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800675e:	9301      	str	r3, [sp, #4]
 8006760:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006768:	3301      	adds	r3, #1
 800676a:	429a      	cmp	r2, r3
 800676c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006770:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006774:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006778:	d331      	bcc.n	80067de <quorem+0x9e>
 800677a:	f04f 0e00 	mov.w	lr, #0
 800677e:	4640      	mov	r0, r8
 8006780:	46ac      	mov	ip, r5
 8006782:	46f2      	mov	sl, lr
 8006784:	f850 2b04 	ldr.w	r2, [r0], #4
 8006788:	b293      	uxth	r3, r2
 800678a:	fb06 e303 	mla	r3, r6, r3, lr
 800678e:	0c12      	lsrs	r2, r2, #16
 8006790:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006794:	b29b      	uxth	r3, r3
 8006796:	fb06 e202 	mla	r2, r6, r2, lr
 800679a:	ebaa 0303 	sub.w	r3, sl, r3
 800679e:	f8dc a000 	ldr.w	sl, [ip]
 80067a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067a6:	fa1f fa8a 	uxth.w	sl, sl
 80067aa:	4453      	add	r3, sl
 80067ac:	f8dc a000 	ldr.w	sl, [ip]
 80067b0:	b292      	uxth	r2, r2
 80067b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067c0:	4581      	cmp	r9, r0
 80067c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067c6:	f84c 3b04 	str.w	r3, [ip], #4
 80067ca:	d2db      	bcs.n	8006784 <quorem+0x44>
 80067cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80067d0:	b92b      	cbnz	r3, 80067de <quorem+0x9e>
 80067d2:	9b01      	ldr	r3, [sp, #4]
 80067d4:	3b04      	subs	r3, #4
 80067d6:	429d      	cmp	r5, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	d32f      	bcc.n	800683c <quorem+0xfc>
 80067dc:	613c      	str	r4, [r7, #16]
 80067de:	4638      	mov	r0, r7
 80067e0:	f001 fc90 	bl	8008104 <__mcmp>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	db25      	blt.n	8006834 <quorem+0xf4>
 80067e8:	4628      	mov	r0, r5
 80067ea:	f04f 0c00 	mov.w	ip, #0
 80067ee:	3601      	adds	r6, #1
 80067f0:	f858 1b04 	ldr.w	r1, [r8], #4
 80067f4:	f8d0 e000 	ldr.w	lr, [r0]
 80067f8:	b28b      	uxth	r3, r1
 80067fa:	ebac 0303 	sub.w	r3, ip, r3
 80067fe:	fa1f f28e 	uxth.w	r2, lr
 8006802:	4413      	add	r3, r2
 8006804:	0c0a      	lsrs	r2, r1, #16
 8006806:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800680a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800680e:	b29b      	uxth	r3, r3
 8006810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006814:	45c1      	cmp	r9, r8
 8006816:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800681a:	f840 3b04 	str.w	r3, [r0], #4
 800681e:	d2e7      	bcs.n	80067f0 <quorem+0xb0>
 8006820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006824:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006828:	b922      	cbnz	r2, 8006834 <quorem+0xf4>
 800682a:	3b04      	subs	r3, #4
 800682c:	429d      	cmp	r5, r3
 800682e:	461a      	mov	r2, r3
 8006830:	d30a      	bcc.n	8006848 <quorem+0x108>
 8006832:	613c      	str	r4, [r7, #16]
 8006834:	4630      	mov	r0, r6
 8006836:	b003      	add	sp, #12
 8006838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	3b04      	subs	r3, #4
 8006840:	2a00      	cmp	r2, #0
 8006842:	d1cb      	bne.n	80067dc <quorem+0x9c>
 8006844:	3c01      	subs	r4, #1
 8006846:	e7c6      	b.n	80067d6 <quorem+0x96>
 8006848:	6812      	ldr	r2, [r2, #0]
 800684a:	3b04      	subs	r3, #4
 800684c:	2a00      	cmp	r2, #0
 800684e:	d1f0      	bne.n	8006832 <quorem+0xf2>
 8006850:	3c01      	subs	r4, #1
 8006852:	e7eb      	b.n	800682c <quorem+0xec>
 8006854:	2000      	movs	r0, #0
 8006856:	e7ee      	b.n	8006836 <quorem+0xf6>

08006858 <_dtoa_r>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	4616      	mov	r6, r2
 800685e:	461f      	mov	r7, r3
 8006860:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006862:	b099      	sub	sp, #100	; 0x64
 8006864:	4605      	mov	r5, r0
 8006866:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800686a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800686e:	b974      	cbnz	r4, 800688e <_dtoa_r+0x36>
 8006870:	2010      	movs	r0, #16
 8006872:	f001 f949 	bl	8007b08 <malloc>
 8006876:	4602      	mov	r2, r0
 8006878:	6268      	str	r0, [r5, #36]	; 0x24
 800687a:	b920      	cbnz	r0, 8006886 <_dtoa_r+0x2e>
 800687c:	21ea      	movs	r1, #234	; 0xea
 800687e:	4ba8      	ldr	r3, [pc, #672]	; (8006b20 <_dtoa_r+0x2c8>)
 8006880:	48a8      	ldr	r0, [pc, #672]	; (8006b24 <_dtoa_r+0x2cc>)
 8006882:	f002 f8b3 	bl	80089ec <__assert_func>
 8006886:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800688a:	6004      	str	r4, [r0, #0]
 800688c:	60c4      	str	r4, [r0, #12]
 800688e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006890:	6819      	ldr	r1, [r3, #0]
 8006892:	b151      	cbz	r1, 80068aa <_dtoa_r+0x52>
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	2301      	movs	r3, #1
 8006898:	4093      	lsls	r3, r2
 800689a:	604a      	str	r2, [r1, #4]
 800689c:	608b      	str	r3, [r1, #8]
 800689e:	4628      	mov	r0, r5
 80068a0:	f001 f9a8 	bl	8007bf4 <_Bfree>
 80068a4:	2200      	movs	r2, #0
 80068a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	1e3b      	subs	r3, r7, #0
 80068ac:	bfaf      	iteee	ge
 80068ae:	2300      	movge	r3, #0
 80068b0:	2201      	movlt	r2, #1
 80068b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068b6:	9305      	strlt	r3, [sp, #20]
 80068b8:	bfa8      	it	ge
 80068ba:	f8c8 3000 	strge.w	r3, [r8]
 80068be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80068c2:	4b99      	ldr	r3, [pc, #612]	; (8006b28 <_dtoa_r+0x2d0>)
 80068c4:	bfb8      	it	lt
 80068c6:	f8c8 2000 	strlt.w	r2, [r8]
 80068ca:	ea33 0309 	bics.w	r3, r3, r9
 80068ce:	d119      	bne.n	8006904 <_dtoa_r+0xac>
 80068d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80068d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068dc:	4333      	orrs	r3, r6
 80068de:	f000 857f 	beq.w	80073e0 <_dtoa_r+0xb88>
 80068e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068e4:	b953      	cbnz	r3, 80068fc <_dtoa_r+0xa4>
 80068e6:	4b91      	ldr	r3, [pc, #580]	; (8006b2c <_dtoa_r+0x2d4>)
 80068e8:	e022      	b.n	8006930 <_dtoa_r+0xd8>
 80068ea:	4b91      	ldr	r3, [pc, #580]	; (8006b30 <_dtoa_r+0x2d8>)
 80068ec:	9303      	str	r3, [sp, #12]
 80068ee:	3308      	adds	r3, #8
 80068f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	9803      	ldr	r0, [sp, #12]
 80068f6:	b019      	add	sp, #100	; 0x64
 80068f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fc:	4b8b      	ldr	r3, [pc, #556]	; (8006b2c <_dtoa_r+0x2d4>)
 80068fe:	9303      	str	r3, [sp, #12]
 8006900:	3303      	adds	r3, #3
 8006902:	e7f5      	b.n	80068f0 <_dtoa_r+0x98>
 8006904:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006908:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800690c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006910:	2200      	movs	r2, #0
 8006912:	2300      	movs	r3, #0
 8006914:	f7fa f860 	bl	80009d8 <__aeabi_dcmpeq>
 8006918:	4680      	mov	r8, r0
 800691a:	b158      	cbz	r0, 8006934 <_dtoa_r+0xdc>
 800691c:	2301      	movs	r3, #1
 800691e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8558 	beq.w	80073da <_dtoa_r+0xb82>
 800692a:	4882      	ldr	r0, [pc, #520]	; (8006b34 <_dtoa_r+0x2dc>)
 800692c:	6018      	str	r0, [r3, #0]
 800692e:	1e43      	subs	r3, r0, #1
 8006930:	9303      	str	r3, [sp, #12]
 8006932:	e7df      	b.n	80068f4 <_dtoa_r+0x9c>
 8006934:	ab16      	add	r3, sp, #88	; 0x58
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	ab17      	add	r3, sp, #92	; 0x5c
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	4628      	mov	r0, r5
 800693e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006942:	f001 fd01 	bl	8008348 <__d2b>
 8006946:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800694a:	4683      	mov	fp, r0
 800694c:	2c00      	cmp	r4, #0
 800694e:	d07f      	beq.n	8006a50 <_dtoa_r+0x1f8>
 8006950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006956:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800695a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800695e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006962:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006966:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800696a:	2200      	movs	r2, #0
 800696c:	4b72      	ldr	r3, [pc, #456]	; (8006b38 <_dtoa_r+0x2e0>)
 800696e:	f7f9 fc13 	bl	8000198 <__aeabi_dsub>
 8006972:	a365      	add	r3, pc, #404	; (adr r3, 8006b08 <_dtoa_r+0x2b0>)
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	f7f9 fdc6 	bl	8000508 <__aeabi_dmul>
 800697c:	a364      	add	r3, pc, #400	; (adr r3, 8006b10 <_dtoa_r+0x2b8>)
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	f7f9 fc0b 	bl	800019c <__adddf3>
 8006986:	4606      	mov	r6, r0
 8006988:	4620      	mov	r0, r4
 800698a:	460f      	mov	r7, r1
 800698c:	f7f9 fd52 	bl	8000434 <__aeabi_i2d>
 8006990:	a361      	add	r3, pc, #388	; (adr r3, 8006b18 <_dtoa_r+0x2c0>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f7f9 fdb7 	bl	8000508 <__aeabi_dmul>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4630      	mov	r0, r6
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7f9 fbfb 	bl	800019c <__adddf3>
 80069a6:	4606      	mov	r6, r0
 80069a8:	460f      	mov	r7, r1
 80069aa:	f7fa f85d 	bl	8000a68 <__aeabi_d2iz>
 80069ae:	2200      	movs	r2, #0
 80069b0:	4682      	mov	sl, r0
 80069b2:	2300      	movs	r3, #0
 80069b4:	4630      	mov	r0, r6
 80069b6:	4639      	mov	r1, r7
 80069b8:	f7fa f818 	bl	80009ec <__aeabi_dcmplt>
 80069bc:	b148      	cbz	r0, 80069d2 <_dtoa_r+0x17a>
 80069be:	4650      	mov	r0, sl
 80069c0:	f7f9 fd38 	bl	8000434 <__aeabi_i2d>
 80069c4:	4632      	mov	r2, r6
 80069c6:	463b      	mov	r3, r7
 80069c8:	f7fa f806 	bl	80009d8 <__aeabi_dcmpeq>
 80069cc:	b908      	cbnz	r0, 80069d2 <_dtoa_r+0x17a>
 80069ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80069d2:	f1ba 0f16 	cmp.w	sl, #22
 80069d6:	d858      	bhi.n	8006a8a <_dtoa_r+0x232>
 80069d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069dc:	4b57      	ldr	r3, [pc, #348]	; (8006b3c <_dtoa_r+0x2e4>)
 80069de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f7fa f801 	bl	80009ec <__aeabi_dcmplt>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d04f      	beq.n	8006a8e <_dtoa_r+0x236>
 80069ee:	2300      	movs	r3, #0
 80069f0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80069f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80069f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069f8:	1b1c      	subs	r4, r3, r4
 80069fa:	1e63      	subs	r3, r4, #1
 80069fc:	9309      	str	r3, [sp, #36]	; 0x24
 80069fe:	bf49      	itett	mi
 8006a00:	f1c4 0301 	rsbmi	r3, r4, #1
 8006a04:	2300      	movpl	r3, #0
 8006a06:	9306      	strmi	r3, [sp, #24]
 8006a08:	2300      	movmi	r3, #0
 8006a0a:	bf54      	ite	pl
 8006a0c:	9306      	strpl	r3, [sp, #24]
 8006a0e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006a10:	f1ba 0f00 	cmp.w	sl, #0
 8006a14:	db3d      	blt.n	8006a92 <_dtoa_r+0x23a>
 8006a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a18:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006a1c:	4453      	add	r3, sl
 8006a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a20:	2300      	movs	r3, #0
 8006a22:	930a      	str	r3, [sp, #40]	; 0x28
 8006a24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a26:	2b09      	cmp	r3, #9
 8006a28:	f200 808c 	bhi.w	8006b44 <_dtoa_r+0x2ec>
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	bfc4      	itt	gt
 8006a30:	3b04      	subgt	r3, #4
 8006a32:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a36:	bfc8      	it	gt
 8006a38:	2400      	movgt	r4, #0
 8006a3a:	f1a3 0302 	sub.w	r3, r3, #2
 8006a3e:	bfd8      	it	le
 8006a40:	2401      	movle	r4, #1
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	f200 808a 	bhi.w	8006b5c <_dtoa_r+0x304>
 8006a48:	e8df f003 	tbb	[pc, r3]
 8006a4c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006a50:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006a54:	441c      	add	r4, r3
 8006a56:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	bfc3      	ittte	gt
 8006a5e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a62:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006a66:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a6a:	f1c3 0320 	rsble	r3, r3, #32
 8006a6e:	bfc6      	itte	gt
 8006a70:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a74:	4318      	orrgt	r0, r3
 8006a76:	fa06 f003 	lslle.w	r0, r6, r3
 8006a7a:	f7f9 fccb 	bl	8000414 <__aeabi_ui2d>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006a84:	3c01      	subs	r4, #1
 8006a86:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a88:	e76f      	b.n	800696a <_dtoa_r+0x112>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e7b2      	b.n	80069f4 <_dtoa_r+0x19c>
 8006a8e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006a90:	e7b1      	b.n	80069f6 <_dtoa_r+0x19e>
 8006a92:	9b06      	ldr	r3, [sp, #24]
 8006a94:	eba3 030a 	sub.w	r3, r3, sl
 8006a98:	9306      	str	r3, [sp, #24]
 8006a9a:	f1ca 0300 	rsb	r3, sl, #0
 8006a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	930e      	str	r3, [sp, #56]	; 0x38
 8006aa4:	e7be      	b.n	8006a24 <_dtoa_r+0x1cc>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dc58      	bgt.n	8006b62 <_dtoa_r+0x30a>
 8006ab0:	f04f 0901 	mov.w	r9, #1
 8006ab4:	464b      	mov	r3, r9
 8006ab6:	f8cd 9020 	str.w	r9, [sp, #32]
 8006aba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006abe:	2200      	movs	r2, #0
 8006ac0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006ac2:	6042      	str	r2, [r0, #4]
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	f102 0614 	add.w	r6, r2, #20
 8006aca:	429e      	cmp	r6, r3
 8006acc:	6841      	ldr	r1, [r0, #4]
 8006ace:	d94e      	bls.n	8006b6e <_dtoa_r+0x316>
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f001 f84f 	bl	8007b74 <_Balloc>
 8006ad6:	9003      	str	r0, [sp, #12]
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d14c      	bne.n	8006b76 <_dtoa_r+0x31e>
 8006adc:	4602      	mov	r2, r0
 8006ade:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <_dtoa_r+0x2e8>)
 8006ae4:	e6cc      	b.n	8006880 <_dtoa_r+0x28>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e7de      	b.n	8006aa8 <_dtoa_r+0x250>
 8006aea:	2300      	movs	r3, #0
 8006aec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006af0:	eb0a 0903 	add.w	r9, sl, r3
 8006af4:	f109 0301 	add.w	r3, r9, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	9308      	str	r3, [sp, #32]
 8006afc:	bfb8      	it	lt
 8006afe:	2301      	movlt	r3, #1
 8006b00:	e7dd      	b.n	8006abe <_dtoa_r+0x266>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e7f2      	b.n	8006aec <_dtoa_r+0x294>
 8006b06:	bf00      	nop
 8006b08:	636f4361 	.word	0x636f4361
 8006b0c:	3fd287a7 	.word	0x3fd287a7
 8006b10:	8b60c8b3 	.word	0x8b60c8b3
 8006b14:	3fc68a28 	.word	0x3fc68a28
 8006b18:	509f79fb 	.word	0x509f79fb
 8006b1c:	3fd34413 	.word	0x3fd34413
 8006b20:	08009786 	.word	0x08009786
 8006b24:	0800979d 	.word	0x0800979d
 8006b28:	7ff00000 	.word	0x7ff00000
 8006b2c:	08009782 	.word	0x08009782
 8006b30:	08009779 	.word	0x08009779
 8006b34:	080095fd 	.word	0x080095fd
 8006b38:	3ff80000 	.word	0x3ff80000
 8006b3c:	08009908 	.word	0x08009908
 8006b40:	080097f8 	.word	0x080097f8
 8006b44:	2401      	movs	r4, #1
 8006b46:	2300      	movs	r3, #0
 8006b48:	940b      	str	r4, [sp, #44]	; 0x2c
 8006b4a:	9322      	str	r3, [sp, #136]	; 0x88
 8006b4c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006b50:	2200      	movs	r2, #0
 8006b52:	2312      	movs	r3, #18
 8006b54:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b58:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b5a:	e7b0      	b.n	8006abe <_dtoa_r+0x266>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b60:	e7f4      	b.n	8006b4c <_dtoa_r+0x2f4>
 8006b62:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006b66:	464b      	mov	r3, r9
 8006b68:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b6c:	e7a7      	b.n	8006abe <_dtoa_r+0x266>
 8006b6e:	3101      	adds	r1, #1
 8006b70:	6041      	str	r1, [r0, #4]
 8006b72:	0052      	lsls	r2, r2, #1
 8006b74:	e7a7      	b.n	8006ac6 <_dtoa_r+0x26e>
 8006b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b78:	9a03      	ldr	r2, [sp, #12]
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	9b08      	ldr	r3, [sp, #32]
 8006b7e:	2b0e      	cmp	r3, #14
 8006b80:	f200 80a8 	bhi.w	8006cd4 <_dtoa_r+0x47c>
 8006b84:	2c00      	cmp	r4, #0
 8006b86:	f000 80a5 	beq.w	8006cd4 <_dtoa_r+0x47c>
 8006b8a:	f1ba 0f00 	cmp.w	sl, #0
 8006b8e:	dd34      	ble.n	8006bfa <_dtoa_r+0x3a2>
 8006b90:	4a9a      	ldr	r2, [pc, #616]	; (8006dfc <_dtoa_r+0x5a4>)
 8006b92:	f00a 030f 	and.w	r3, sl, #15
 8006b96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b9a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006b9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ba2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ba6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006baa:	d016      	beq.n	8006bda <_dtoa_r+0x382>
 8006bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bb0:	4b93      	ldr	r3, [pc, #588]	; (8006e00 <_dtoa_r+0x5a8>)
 8006bb2:	2703      	movs	r7, #3
 8006bb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bb8:	f7f9 fdd0 	bl	800075c <__aeabi_ddiv>
 8006bbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc0:	f004 040f 	and.w	r4, r4, #15
 8006bc4:	4e8e      	ldr	r6, [pc, #568]	; (8006e00 <_dtoa_r+0x5a8>)
 8006bc6:	b954      	cbnz	r4, 8006bde <_dtoa_r+0x386>
 8006bc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bd0:	f7f9 fdc4 	bl	800075c <__aeabi_ddiv>
 8006bd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bd8:	e029      	b.n	8006c2e <_dtoa_r+0x3d6>
 8006bda:	2702      	movs	r7, #2
 8006bdc:	e7f2      	b.n	8006bc4 <_dtoa_r+0x36c>
 8006bde:	07e1      	lsls	r1, r4, #31
 8006be0:	d508      	bpl.n	8006bf4 <_dtoa_r+0x39c>
 8006be2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006be6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bea:	f7f9 fc8d 	bl	8000508 <__aeabi_dmul>
 8006bee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bf2:	3701      	adds	r7, #1
 8006bf4:	1064      	asrs	r4, r4, #1
 8006bf6:	3608      	adds	r6, #8
 8006bf8:	e7e5      	b.n	8006bc6 <_dtoa_r+0x36e>
 8006bfa:	f000 80a5 	beq.w	8006d48 <_dtoa_r+0x4f0>
 8006bfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c02:	f1ca 0400 	rsb	r4, sl, #0
 8006c06:	4b7d      	ldr	r3, [pc, #500]	; (8006dfc <_dtoa_r+0x5a4>)
 8006c08:	f004 020f 	and.w	r2, r4, #15
 8006c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f7f9 fc78 	bl	8000508 <__aeabi_dmul>
 8006c18:	2702      	movs	r7, #2
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c20:	4e77      	ldr	r6, [pc, #476]	; (8006e00 <_dtoa_r+0x5a8>)
 8006c22:	1124      	asrs	r4, r4, #4
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	f040 8084 	bne.w	8006d32 <_dtoa_r+0x4da>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1d2      	bne.n	8006bd4 <_dtoa_r+0x37c>
 8006c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 808b 	beq.w	8006d4c <_dtoa_r+0x4f4>
 8006c36:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c42:	2200      	movs	r2, #0
 8006c44:	4b6f      	ldr	r3, [pc, #444]	; (8006e04 <_dtoa_r+0x5ac>)
 8006c46:	f7f9 fed1 	bl	80009ec <__aeabi_dcmplt>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d07e      	beq.n	8006d4c <_dtoa_r+0x4f4>
 8006c4e:	9b08      	ldr	r3, [sp, #32]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d07b      	beq.n	8006d4c <_dtoa_r+0x4f4>
 8006c54:	f1b9 0f00 	cmp.w	r9, #0
 8006c58:	dd38      	ble.n	8006ccc <_dtoa_r+0x474>
 8006c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4b69      	ldr	r3, [pc, #420]	; (8006e08 <_dtoa_r+0x5b0>)
 8006c62:	f7f9 fc51 	bl	8000508 <__aeabi_dmul>
 8006c66:	464c      	mov	r4, r9
 8006c68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c6c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8006c70:	3701      	adds	r7, #1
 8006c72:	4638      	mov	r0, r7
 8006c74:	f7f9 fbde 	bl	8000434 <__aeabi_i2d>
 8006c78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c7c:	f7f9 fc44 	bl	8000508 <__aeabi_dmul>
 8006c80:	2200      	movs	r2, #0
 8006c82:	4b62      	ldr	r3, [pc, #392]	; (8006e0c <_dtoa_r+0x5b4>)
 8006c84:	f7f9 fa8a 	bl	800019c <__adddf3>
 8006c88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006c8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c90:	9611      	str	r6, [sp, #68]	; 0x44
 8006c92:	2c00      	cmp	r4, #0
 8006c94:	d15d      	bne.n	8006d52 <_dtoa_r+0x4fa>
 8006c96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4b5c      	ldr	r3, [pc, #368]	; (8006e10 <_dtoa_r+0x5b8>)
 8006c9e:	f7f9 fa7b 	bl	8000198 <__aeabi_dsub>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006caa:	4633      	mov	r3, r6
 8006cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cae:	f7f9 febb 	bl	8000a28 <__aeabi_dcmpgt>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f040 829c 	bne.w	80071f0 <_dtoa_r+0x998>
 8006cb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cbe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006cc2:	f7f9 fe93 	bl	80009ec <__aeabi_dcmplt>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	f040 8290 	bne.w	80071ec <_dtoa_r+0x994>
 8006ccc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006cd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006cd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f2c0 8152 	blt.w	8006f80 <_dtoa_r+0x728>
 8006cdc:	f1ba 0f0e 	cmp.w	sl, #14
 8006ce0:	f300 814e 	bgt.w	8006f80 <_dtoa_r+0x728>
 8006ce4:	4b45      	ldr	r3, [pc, #276]	; (8006dfc <_dtoa_r+0x5a4>)
 8006ce6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006cea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006cf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f280 80db 	bge.w	8006eb0 <_dtoa_r+0x658>
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f300 80d7 	bgt.w	8006eb0 <_dtoa_r+0x658>
 8006d02:	f040 8272 	bne.w	80071ea <_dtoa_r+0x992>
 8006d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4b40      	ldr	r3, [pc, #256]	; (8006e10 <_dtoa_r+0x5b8>)
 8006d0e:	f7f9 fbfb 	bl	8000508 <__aeabi_dmul>
 8006d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d16:	f7f9 fe7d 	bl	8000a14 <__aeabi_dcmpge>
 8006d1a:	9c08      	ldr	r4, [sp, #32]
 8006d1c:	4626      	mov	r6, r4
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f040 8248 	bne.w	80071b4 <_dtoa_r+0x95c>
 8006d24:	2331      	movs	r3, #49	; 0x31
 8006d26:	9f03      	ldr	r7, [sp, #12]
 8006d28:	f10a 0a01 	add.w	sl, sl, #1
 8006d2c:	f807 3b01 	strb.w	r3, [r7], #1
 8006d30:	e244      	b.n	80071bc <_dtoa_r+0x964>
 8006d32:	07e2      	lsls	r2, r4, #31
 8006d34:	d505      	bpl.n	8006d42 <_dtoa_r+0x4ea>
 8006d36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d3a:	f7f9 fbe5 	bl	8000508 <__aeabi_dmul>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	3701      	adds	r7, #1
 8006d42:	1064      	asrs	r4, r4, #1
 8006d44:	3608      	adds	r6, #8
 8006d46:	e76d      	b.n	8006c24 <_dtoa_r+0x3cc>
 8006d48:	2702      	movs	r7, #2
 8006d4a:	e770      	b.n	8006c2e <_dtoa_r+0x3d6>
 8006d4c:	46d0      	mov	r8, sl
 8006d4e:	9c08      	ldr	r4, [sp, #32]
 8006d50:	e78f      	b.n	8006c72 <_dtoa_r+0x41a>
 8006d52:	9903      	ldr	r1, [sp, #12]
 8006d54:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <_dtoa_r+0x5a4>)
 8006d56:	4421      	add	r1, r4
 8006d58:	9112      	str	r1, [sp, #72]	; 0x48
 8006d5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d60:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006d64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d68:	2900      	cmp	r1, #0
 8006d6a:	d055      	beq.n	8006e18 <_dtoa_r+0x5c0>
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	4929      	ldr	r1, [pc, #164]	; (8006e14 <_dtoa_r+0x5bc>)
 8006d70:	f7f9 fcf4 	bl	800075c <__aeabi_ddiv>
 8006d74:	463b      	mov	r3, r7
 8006d76:	4632      	mov	r2, r6
 8006d78:	f7f9 fa0e 	bl	8000198 <__aeabi_dsub>
 8006d7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d80:	9f03      	ldr	r7, [sp, #12]
 8006d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d86:	f7f9 fe6f 	bl	8000a68 <__aeabi_d2iz>
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	f7f9 fb52 	bl	8000434 <__aeabi_i2d>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d98:	f7f9 f9fe 	bl	8000198 <__aeabi_dsub>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	3430      	adds	r4, #48	; 0x30
 8006da2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006daa:	f807 4b01 	strb.w	r4, [r7], #1
 8006dae:	f7f9 fe1d 	bl	80009ec <__aeabi_dcmplt>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d174      	bne.n	8006ea0 <_dtoa_r+0x648>
 8006db6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dba:	2000      	movs	r0, #0
 8006dbc:	4911      	ldr	r1, [pc, #68]	; (8006e04 <_dtoa_r+0x5ac>)
 8006dbe:	f7f9 f9eb 	bl	8000198 <__aeabi_dsub>
 8006dc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dc6:	f7f9 fe11 	bl	80009ec <__aeabi_dcmplt>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f040 80b7 	bne.w	8006f3e <_dtoa_r+0x6e6>
 8006dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dd2:	429f      	cmp	r7, r3
 8006dd4:	f43f af7a 	beq.w	8006ccc <_dtoa_r+0x474>
 8006dd8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <_dtoa_r+0x5b0>)
 8006de0:	f7f9 fb92 	bl	8000508 <__aeabi_dmul>
 8006de4:	2200      	movs	r2, #0
 8006de6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dee:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <_dtoa_r+0x5b0>)
 8006df0:	f7f9 fb8a 	bl	8000508 <__aeabi_dmul>
 8006df4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006df8:	e7c3      	b.n	8006d82 <_dtoa_r+0x52a>
 8006dfa:	bf00      	nop
 8006dfc:	08009908 	.word	0x08009908
 8006e00:	080098e0 	.word	0x080098e0
 8006e04:	3ff00000 	.word	0x3ff00000
 8006e08:	40240000 	.word	0x40240000
 8006e0c:	401c0000 	.word	0x401c0000
 8006e10:	40140000 	.word	0x40140000
 8006e14:	3fe00000 	.word	0x3fe00000
 8006e18:	4630      	mov	r0, r6
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	f7f9 fb74 	bl	8000508 <__aeabi_dmul>
 8006e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e26:	9c03      	ldr	r4, [sp, #12]
 8006e28:	9314      	str	r3, [sp, #80]	; 0x50
 8006e2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e2e:	f7f9 fe1b 	bl	8000a68 <__aeabi_d2iz>
 8006e32:	9015      	str	r0, [sp, #84]	; 0x54
 8006e34:	f7f9 fafe 	bl	8000434 <__aeabi_i2d>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e40:	f7f9 f9aa 	bl	8000198 <__aeabi_dsub>
 8006e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e46:	4606      	mov	r6, r0
 8006e48:	3330      	adds	r3, #48	; 0x30
 8006e4a:	f804 3b01 	strb.w	r3, [r4], #1
 8006e4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e50:	460f      	mov	r7, r1
 8006e52:	429c      	cmp	r4, r3
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	d124      	bne.n	8006ea4 <_dtoa_r+0x64c>
 8006e5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e5e:	4bb0      	ldr	r3, [pc, #704]	; (8007120 <_dtoa_r+0x8c8>)
 8006e60:	f7f9 f99c 	bl	800019c <__adddf3>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 fddc 	bl	8000a28 <__aeabi_dcmpgt>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d163      	bne.n	8006f3c <_dtoa_r+0x6e4>
 8006e74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e78:	2000      	movs	r0, #0
 8006e7a:	49a9      	ldr	r1, [pc, #676]	; (8007120 <_dtoa_r+0x8c8>)
 8006e7c:	f7f9 f98c 	bl	8000198 <__aeabi_dsub>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4630      	mov	r0, r6
 8006e86:	4639      	mov	r1, r7
 8006e88:	f7f9 fdb0 	bl	80009ec <__aeabi_dcmplt>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f43f af1d 	beq.w	8006ccc <_dtoa_r+0x474>
 8006e92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e94:	1e7b      	subs	r3, r7, #1
 8006e96:	9314      	str	r3, [sp, #80]	; 0x50
 8006e98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006e9c:	2b30      	cmp	r3, #48	; 0x30
 8006e9e:	d0f8      	beq.n	8006e92 <_dtoa_r+0x63a>
 8006ea0:	46c2      	mov	sl, r8
 8006ea2:	e03b      	b.n	8006f1c <_dtoa_r+0x6c4>
 8006ea4:	4b9f      	ldr	r3, [pc, #636]	; (8007124 <_dtoa_r+0x8cc>)
 8006ea6:	f7f9 fb2f 	bl	8000508 <__aeabi_dmul>
 8006eaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eae:	e7bc      	b.n	8006e2a <_dtoa_r+0x5d2>
 8006eb0:	9f03      	ldr	r7, [sp, #12]
 8006eb2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006eb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eba:	4640      	mov	r0, r8
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	f7f9 fc4d 	bl	800075c <__aeabi_ddiv>
 8006ec2:	f7f9 fdd1 	bl	8000a68 <__aeabi_d2iz>
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	f7f9 fab4 	bl	8000434 <__aeabi_i2d>
 8006ecc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ed0:	f7f9 fb1a 	bl	8000508 <__aeabi_dmul>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4640      	mov	r0, r8
 8006eda:	4649      	mov	r1, r9
 8006edc:	f7f9 f95c 	bl	8000198 <__aeabi_dsub>
 8006ee0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006ee4:	f807 6b01 	strb.w	r6, [r7], #1
 8006ee8:	9e03      	ldr	r6, [sp, #12]
 8006eea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006eee:	1bbe      	subs	r6, r7, r6
 8006ef0:	45b4      	cmp	ip, r6
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	d136      	bne.n	8006f66 <_dtoa_r+0x70e>
 8006ef8:	f7f9 f950 	bl	800019c <__adddf3>
 8006efc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f00:	4680      	mov	r8, r0
 8006f02:	4689      	mov	r9, r1
 8006f04:	f7f9 fd90 	bl	8000a28 <__aeabi_dcmpgt>
 8006f08:	bb58      	cbnz	r0, 8006f62 <_dtoa_r+0x70a>
 8006f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f0e:	4640      	mov	r0, r8
 8006f10:	4649      	mov	r1, r9
 8006f12:	f7f9 fd61 	bl	80009d8 <__aeabi_dcmpeq>
 8006f16:	b108      	cbz	r0, 8006f1c <_dtoa_r+0x6c4>
 8006f18:	07e1      	lsls	r1, r4, #31
 8006f1a:	d422      	bmi.n	8006f62 <_dtoa_r+0x70a>
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	4659      	mov	r1, fp
 8006f20:	f000 fe68 	bl	8007bf4 <_Bfree>
 8006f24:	2300      	movs	r3, #0
 8006f26:	703b      	strb	r3, [r7, #0]
 8006f28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f2a:	f10a 0001 	add.w	r0, sl, #1
 8006f2e:	6018      	str	r0, [r3, #0]
 8006f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f43f acde 	beq.w	80068f4 <_dtoa_r+0x9c>
 8006f38:	601f      	str	r7, [r3, #0]
 8006f3a:	e4db      	b.n	80068f4 <_dtoa_r+0x9c>
 8006f3c:	4627      	mov	r7, r4
 8006f3e:	463b      	mov	r3, r7
 8006f40:	461f      	mov	r7, r3
 8006f42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f46:	2a39      	cmp	r2, #57	; 0x39
 8006f48:	d107      	bne.n	8006f5a <_dtoa_r+0x702>
 8006f4a:	9a03      	ldr	r2, [sp, #12]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d1f7      	bne.n	8006f40 <_dtoa_r+0x6e8>
 8006f50:	2230      	movs	r2, #48	; 0x30
 8006f52:	9903      	ldr	r1, [sp, #12]
 8006f54:	f108 0801 	add.w	r8, r8, #1
 8006f58:	700a      	strb	r2, [r1, #0]
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	3201      	adds	r2, #1
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	e79e      	b.n	8006ea0 <_dtoa_r+0x648>
 8006f62:	46d0      	mov	r8, sl
 8006f64:	e7eb      	b.n	8006f3e <_dtoa_r+0x6e6>
 8006f66:	2200      	movs	r2, #0
 8006f68:	4b6e      	ldr	r3, [pc, #440]	; (8007124 <_dtoa_r+0x8cc>)
 8006f6a:	f7f9 facd 	bl	8000508 <__aeabi_dmul>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2300      	movs	r3, #0
 8006f72:	4680      	mov	r8, r0
 8006f74:	4689      	mov	r9, r1
 8006f76:	f7f9 fd2f 	bl	80009d8 <__aeabi_dcmpeq>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d09b      	beq.n	8006eb6 <_dtoa_r+0x65e>
 8006f7e:	e7cd      	b.n	8006f1c <_dtoa_r+0x6c4>
 8006f80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f82:	2a00      	cmp	r2, #0
 8006f84:	f000 80d0 	beq.w	8007128 <_dtoa_r+0x8d0>
 8006f88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f8a:	2a01      	cmp	r2, #1
 8006f8c:	f300 80ae 	bgt.w	80070ec <_dtoa_r+0x894>
 8006f90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f92:	2a00      	cmp	r2, #0
 8006f94:	f000 80a6 	beq.w	80070e4 <_dtoa_r+0x88c>
 8006f98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f9e:	9f06      	ldr	r7, [sp, #24]
 8006fa0:	9a06      	ldr	r2, [sp, #24]
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	441a      	add	r2, r3
 8006fa6:	9206      	str	r2, [sp, #24]
 8006fa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006faa:	4628      	mov	r0, r5
 8006fac:	441a      	add	r2, r3
 8006fae:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb0:	f000 ff20 	bl	8007df4 <__i2b>
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	2f00      	cmp	r7, #0
 8006fb8:	dd0c      	ble.n	8006fd4 <_dtoa_r+0x77c>
 8006fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dd09      	ble.n	8006fd4 <_dtoa_r+0x77c>
 8006fc0:	42bb      	cmp	r3, r7
 8006fc2:	bfa8      	it	ge
 8006fc4:	463b      	movge	r3, r7
 8006fc6:	9a06      	ldr	r2, [sp, #24]
 8006fc8:	1aff      	subs	r7, r7, r3
 8006fca:	1ad2      	subs	r2, r2, r3
 8006fcc:	9206      	str	r2, [sp, #24]
 8006fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd6:	b1f3      	cbz	r3, 8007016 <_dtoa_r+0x7be>
 8006fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 80a8 	beq.w	8007130 <_dtoa_r+0x8d8>
 8006fe0:	2c00      	cmp	r4, #0
 8006fe2:	dd10      	ble.n	8007006 <_dtoa_r+0x7ae>
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f000 ffc1 	bl	8007f70 <__pow5mult>
 8006fee:	465a      	mov	r2, fp
 8006ff0:	4601      	mov	r1, r0
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f000 ff13 	bl	8007e20 <__multiply>
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	4659      	mov	r1, fp
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 fdf8 	bl	8007bf4 <_Bfree>
 8007004:	46c3      	mov	fp, r8
 8007006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007008:	1b1a      	subs	r2, r3, r4
 800700a:	d004      	beq.n	8007016 <_dtoa_r+0x7be>
 800700c:	4659      	mov	r1, fp
 800700e:	4628      	mov	r0, r5
 8007010:	f000 ffae 	bl	8007f70 <__pow5mult>
 8007014:	4683      	mov	fp, r0
 8007016:	2101      	movs	r1, #1
 8007018:	4628      	mov	r0, r5
 800701a:	f000 feeb 	bl	8007df4 <__i2b>
 800701e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007020:	4604      	mov	r4, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	f340 8086 	ble.w	8007134 <_dtoa_r+0x8dc>
 8007028:	461a      	mov	r2, r3
 800702a:	4601      	mov	r1, r0
 800702c:	4628      	mov	r0, r5
 800702e:	f000 ff9f 	bl	8007f70 <__pow5mult>
 8007032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007034:	4604      	mov	r4, r0
 8007036:	2b01      	cmp	r3, #1
 8007038:	dd7f      	ble.n	800713a <_dtoa_r+0x8e2>
 800703a:	f04f 0800 	mov.w	r8, #0
 800703e:	6923      	ldr	r3, [r4, #16]
 8007040:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007044:	6918      	ldr	r0, [r3, #16]
 8007046:	f000 fe87 	bl	8007d58 <__hi0bits>
 800704a:	f1c0 0020 	rsb	r0, r0, #32
 800704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007050:	4418      	add	r0, r3
 8007052:	f010 001f 	ands.w	r0, r0, #31
 8007056:	f000 8092 	beq.w	800717e <_dtoa_r+0x926>
 800705a:	f1c0 0320 	rsb	r3, r0, #32
 800705e:	2b04      	cmp	r3, #4
 8007060:	f340 808a 	ble.w	8007178 <_dtoa_r+0x920>
 8007064:	f1c0 001c 	rsb	r0, r0, #28
 8007068:	9b06      	ldr	r3, [sp, #24]
 800706a:	4407      	add	r7, r0
 800706c:	4403      	add	r3, r0
 800706e:	9306      	str	r3, [sp, #24]
 8007070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007072:	4403      	add	r3, r0
 8007074:	9309      	str	r3, [sp, #36]	; 0x24
 8007076:	9b06      	ldr	r3, [sp, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	dd05      	ble.n	8007088 <_dtoa_r+0x830>
 800707c:	4659      	mov	r1, fp
 800707e:	461a      	mov	r2, r3
 8007080:	4628      	mov	r0, r5
 8007082:	f000 ffcf 	bl	8008024 <__lshift>
 8007086:	4683      	mov	fp, r0
 8007088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	dd05      	ble.n	800709a <_dtoa_r+0x842>
 800708e:	4621      	mov	r1, r4
 8007090:	461a      	mov	r2, r3
 8007092:	4628      	mov	r0, r5
 8007094:	f000 ffc6 	bl	8008024 <__lshift>
 8007098:	4604      	mov	r4, r0
 800709a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d070      	beq.n	8007182 <_dtoa_r+0x92a>
 80070a0:	4621      	mov	r1, r4
 80070a2:	4658      	mov	r0, fp
 80070a4:	f001 f82e 	bl	8008104 <__mcmp>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	da6a      	bge.n	8007182 <_dtoa_r+0x92a>
 80070ac:	2300      	movs	r3, #0
 80070ae:	4659      	mov	r1, fp
 80070b0:	220a      	movs	r2, #10
 80070b2:	4628      	mov	r0, r5
 80070b4:	f000 fdc0 	bl	8007c38 <__multadd>
 80070b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ba:	4683      	mov	fp, r0
 80070bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8194 	beq.w	80073ee <_dtoa_r+0xb96>
 80070c6:	4631      	mov	r1, r6
 80070c8:	2300      	movs	r3, #0
 80070ca:	220a      	movs	r2, #10
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 fdb3 	bl	8007c38 <__multadd>
 80070d2:	f1b9 0f00 	cmp.w	r9, #0
 80070d6:	4606      	mov	r6, r0
 80070d8:	f300 8093 	bgt.w	8007202 <_dtoa_r+0x9aa>
 80070dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070de:	2b02      	cmp	r3, #2
 80070e0:	dc57      	bgt.n	8007192 <_dtoa_r+0x93a>
 80070e2:	e08e      	b.n	8007202 <_dtoa_r+0x9aa>
 80070e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070ea:	e757      	b.n	8006f9c <_dtoa_r+0x744>
 80070ec:	9b08      	ldr	r3, [sp, #32]
 80070ee:	1e5c      	subs	r4, r3, #1
 80070f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f2:	42a3      	cmp	r3, r4
 80070f4:	bfb7      	itett	lt
 80070f6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80070f8:	1b1c      	subge	r4, r3, r4
 80070fa:	1ae2      	sublt	r2, r4, r3
 80070fc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80070fe:	bfbe      	ittt	lt
 8007100:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007102:	189b      	addlt	r3, r3, r2
 8007104:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007106:	9b08      	ldr	r3, [sp, #32]
 8007108:	bfb8      	it	lt
 800710a:	2400      	movlt	r4, #0
 800710c:	2b00      	cmp	r3, #0
 800710e:	bfbb      	ittet	lt
 8007110:	9b06      	ldrlt	r3, [sp, #24]
 8007112:	9a08      	ldrlt	r2, [sp, #32]
 8007114:	9f06      	ldrge	r7, [sp, #24]
 8007116:	1a9f      	sublt	r7, r3, r2
 8007118:	bfac      	ite	ge
 800711a:	9b08      	ldrge	r3, [sp, #32]
 800711c:	2300      	movlt	r3, #0
 800711e:	e73f      	b.n	8006fa0 <_dtoa_r+0x748>
 8007120:	3fe00000 	.word	0x3fe00000
 8007124:	40240000 	.word	0x40240000
 8007128:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800712a:	9f06      	ldr	r7, [sp, #24]
 800712c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800712e:	e742      	b.n	8006fb6 <_dtoa_r+0x75e>
 8007130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007132:	e76b      	b.n	800700c <_dtoa_r+0x7b4>
 8007134:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007136:	2b01      	cmp	r3, #1
 8007138:	dc19      	bgt.n	800716e <_dtoa_r+0x916>
 800713a:	9b04      	ldr	r3, [sp, #16]
 800713c:	b9bb      	cbnz	r3, 800716e <_dtoa_r+0x916>
 800713e:	9b05      	ldr	r3, [sp, #20]
 8007140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007144:	b99b      	cbnz	r3, 800716e <_dtoa_r+0x916>
 8007146:	9b05      	ldr	r3, [sp, #20]
 8007148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800714c:	0d1b      	lsrs	r3, r3, #20
 800714e:	051b      	lsls	r3, r3, #20
 8007150:	b183      	cbz	r3, 8007174 <_dtoa_r+0x91c>
 8007152:	f04f 0801 	mov.w	r8, #1
 8007156:	9b06      	ldr	r3, [sp, #24]
 8007158:	3301      	adds	r3, #1
 800715a:	9306      	str	r3, [sp, #24]
 800715c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715e:	3301      	adds	r3, #1
 8007160:	9309      	str	r3, [sp, #36]	; 0x24
 8007162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	f47f af6a 	bne.w	800703e <_dtoa_r+0x7e6>
 800716a:	2001      	movs	r0, #1
 800716c:	e76f      	b.n	800704e <_dtoa_r+0x7f6>
 800716e:	f04f 0800 	mov.w	r8, #0
 8007172:	e7f6      	b.n	8007162 <_dtoa_r+0x90a>
 8007174:	4698      	mov	r8, r3
 8007176:	e7f4      	b.n	8007162 <_dtoa_r+0x90a>
 8007178:	f43f af7d 	beq.w	8007076 <_dtoa_r+0x81e>
 800717c:	4618      	mov	r0, r3
 800717e:	301c      	adds	r0, #28
 8007180:	e772      	b.n	8007068 <_dtoa_r+0x810>
 8007182:	9b08      	ldr	r3, [sp, #32]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dc36      	bgt.n	80071f6 <_dtoa_r+0x99e>
 8007188:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800718a:	2b02      	cmp	r3, #2
 800718c:	dd33      	ble.n	80071f6 <_dtoa_r+0x99e>
 800718e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007192:	f1b9 0f00 	cmp.w	r9, #0
 8007196:	d10d      	bne.n	80071b4 <_dtoa_r+0x95c>
 8007198:	4621      	mov	r1, r4
 800719a:	464b      	mov	r3, r9
 800719c:	2205      	movs	r2, #5
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 fd4a 	bl	8007c38 <__multadd>
 80071a4:	4601      	mov	r1, r0
 80071a6:	4604      	mov	r4, r0
 80071a8:	4658      	mov	r0, fp
 80071aa:	f000 ffab 	bl	8008104 <__mcmp>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	f73f adb8 	bgt.w	8006d24 <_dtoa_r+0x4cc>
 80071b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071b6:	9f03      	ldr	r7, [sp, #12]
 80071b8:	ea6f 0a03 	mvn.w	sl, r3
 80071bc:	f04f 0800 	mov.w	r8, #0
 80071c0:	4621      	mov	r1, r4
 80071c2:	4628      	mov	r0, r5
 80071c4:	f000 fd16 	bl	8007bf4 <_Bfree>
 80071c8:	2e00      	cmp	r6, #0
 80071ca:	f43f aea7 	beq.w	8006f1c <_dtoa_r+0x6c4>
 80071ce:	f1b8 0f00 	cmp.w	r8, #0
 80071d2:	d005      	beq.n	80071e0 <_dtoa_r+0x988>
 80071d4:	45b0      	cmp	r8, r6
 80071d6:	d003      	beq.n	80071e0 <_dtoa_r+0x988>
 80071d8:	4641      	mov	r1, r8
 80071da:	4628      	mov	r0, r5
 80071dc:	f000 fd0a 	bl	8007bf4 <_Bfree>
 80071e0:	4631      	mov	r1, r6
 80071e2:	4628      	mov	r0, r5
 80071e4:	f000 fd06 	bl	8007bf4 <_Bfree>
 80071e8:	e698      	b.n	8006f1c <_dtoa_r+0x6c4>
 80071ea:	2400      	movs	r4, #0
 80071ec:	4626      	mov	r6, r4
 80071ee:	e7e1      	b.n	80071b4 <_dtoa_r+0x95c>
 80071f0:	46c2      	mov	sl, r8
 80071f2:	4626      	mov	r6, r4
 80071f4:	e596      	b.n	8006d24 <_dtoa_r+0x4cc>
 80071f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80fd 	beq.w	80073fc <_dtoa_r+0xba4>
 8007202:	2f00      	cmp	r7, #0
 8007204:	dd05      	ble.n	8007212 <_dtoa_r+0x9ba>
 8007206:	4631      	mov	r1, r6
 8007208:	463a      	mov	r2, r7
 800720a:	4628      	mov	r0, r5
 800720c:	f000 ff0a 	bl	8008024 <__lshift>
 8007210:	4606      	mov	r6, r0
 8007212:	f1b8 0f00 	cmp.w	r8, #0
 8007216:	d05c      	beq.n	80072d2 <_dtoa_r+0xa7a>
 8007218:	4628      	mov	r0, r5
 800721a:	6871      	ldr	r1, [r6, #4]
 800721c:	f000 fcaa 	bl	8007b74 <_Balloc>
 8007220:	4607      	mov	r7, r0
 8007222:	b928      	cbnz	r0, 8007230 <_dtoa_r+0x9d8>
 8007224:	4602      	mov	r2, r0
 8007226:	f240 21ea 	movw	r1, #746	; 0x2ea
 800722a:	4b7f      	ldr	r3, [pc, #508]	; (8007428 <_dtoa_r+0xbd0>)
 800722c:	f7ff bb28 	b.w	8006880 <_dtoa_r+0x28>
 8007230:	6932      	ldr	r2, [r6, #16]
 8007232:	f106 010c 	add.w	r1, r6, #12
 8007236:	3202      	adds	r2, #2
 8007238:	0092      	lsls	r2, r2, #2
 800723a:	300c      	adds	r0, #12
 800723c:	f000 fc8c 	bl	8007b58 <memcpy>
 8007240:	2201      	movs	r2, #1
 8007242:	4639      	mov	r1, r7
 8007244:	4628      	mov	r0, r5
 8007246:	f000 feed 	bl	8008024 <__lshift>
 800724a:	46b0      	mov	r8, r6
 800724c:	4606      	mov	r6, r0
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	3301      	adds	r3, #1
 8007252:	9308      	str	r3, [sp, #32]
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	444b      	add	r3, r9
 8007258:	930a      	str	r3, [sp, #40]	; 0x28
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	9309      	str	r3, [sp, #36]	; 0x24
 8007262:	9b08      	ldr	r3, [sp, #32]
 8007264:	4621      	mov	r1, r4
 8007266:	3b01      	subs	r3, #1
 8007268:	4658      	mov	r0, fp
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	f7ff fa68 	bl	8006740 <quorem>
 8007270:	4603      	mov	r3, r0
 8007272:	4641      	mov	r1, r8
 8007274:	3330      	adds	r3, #48	; 0x30
 8007276:	9006      	str	r0, [sp, #24]
 8007278:	4658      	mov	r0, fp
 800727a:	930b      	str	r3, [sp, #44]	; 0x2c
 800727c:	f000 ff42 	bl	8008104 <__mcmp>
 8007280:	4632      	mov	r2, r6
 8007282:	4681      	mov	r9, r0
 8007284:	4621      	mov	r1, r4
 8007286:	4628      	mov	r0, r5
 8007288:	f000 ff58 	bl	800813c <__mdiff>
 800728c:	68c2      	ldr	r2, [r0, #12]
 800728e:	4607      	mov	r7, r0
 8007290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007292:	bb02      	cbnz	r2, 80072d6 <_dtoa_r+0xa7e>
 8007294:	4601      	mov	r1, r0
 8007296:	4658      	mov	r0, fp
 8007298:	f000 ff34 	bl	8008104 <__mcmp>
 800729c:	4602      	mov	r2, r0
 800729e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a0:	4639      	mov	r1, r7
 80072a2:	4628      	mov	r0, r5
 80072a4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80072a8:	f000 fca4 	bl	8007bf4 <_Bfree>
 80072ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072b0:	9f08      	ldr	r7, [sp, #32]
 80072b2:	ea43 0102 	orr.w	r1, r3, r2
 80072b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b8:	430b      	orrs	r3, r1
 80072ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072bc:	d10d      	bne.n	80072da <_dtoa_r+0xa82>
 80072be:	2b39      	cmp	r3, #57	; 0x39
 80072c0:	d029      	beq.n	8007316 <_dtoa_r+0xabe>
 80072c2:	f1b9 0f00 	cmp.w	r9, #0
 80072c6:	dd01      	ble.n	80072cc <_dtoa_r+0xa74>
 80072c8:	9b06      	ldr	r3, [sp, #24]
 80072ca:	3331      	adds	r3, #49	; 0x31
 80072cc:	9a04      	ldr	r2, [sp, #16]
 80072ce:	7013      	strb	r3, [r2, #0]
 80072d0:	e776      	b.n	80071c0 <_dtoa_r+0x968>
 80072d2:	4630      	mov	r0, r6
 80072d4:	e7b9      	b.n	800724a <_dtoa_r+0x9f2>
 80072d6:	2201      	movs	r2, #1
 80072d8:	e7e2      	b.n	80072a0 <_dtoa_r+0xa48>
 80072da:	f1b9 0f00 	cmp.w	r9, #0
 80072de:	db06      	blt.n	80072ee <_dtoa_r+0xa96>
 80072e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80072e2:	ea41 0909 	orr.w	r9, r1, r9
 80072e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072e8:	ea59 0101 	orrs.w	r1, r9, r1
 80072ec:	d120      	bne.n	8007330 <_dtoa_r+0xad8>
 80072ee:	2a00      	cmp	r2, #0
 80072f0:	ddec      	ble.n	80072cc <_dtoa_r+0xa74>
 80072f2:	4659      	mov	r1, fp
 80072f4:	2201      	movs	r2, #1
 80072f6:	4628      	mov	r0, r5
 80072f8:	9308      	str	r3, [sp, #32]
 80072fa:	f000 fe93 	bl	8008024 <__lshift>
 80072fe:	4621      	mov	r1, r4
 8007300:	4683      	mov	fp, r0
 8007302:	f000 feff 	bl	8008104 <__mcmp>
 8007306:	2800      	cmp	r0, #0
 8007308:	9b08      	ldr	r3, [sp, #32]
 800730a:	dc02      	bgt.n	8007312 <_dtoa_r+0xaba>
 800730c:	d1de      	bne.n	80072cc <_dtoa_r+0xa74>
 800730e:	07da      	lsls	r2, r3, #31
 8007310:	d5dc      	bpl.n	80072cc <_dtoa_r+0xa74>
 8007312:	2b39      	cmp	r3, #57	; 0x39
 8007314:	d1d8      	bne.n	80072c8 <_dtoa_r+0xa70>
 8007316:	2339      	movs	r3, #57	; 0x39
 8007318:	9a04      	ldr	r2, [sp, #16]
 800731a:	7013      	strb	r3, [r2, #0]
 800731c:	463b      	mov	r3, r7
 800731e:	461f      	mov	r7, r3
 8007320:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007324:	3b01      	subs	r3, #1
 8007326:	2a39      	cmp	r2, #57	; 0x39
 8007328:	d050      	beq.n	80073cc <_dtoa_r+0xb74>
 800732a:	3201      	adds	r2, #1
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	e747      	b.n	80071c0 <_dtoa_r+0x968>
 8007330:	2a00      	cmp	r2, #0
 8007332:	dd03      	ble.n	800733c <_dtoa_r+0xae4>
 8007334:	2b39      	cmp	r3, #57	; 0x39
 8007336:	d0ee      	beq.n	8007316 <_dtoa_r+0xabe>
 8007338:	3301      	adds	r3, #1
 800733a:	e7c7      	b.n	80072cc <_dtoa_r+0xa74>
 800733c:	9a08      	ldr	r2, [sp, #32]
 800733e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007340:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007344:	428a      	cmp	r2, r1
 8007346:	d02a      	beq.n	800739e <_dtoa_r+0xb46>
 8007348:	4659      	mov	r1, fp
 800734a:	2300      	movs	r3, #0
 800734c:	220a      	movs	r2, #10
 800734e:	4628      	mov	r0, r5
 8007350:	f000 fc72 	bl	8007c38 <__multadd>
 8007354:	45b0      	cmp	r8, r6
 8007356:	4683      	mov	fp, r0
 8007358:	f04f 0300 	mov.w	r3, #0
 800735c:	f04f 020a 	mov.w	r2, #10
 8007360:	4641      	mov	r1, r8
 8007362:	4628      	mov	r0, r5
 8007364:	d107      	bne.n	8007376 <_dtoa_r+0xb1e>
 8007366:	f000 fc67 	bl	8007c38 <__multadd>
 800736a:	4680      	mov	r8, r0
 800736c:	4606      	mov	r6, r0
 800736e:	9b08      	ldr	r3, [sp, #32]
 8007370:	3301      	adds	r3, #1
 8007372:	9308      	str	r3, [sp, #32]
 8007374:	e775      	b.n	8007262 <_dtoa_r+0xa0a>
 8007376:	f000 fc5f 	bl	8007c38 <__multadd>
 800737a:	4631      	mov	r1, r6
 800737c:	4680      	mov	r8, r0
 800737e:	2300      	movs	r3, #0
 8007380:	220a      	movs	r2, #10
 8007382:	4628      	mov	r0, r5
 8007384:	f000 fc58 	bl	8007c38 <__multadd>
 8007388:	4606      	mov	r6, r0
 800738a:	e7f0      	b.n	800736e <_dtoa_r+0xb16>
 800738c:	f1b9 0f00 	cmp.w	r9, #0
 8007390:	bfcc      	ite	gt
 8007392:	464f      	movgt	r7, r9
 8007394:	2701      	movle	r7, #1
 8007396:	f04f 0800 	mov.w	r8, #0
 800739a:	9a03      	ldr	r2, [sp, #12]
 800739c:	4417      	add	r7, r2
 800739e:	4659      	mov	r1, fp
 80073a0:	2201      	movs	r2, #1
 80073a2:	4628      	mov	r0, r5
 80073a4:	9308      	str	r3, [sp, #32]
 80073a6:	f000 fe3d 	bl	8008024 <__lshift>
 80073aa:	4621      	mov	r1, r4
 80073ac:	4683      	mov	fp, r0
 80073ae:	f000 fea9 	bl	8008104 <__mcmp>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	dcb2      	bgt.n	800731c <_dtoa_r+0xac4>
 80073b6:	d102      	bne.n	80073be <_dtoa_r+0xb66>
 80073b8:	9b08      	ldr	r3, [sp, #32]
 80073ba:	07db      	lsls	r3, r3, #31
 80073bc:	d4ae      	bmi.n	800731c <_dtoa_r+0xac4>
 80073be:	463b      	mov	r3, r7
 80073c0:	461f      	mov	r7, r3
 80073c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073c6:	2a30      	cmp	r2, #48	; 0x30
 80073c8:	d0fa      	beq.n	80073c0 <_dtoa_r+0xb68>
 80073ca:	e6f9      	b.n	80071c0 <_dtoa_r+0x968>
 80073cc:	9a03      	ldr	r2, [sp, #12]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d1a5      	bne.n	800731e <_dtoa_r+0xac6>
 80073d2:	2331      	movs	r3, #49	; 0x31
 80073d4:	f10a 0a01 	add.w	sl, sl, #1
 80073d8:	e779      	b.n	80072ce <_dtoa_r+0xa76>
 80073da:	4b14      	ldr	r3, [pc, #80]	; (800742c <_dtoa_r+0xbd4>)
 80073dc:	f7ff baa8 	b.w	8006930 <_dtoa_r+0xd8>
 80073e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f47f aa81 	bne.w	80068ea <_dtoa_r+0x92>
 80073e8:	4b11      	ldr	r3, [pc, #68]	; (8007430 <_dtoa_r+0xbd8>)
 80073ea:	f7ff baa1 	b.w	8006930 <_dtoa_r+0xd8>
 80073ee:	f1b9 0f00 	cmp.w	r9, #0
 80073f2:	dc03      	bgt.n	80073fc <_dtoa_r+0xba4>
 80073f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	f73f aecb 	bgt.w	8007192 <_dtoa_r+0x93a>
 80073fc:	9f03      	ldr	r7, [sp, #12]
 80073fe:	4621      	mov	r1, r4
 8007400:	4658      	mov	r0, fp
 8007402:	f7ff f99d 	bl	8006740 <quorem>
 8007406:	9a03      	ldr	r2, [sp, #12]
 8007408:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800740c:	f807 3b01 	strb.w	r3, [r7], #1
 8007410:	1aba      	subs	r2, r7, r2
 8007412:	4591      	cmp	r9, r2
 8007414:	ddba      	ble.n	800738c <_dtoa_r+0xb34>
 8007416:	4659      	mov	r1, fp
 8007418:	2300      	movs	r3, #0
 800741a:	220a      	movs	r2, #10
 800741c:	4628      	mov	r0, r5
 800741e:	f000 fc0b 	bl	8007c38 <__multadd>
 8007422:	4683      	mov	fp, r0
 8007424:	e7eb      	b.n	80073fe <_dtoa_r+0xba6>
 8007426:	bf00      	nop
 8007428:	080097f8 	.word	0x080097f8
 800742c:	080095fc 	.word	0x080095fc
 8007430:	08009779 	.word	0x08009779

08007434 <rshift>:
 8007434:	6903      	ldr	r3, [r0, #16]
 8007436:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800743a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800743e:	f100 0414 	add.w	r4, r0, #20
 8007442:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007446:	dd46      	ble.n	80074d6 <rshift+0xa2>
 8007448:	f011 011f 	ands.w	r1, r1, #31
 800744c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007450:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007454:	d10c      	bne.n	8007470 <rshift+0x3c>
 8007456:	4629      	mov	r1, r5
 8007458:	f100 0710 	add.w	r7, r0, #16
 800745c:	42b1      	cmp	r1, r6
 800745e:	d335      	bcc.n	80074cc <rshift+0x98>
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	1eea      	subs	r2, r5, #3
 8007466:	4296      	cmp	r6, r2
 8007468:	bf38      	it	cc
 800746a:	2300      	movcc	r3, #0
 800746c:	4423      	add	r3, r4
 800746e:	e015      	b.n	800749c <rshift+0x68>
 8007470:	46a1      	mov	r9, r4
 8007472:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007476:	f1c1 0820 	rsb	r8, r1, #32
 800747a:	40cf      	lsrs	r7, r1
 800747c:	f105 0e04 	add.w	lr, r5, #4
 8007480:	4576      	cmp	r6, lr
 8007482:	46f4      	mov	ip, lr
 8007484:	d816      	bhi.n	80074b4 <rshift+0x80>
 8007486:	1a9a      	subs	r2, r3, r2
 8007488:	0092      	lsls	r2, r2, #2
 800748a:	3a04      	subs	r2, #4
 800748c:	3501      	adds	r5, #1
 800748e:	42ae      	cmp	r6, r5
 8007490:	bf38      	it	cc
 8007492:	2200      	movcc	r2, #0
 8007494:	18a3      	adds	r3, r4, r2
 8007496:	50a7      	str	r7, [r4, r2]
 8007498:	b107      	cbz	r7, 800749c <rshift+0x68>
 800749a:	3304      	adds	r3, #4
 800749c:	42a3      	cmp	r3, r4
 800749e:	eba3 0204 	sub.w	r2, r3, r4
 80074a2:	bf08      	it	eq
 80074a4:	2300      	moveq	r3, #0
 80074a6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80074aa:	6102      	str	r2, [r0, #16]
 80074ac:	bf08      	it	eq
 80074ae:	6143      	streq	r3, [r0, #20]
 80074b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074b4:	f8dc c000 	ldr.w	ip, [ip]
 80074b8:	fa0c fc08 	lsl.w	ip, ip, r8
 80074bc:	ea4c 0707 	orr.w	r7, ip, r7
 80074c0:	f849 7b04 	str.w	r7, [r9], #4
 80074c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074c8:	40cf      	lsrs	r7, r1
 80074ca:	e7d9      	b.n	8007480 <rshift+0x4c>
 80074cc:	f851 cb04 	ldr.w	ip, [r1], #4
 80074d0:	f847 cf04 	str.w	ip, [r7, #4]!
 80074d4:	e7c2      	b.n	800745c <rshift+0x28>
 80074d6:	4623      	mov	r3, r4
 80074d8:	e7e0      	b.n	800749c <rshift+0x68>

080074da <__hexdig_fun>:
 80074da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80074de:	2b09      	cmp	r3, #9
 80074e0:	d802      	bhi.n	80074e8 <__hexdig_fun+0xe>
 80074e2:	3820      	subs	r0, #32
 80074e4:	b2c0      	uxtb	r0, r0
 80074e6:	4770      	bx	lr
 80074e8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80074ec:	2b05      	cmp	r3, #5
 80074ee:	d801      	bhi.n	80074f4 <__hexdig_fun+0x1a>
 80074f0:	3847      	subs	r0, #71	; 0x47
 80074f2:	e7f7      	b.n	80074e4 <__hexdig_fun+0xa>
 80074f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80074f8:	2b05      	cmp	r3, #5
 80074fa:	d801      	bhi.n	8007500 <__hexdig_fun+0x26>
 80074fc:	3827      	subs	r0, #39	; 0x27
 80074fe:	e7f1      	b.n	80074e4 <__hexdig_fun+0xa>
 8007500:	2000      	movs	r0, #0
 8007502:	4770      	bx	lr

08007504 <__gethex>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	b08b      	sub	sp, #44	; 0x2c
 800750a:	9305      	str	r3, [sp, #20]
 800750c:	4bb2      	ldr	r3, [pc, #712]	; (80077d8 <__gethex+0x2d4>)
 800750e:	9002      	str	r0, [sp, #8]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	468b      	mov	fp, r1
 8007514:	4618      	mov	r0, r3
 8007516:	4690      	mov	r8, r2
 8007518:	9303      	str	r3, [sp, #12]
 800751a:	f7f8 fe31 	bl	8000180 <strlen>
 800751e:	4682      	mov	sl, r0
 8007520:	9b03      	ldr	r3, [sp, #12]
 8007522:	f8db 2000 	ldr.w	r2, [fp]
 8007526:	4403      	add	r3, r0
 8007528:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800752c:	9306      	str	r3, [sp, #24]
 800752e:	1c93      	adds	r3, r2, #2
 8007530:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007534:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007538:	32fe      	adds	r2, #254	; 0xfe
 800753a:	18d1      	adds	r1, r2, r3
 800753c:	461f      	mov	r7, r3
 800753e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007542:	9101      	str	r1, [sp, #4]
 8007544:	2830      	cmp	r0, #48	; 0x30
 8007546:	d0f8      	beq.n	800753a <__gethex+0x36>
 8007548:	f7ff ffc7 	bl	80074da <__hexdig_fun>
 800754c:	4604      	mov	r4, r0
 800754e:	2800      	cmp	r0, #0
 8007550:	d13a      	bne.n	80075c8 <__gethex+0xc4>
 8007552:	4652      	mov	r2, sl
 8007554:	4638      	mov	r0, r7
 8007556:	9903      	ldr	r1, [sp, #12]
 8007558:	f001 fa26 	bl	80089a8 <strncmp>
 800755c:	4605      	mov	r5, r0
 800755e:	2800      	cmp	r0, #0
 8007560:	d166      	bne.n	8007630 <__gethex+0x12c>
 8007562:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007566:	eb07 060a 	add.w	r6, r7, sl
 800756a:	f7ff ffb6 	bl	80074da <__hexdig_fun>
 800756e:	2800      	cmp	r0, #0
 8007570:	d060      	beq.n	8007634 <__gethex+0x130>
 8007572:	4633      	mov	r3, r6
 8007574:	7818      	ldrb	r0, [r3, #0]
 8007576:	461f      	mov	r7, r3
 8007578:	2830      	cmp	r0, #48	; 0x30
 800757a:	f103 0301 	add.w	r3, r3, #1
 800757e:	d0f9      	beq.n	8007574 <__gethex+0x70>
 8007580:	f7ff ffab 	bl	80074da <__hexdig_fun>
 8007584:	2301      	movs	r3, #1
 8007586:	fab0 f480 	clz	r4, r0
 800758a:	4635      	mov	r5, r6
 800758c:	0964      	lsrs	r4, r4, #5
 800758e:	9301      	str	r3, [sp, #4]
 8007590:	463a      	mov	r2, r7
 8007592:	4616      	mov	r6, r2
 8007594:	7830      	ldrb	r0, [r6, #0]
 8007596:	3201      	adds	r2, #1
 8007598:	f7ff ff9f 	bl	80074da <__hexdig_fun>
 800759c:	2800      	cmp	r0, #0
 800759e:	d1f8      	bne.n	8007592 <__gethex+0x8e>
 80075a0:	4652      	mov	r2, sl
 80075a2:	4630      	mov	r0, r6
 80075a4:	9903      	ldr	r1, [sp, #12]
 80075a6:	f001 f9ff 	bl	80089a8 <strncmp>
 80075aa:	b980      	cbnz	r0, 80075ce <__gethex+0xca>
 80075ac:	b94d      	cbnz	r5, 80075c2 <__gethex+0xbe>
 80075ae:	eb06 050a 	add.w	r5, r6, sl
 80075b2:	462a      	mov	r2, r5
 80075b4:	4616      	mov	r6, r2
 80075b6:	7830      	ldrb	r0, [r6, #0]
 80075b8:	3201      	adds	r2, #1
 80075ba:	f7ff ff8e 	bl	80074da <__hexdig_fun>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d1f8      	bne.n	80075b4 <__gethex+0xb0>
 80075c2:	1bad      	subs	r5, r5, r6
 80075c4:	00ad      	lsls	r5, r5, #2
 80075c6:	e004      	b.n	80075d2 <__gethex+0xce>
 80075c8:	2400      	movs	r4, #0
 80075ca:	4625      	mov	r5, r4
 80075cc:	e7e0      	b.n	8007590 <__gethex+0x8c>
 80075ce:	2d00      	cmp	r5, #0
 80075d0:	d1f7      	bne.n	80075c2 <__gethex+0xbe>
 80075d2:	7833      	ldrb	r3, [r6, #0]
 80075d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80075d8:	2b50      	cmp	r3, #80	; 0x50
 80075da:	d139      	bne.n	8007650 <__gethex+0x14c>
 80075dc:	7873      	ldrb	r3, [r6, #1]
 80075de:	2b2b      	cmp	r3, #43	; 0x2b
 80075e0:	d02a      	beq.n	8007638 <__gethex+0x134>
 80075e2:	2b2d      	cmp	r3, #45	; 0x2d
 80075e4:	d02c      	beq.n	8007640 <__gethex+0x13c>
 80075e6:	f04f 0900 	mov.w	r9, #0
 80075ea:	1c71      	adds	r1, r6, #1
 80075ec:	7808      	ldrb	r0, [r1, #0]
 80075ee:	f7ff ff74 	bl	80074da <__hexdig_fun>
 80075f2:	1e43      	subs	r3, r0, #1
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b18      	cmp	r3, #24
 80075f8:	d82a      	bhi.n	8007650 <__gethex+0x14c>
 80075fa:	f1a0 0210 	sub.w	r2, r0, #16
 80075fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007602:	f7ff ff6a 	bl	80074da <__hexdig_fun>
 8007606:	1e43      	subs	r3, r0, #1
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b18      	cmp	r3, #24
 800760c:	d91b      	bls.n	8007646 <__gethex+0x142>
 800760e:	f1b9 0f00 	cmp.w	r9, #0
 8007612:	d000      	beq.n	8007616 <__gethex+0x112>
 8007614:	4252      	negs	r2, r2
 8007616:	4415      	add	r5, r2
 8007618:	f8cb 1000 	str.w	r1, [fp]
 800761c:	b1d4      	cbz	r4, 8007654 <__gethex+0x150>
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	bf14      	ite	ne
 8007624:	2700      	movne	r7, #0
 8007626:	2706      	moveq	r7, #6
 8007628:	4638      	mov	r0, r7
 800762a:	b00b      	add	sp, #44	; 0x2c
 800762c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007630:	463e      	mov	r6, r7
 8007632:	4625      	mov	r5, r4
 8007634:	2401      	movs	r4, #1
 8007636:	e7cc      	b.n	80075d2 <__gethex+0xce>
 8007638:	f04f 0900 	mov.w	r9, #0
 800763c:	1cb1      	adds	r1, r6, #2
 800763e:	e7d5      	b.n	80075ec <__gethex+0xe8>
 8007640:	f04f 0901 	mov.w	r9, #1
 8007644:	e7fa      	b.n	800763c <__gethex+0x138>
 8007646:	230a      	movs	r3, #10
 8007648:	fb03 0202 	mla	r2, r3, r2, r0
 800764c:	3a10      	subs	r2, #16
 800764e:	e7d6      	b.n	80075fe <__gethex+0xfa>
 8007650:	4631      	mov	r1, r6
 8007652:	e7e1      	b.n	8007618 <__gethex+0x114>
 8007654:	4621      	mov	r1, r4
 8007656:	1bf3      	subs	r3, r6, r7
 8007658:	3b01      	subs	r3, #1
 800765a:	2b07      	cmp	r3, #7
 800765c:	dc0a      	bgt.n	8007674 <__gethex+0x170>
 800765e:	9802      	ldr	r0, [sp, #8]
 8007660:	f000 fa88 	bl	8007b74 <_Balloc>
 8007664:	4604      	mov	r4, r0
 8007666:	b940      	cbnz	r0, 800767a <__gethex+0x176>
 8007668:	4602      	mov	r2, r0
 800766a:	21de      	movs	r1, #222	; 0xde
 800766c:	4b5b      	ldr	r3, [pc, #364]	; (80077dc <__gethex+0x2d8>)
 800766e:	485c      	ldr	r0, [pc, #368]	; (80077e0 <__gethex+0x2dc>)
 8007670:	f001 f9bc 	bl	80089ec <__assert_func>
 8007674:	3101      	adds	r1, #1
 8007676:	105b      	asrs	r3, r3, #1
 8007678:	e7ef      	b.n	800765a <__gethex+0x156>
 800767a:	f04f 0b00 	mov.w	fp, #0
 800767e:	f100 0914 	add.w	r9, r0, #20
 8007682:	f1ca 0301 	rsb	r3, sl, #1
 8007686:	f8cd 9010 	str.w	r9, [sp, #16]
 800768a:	f8cd b004 	str.w	fp, [sp, #4]
 800768e:	9308      	str	r3, [sp, #32]
 8007690:	42b7      	cmp	r7, r6
 8007692:	d33f      	bcc.n	8007714 <__gethex+0x210>
 8007694:	9f04      	ldr	r7, [sp, #16]
 8007696:	9b01      	ldr	r3, [sp, #4]
 8007698:	f847 3b04 	str.w	r3, [r7], #4
 800769c:	eba7 0709 	sub.w	r7, r7, r9
 80076a0:	10bf      	asrs	r7, r7, #2
 80076a2:	6127      	str	r7, [r4, #16]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fb57 	bl	8007d58 <__hi0bits>
 80076aa:	017f      	lsls	r7, r7, #5
 80076ac:	f8d8 6000 	ldr.w	r6, [r8]
 80076b0:	1a3f      	subs	r7, r7, r0
 80076b2:	42b7      	cmp	r7, r6
 80076b4:	dd62      	ble.n	800777c <__gethex+0x278>
 80076b6:	1bbf      	subs	r7, r7, r6
 80076b8:	4639      	mov	r1, r7
 80076ba:	4620      	mov	r0, r4
 80076bc:	f000 fef1 	bl	80084a2 <__any_on>
 80076c0:	4682      	mov	sl, r0
 80076c2:	b1a8      	cbz	r0, 80076f0 <__gethex+0x1ec>
 80076c4:	f04f 0a01 	mov.w	sl, #1
 80076c8:	1e7b      	subs	r3, r7, #1
 80076ca:	1159      	asrs	r1, r3, #5
 80076cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80076d0:	f003 021f 	and.w	r2, r3, #31
 80076d4:	fa0a f202 	lsl.w	r2, sl, r2
 80076d8:	420a      	tst	r2, r1
 80076da:	d009      	beq.n	80076f0 <__gethex+0x1ec>
 80076dc:	4553      	cmp	r3, sl
 80076de:	dd05      	ble.n	80076ec <__gethex+0x1e8>
 80076e0:	4620      	mov	r0, r4
 80076e2:	1eb9      	subs	r1, r7, #2
 80076e4:	f000 fedd 	bl	80084a2 <__any_on>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d144      	bne.n	8007776 <__gethex+0x272>
 80076ec:	f04f 0a02 	mov.w	sl, #2
 80076f0:	4639      	mov	r1, r7
 80076f2:	4620      	mov	r0, r4
 80076f4:	f7ff fe9e 	bl	8007434 <rshift>
 80076f8:	443d      	add	r5, r7
 80076fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076fe:	42ab      	cmp	r3, r5
 8007700:	da4a      	bge.n	8007798 <__gethex+0x294>
 8007702:	4621      	mov	r1, r4
 8007704:	9802      	ldr	r0, [sp, #8]
 8007706:	f000 fa75 	bl	8007bf4 <_Bfree>
 800770a:	2300      	movs	r3, #0
 800770c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800770e:	27a3      	movs	r7, #163	; 0xa3
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	e789      	b.n	8007628 <__gethex+0x124>
 8007714:	1e73      	subs	r3, r6, #1
 8007716:	9a06      	ldr	r2, [sp, #24]
 8007718:	9307      	str	r3, [sp, #28]
 800771a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800771e:	4293      	cmp	r3, r2
 8007720:	d019      	beq.n	8007756 <__gethex+0x252>
 8007722:	f1bb 0f20 	cmp.w	fp, #32
 8007726:	d107      	bne.n	8007738 <__gethex+0x234>
 8007728:	9b04      	ldr	r3, [sp, #16]
 800772a:	9a01      	ldr	r2, [sp, #4]
 800772c:	f843 2b04 	str.w	r2, [r3], #4
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	2300      	movs	r3, #0
 8007734:	469b      	mov	fp, r3
 8007736:	9301      	str	r3, [sp, #4]
 8007738:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800773c:	f7ff fecd 	bl	80074da <__hexdig_fun>
 8007740:	9b01      	ldr	r3, [sp, #4]
 8007742:	f000 000f 	and.w	r0, r0, #15
 8007746:	fa00 f00b 	lsl.w	r0, r0, fp
 800774a:	4303      	orrs	r3, r0
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	f10b 0b04 	add.w	fp, fp, #4
 8007752:	9b07      	ldr	r3, [sp, #28]
 8007754:	e00d      	b.n	8007772 <__gethex+0x26e>
 8007756:	9a08      	ldr	r2, [sp, #32]
 8007758:	1e73      	subs	r3, r6, #1
 800775a:	4413      	add	r3, r2
 800775c:	42bb      	cmp	r3, r7
 800775e:	d3e0      	bcc.n	8007722 <__gethex+0x21e>
 8007760:	4618      	mov	r0, r3
 8007762:	4652      	mov	r2, sl
 8007764:	9903      	ldr	r1, [sp, #12]
 8007766:	9309      	str	r3, [sp, #36]	; 0x24
 8007768:	f001 f91e 	bl	80089a8 <strncmp>
 800776c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800776e:	2800      	cmp	r0, #0
 8007770:	d1d7      	bne.n	8007722 <__gethex+0x21e>
 8007772:	461e      	mov	r6, r3
 8007774:	e78c      	b.n	8007690 <__gethex+0x18c>
 8007776:	f04f 0a03 	mov.w	sl, #3
 800777a:	e7b9      	b.n	80076f0 <__gethex+0x1ec>
 800777c:	da09      	bge.n	8007792 <__gethex+0x28e>
 800777e:	1bf7      	subs	r7, r6, r7
 8007780:	4621      	mov	r1, r4
 8007782:	463a      	mov	r2, r7
 8007784:	9802      	ldr	r0, [sp, #8]
 8007786:	f000 fc4d 	bl	8008024 <__lshift>
 800778a:	4604      	mov	r4, r0
 800778c:	1bed      	subs	r5, r5, r7
 800778e:	f100 0914 	add.w	r9, r0, #20
 8007792:	f04f 0a00 	mov.w	sl, #0
 8007796:	e7b0      	b.n	80076fa <__gethex+0x1f6>
 8007798:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800779c:	42a8      	cmp	r0, r5
 800779e:	dd72      	ble.n	8007886 <__gethex+0x382>
 80077a0:	1b45      	subs	r5, r0, r5
 80077a2:	42ae      	cmp	r6, r5
 80077a4:	dc35      	bgt.n	8007812 <__gethex+0x30e>
 80077a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d029      	beq.n	8007802 <__gethex+0x2fe>
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d02b      	beq.n	800780a <__gethex+0x306>
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d11c      	bne.n	80077f0 <__gethex+0x2ec>
 80077b6:	42ae      	cmp	r6, r5
 80077b8:	d11a      	bne.n	80077f0 <__gethex+0x2ec>
 80077ba:	2e01      	cmp	r6, #1
 80077bc:	d112      	bne.n	80077e4 <__gethex+0x2e0>
 80077be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077c2:	9a05      	ldr	r2, [sp, #20]
 80077c4:	2762      	movs	r7, #98	; 0x62
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	2301      	movs	r3, #1
 80077ca:	6123      	str	r3, [r4, #16]
 80077cc:	f8c9 3000 	str.w	r3, [r9]
 80077d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077d2:	601c      	str	r4, [r3, #0]
 80077d4:	e728      	b.n	8007628 <__gethex+0x124>
 80077d6:	bf00      	nop
 80077d8:	08009870 	.word	0x08009870
 80077dc:	080097f8 	.word	0x080097f8
 80077e0:	08009809 	.word	0x08009809
 80077e4:	4620      	mov	r0, r4
 80077e6:	1e71      	subs	r1, r6, #1
 80077e8:	f000 fe5b 	bl	80084a2 <__any_on>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d1e6      	bne.n	80077be <__gethex+0x2ba>
 80077f0:	4621      	mov	r1, r4
 80077f2:	9802      	ldr	r0, [sp, #8]
 80077f4:	f000 f9fe 	bl	8007bf4 <_Bfree>
 80077f8:	2300      	movs	r3, #0
 80077fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077fc:	2750      	movs	r7, #80	; 0x50
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	e712      	b.n	8007628 <__gethex+0x124>
 8007802:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f3      	bne.n	80077f0 <__gethex+0x2ec>
 8007808:	e7d9      	b.n	80077be <__gethex+0x2ba>
 800780a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1d6      	bne.n	80077be <__gethex+0x2ba>
 8007810:	e7ee      	b.n	80077f0 <__gethex+0x2ec>
 8007812:	1e6f      	subs	r7, r5, #1
 8007814:	f1ba 0f00 	cmp.w	sl, #0
 8007818:	d132      	bne.n	8007880 <__gethex+0x37c>
 800781a:	b127      	cbz	r7, 8007826 <__gethex+0x322>
 800781c:	4639      	mov	r1, r7
 800781e:	4620      	mov	r0, r4
 8007820:	f000 fe3f 	bl	80084a2 <__any_on>
 8007824:	4682      	mov	sl, r0
 8007826:	2101      	movs	r1, #1
 8007828:	117b      	asrs	r3, r7, #5
 800782a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800782e:	f007 071f 	and.w	r7, r7, #31
 8007832:	fa01 f707 	lsl.w	r7, r1, r7
 8007836:	421f      	tst	r7, r3
 8007838:	f04f 0702 	mov.w	r7, #2
 800783c:	4629      	mov	r1, r5
 800783e:	4620      	mov	r0, r4
 8007840:	bf18      	it	ne
 8007842:	f04a 0a02 	orrne.w	sl, sl, #2
 8007846:	1b76      	subs	r6, r6, r5
 8007848:	f7ff fdf4 	bl	8007434 <rshift>
 800784c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007850:	f1ba 0f00 	cmp.w	sl, #0
 8007854:	d048      	beq.n	80078e8 <__gethex+0x3e4>
 8007856:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d015      	beq.n	800788a <__gethex+0x386>
 800785e:	2b03      	cmp	r3, #3
 8007860:	d017      	beq.n	8007892 <__gethex+0x38e>
 8007862:	2b01      	cmp	r3, #1
 8007864:	d109      	bne.n	800787a <__gethex+0x376>
 8007866:	f01a 0f02 	tst.w	sl, #2
 800786a:	d006      	beq.n	800787a <__gethex+0x376>
 800786c:	f8d9 0000 	ldr.w	r0, [r9]
 8007870:	ea4a 0a00 	orr.w	sl, sl, r0
 8007874:	f01a 0f01 	tst.w	sl, #1
 8007878:	d10e      	bne.n	8007898 <__gethex+0x394>
 800787a:	f047 0710 	orr.w	r7, r7, #16
 800787e:	e033      	b.n	80078e8 <__gethex+0x3e4>
 8007880:	f04f 0a01 	mov.w	sl, #1
 8007884:	e7cf      	b.n	8007826 <__gethex+0x322>
 8007886:	2701      	movs	r7, #1
 8007888:	e7e2      	b.n	8007850 <__gethex+0x34c>
 800788a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800788c:	f1c3 0301 	rsb	r3, r3, #1
 8007890:	9315      	str	r3, [sp, #84]	; 0x54
 8007892:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0f0      	beq.n	800787a <__gethex+0x376>
 8007898:	f04f 0c00 	mov.w	ip, #0
 800789c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80078a0:	f104 0314 	add.w	r3, r4, #20
 80078a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80078a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80078b6:	d01c      	beq.n	80078f2 <__gethex+0x3ee>
 80078b8:	3201      	adds	r2, #1
 80078ba:	6002      	str	r2, [r0, #0]
 80078bc:	2f02      	cmp	r7, #2
 80078be:	f104 0314 	add.w	r3, r4, #20
 80078c2:	d13d      	bne.n	8007940 <__gethex+0x43c>
 80078c4:	f8d8 2000 	ldr.w	r2, [r8]
 80078c8:	3a01      	subs	r2, #1
 80078ca:	42b2      	cmp	r2, r6
 80078cc:	d10a      	bne.n	80078e4 <__gethex+0x3e0>
 80078ce:	2201      	movs	r2, #1
 80078d0:	1171      	asrs	r1, r6, #5
 80078d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078d6:	f006 061f 	and.w	r6, r6, #31
 80078da:	fa02 f606 	lsl.w	r6, r2, r6
 80078de:	421e      	tst	r6, r3
 80078e0:	bf18      	it	ne
 80078e2:	4617      	movne	r7, r2
 80078e4:	f047 0720 	orr.w	r7, r7, #32
 80078e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078ea:	601c      	str	r4, [r3, #0]
 80078ec:	9b05      	ldr	r3, [sp, #20]
 80078ee:	601d      	str	r5, [r3, #0]
 80078f0:	e69a      	b.n	8007628 <__gethex+0x124>
 80078f2:	4299      	cmp	r1, r3
 80078f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80078f8:	d8d8      	bhi.n	80078ac <__gethex+0x3a8>
 80078fa:	68a3      	ldr	r3, [r4, #8]
 80078fc:	459b      	cmp	fp, r3
 80078fe:	db17      	blt.n	8007930 <__gethex+0x42c>
 8007900:	6861      	ldr	r1, [r4, #4]
 8007902:	9802      	ldr	r0, [sp, #8]
 8007904:	3101      	adds	r1, #1
 8007906:	f000 f935 	bl	8007b74 <_Balloc>
 800790a:	4681      	mov	r9, r0
 800790c:	b918      	cbnz	r0, 8007916 <__gethex+0x412>
 800790e:	4602      	mov	r2, r0
 8007910:	2184      	movs	r1, #132	; 0x84
 8007912:	4b19      	ldr	r3, [pc, #100]	; (8007978 <__gethex+0x474>)
 8007914:	e6ab      	b.n	800766e <__gethex+0x16a>
 8007916:	6922      	ldr	r2, [r4, #16]
 8007918:	f104 010c 	add.w	r1, r4, #12
 800791c:	3202      	adds	r2, #2
 800791e:	0092      	lsls	r2, r2, #2
 8007920:	300c      	adds	r0, #12
 8007922:	f000 f919 	bl	8007b58 <memcpy>
 8007926:	4621      	mov	r1, r4
 8007928:	9802      	ldr	r0, [sp, #8]
 800792a:	f000 f963 	bl	8007bf4 <_Bfree>
 800792e:	464c      	mov	r4, r9
 8007930:	6923      	ldr	r3, [r4, #16]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	6122      	str	r2, [r4, #16]
 8007936:	2201      	movs	r2, #1
 8007938:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800793c:	615a      	str	r2, [r3, #20]
 800793e:	e7bd      	b.n	80078bc <__gethex+0x3b8>
 8007940:	6922      	ldr	r2, [r4, #16]
 8007942:	455a      	cmp	r2, fp
 8007944:	dd0b      	ble.n	800795e <__gethex+0x45a>
 8007946:	2101      	movs	r1, #1
 8007948:	4620      	mov	r0, r4
 800794a:	f7ff fd73 	bl	8007434 <rshift>
 800794e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007952:	3501      	adds	r5, #1
 8007954:	42ab      	cmp	r3, r5
 8007956:	f6ff aed4 	blt.w	8007702 <__gethex+0x1fe>
 800795a:	2701      	movs	r7, #1
 800795c:	e7c2      	b.n	80078e4 <__gethex+0x3e0>
 800795e:	f016 061f 	ands.w	r6, r6, #31
 8007962:	d0fa      	beq.n	800795a <__gethex+0x456>
 8007964:	4453      	add	r3, sl
 8007966:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800796a:	f000 f9f5 	bl	8007d58 <__hi0bits>
 800796e:	f1c6 0620 	rsb	r6, r6, #32
 8007972:	42b0      	cmp	r0, r6
 8007974:	dbe7      	blt.n	8007946 <__gethex+0x442>
 8007976:	e7f0      	b.n	800795a <__gethex+0x456>
 8007978:	080097f8 	.word	0x080097f8

0800797c <L_shift>:
 800797c:	f1c2 0208 	rsb	r2, r2, #8
 8007980:	0092      	lsls	r2, r2, #2
 8007982:	b570      	push	{r4, r5, r6, lr}
 8007984:	f1c2 0620 	rsb	r6, r2, #32
 8007988:	6843      	ldr	r3, [r0, #4]
 800798a:	6804      	ldr	r4, [r0, #0]
 800798c:	fa03 f506 	lsl.w	r5, r3, r6
 8007990:	432c      	orrs	r4, r5
 8007992:	40d3      	lsrs	r3, r2
 8007994:	6004      	str	r4, [r0, #0]
 8007996:	f840 3f04 	str.w	r3, [r0, #4]!
 800799a:	4288      	cmp	r0, r1
 800799c:	d3f4      	bcc.n	8007988 <L_shift+0xc>
 800799e:	bd70      	pop	{r4, r5, r6, pc}

080079a0 <__match>:
 80079a0:	b530      	push	{r4, r5, lr}
 80079a2:	6803      	ldr	r3, [r0, #0]
 80079a4:	3301      	adds	r3, #1
 80079a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079aa:	b914      	cbnz	r4, 80079b2 <__match+0x12>
 80079ac:	6003      	str	r3, [r0, #0]
 80079ae:	2001      	movs	r0, #1
 80079b0:	bd30      	pop	{r4, r5, pc}
 80079b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80079ba:	2d19      	cmp	r5, #25
 80079bc:	bf98      	it	ls
 80079be:	3220      	addls	r2, #32
 80079c0:	42a2      	cmp	r2, r4
 80079c2:	d0f0      	beq.n	80079a6 <__match+0x6>
 80079c4:	2000      	movs	r0, #0
 80079c6:	e7f3      	b.n	80079b0 <__match+0x10>

080079c8 <__hexnan>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	2500      	movs	r5, #0
 80079ce:	680b      	ldr	r3, [r1, #0]
 80079d0:	4682      	mov	sl, r0
 80079d2:	115e      	asrs	r6, r3, #5
 80079d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80079d8:	f013 031f 	ands.w	r3, r3, #31
 80079dc:	bf18      	it	ne
 80079de:	3604      	addne	r6, #4
 80079e0:	1f37      	subs	r7, r6, #4
 80079e2:	46b9      	mov	r9, r7
 80079e4:	463c      	mov	r4, r7
 80079e6:	46ab      	mov	fp, r5
 80079e8:	b087      	sub	sp, #28
 80079ea:	4690      	mov	r8, r2
 80079ec:	6802      	ldr	r2, [r0, #0]
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	f846 5c04 	str.w	r5, [r6, #-4]
 80079f4:	9502      	str	r5, [sp, #8]
 80079f6:	7851      	ldrb	r1, [r2, #1]
 80079f8:	1c53      	adds	r3, r2, #1
 80079fa:	9303      	str	r3, [sp, #12]
 80079fc:	b341      	cbz	r1, 8007a50 <__hexnan+0x88>
 80079fe:	4608      	mov	r0, r1
 8007a00:	9205      	str	r2, [sp, #20]
 8007a02:	9104      	str	r1, [sp, #16]
 8007a04:	f7ff fd69 	bl	80074da <__hexdig_fun>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d14f      	bne.n	8007aac <__hexnan+0xe4>
 8007a0c:	9904      	ldr	r1, [sp, #16]
 8007a0e:	9a05      	ldr	r2, [sp, #20]
 8007a10:	2920      	cmp	r1, #32
 8007a12:	d818      	bhi.n	8007a46 <__hexnan+0x7e>
 8007a14:	9b02      	ldr	r3, [sp, #8]
 8007a16:	459b      	cmp	fp, r3
 8007a18:	dd13      	ble.n	8007a42 <__hexnan+0x7a>
 8007a1a:	454c      	cmp	r4, r9
 8007a1c:	d206      	bcs.n	8007a2c <__hexnan+0x64>
 8007a1e:	2d07      	cmp	r5, #7
 8007a20:	dc04      	bgt.n	8007a2c <__hexnan+0x64>
 8007a22:	462a      	mov	r2, r5
 8007a24:	4649      	mov	r1, r9
 8007a26:	4620      	mov	r0, r4
 8007a28:	f7ff ffa8 	bl	800797c <L_shift>
 8007a2c:	4544      	cmp	r4, r8
 8007a2e:	d950      	bls.n	8007ad2 <__hexnan+0x10a>
 8007a30:	2300      	movs	r3, #0
 8007a32:	f1a4 0904 	sub.w	r9, r4, #4
 8007a36:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a3a:	461d      	mov	r5, r3
 8007a3c:	464c      	mov	r4, r9
 8007a3e:	f8cd b008 	str.w	fp, [sp, #8]
 8007a42:	9a03      	ldr	r2, [sp, #12]
 8007a44:	e7d7      	b.n	80079f6 <__hexnan+0x2e>
 8007a46:	2929      	cmp	r1, #41	; 0x29
 8007a48:	d156      	bne.n	8007af8 <__hexnan+0x130>
 8007a4a:	3202      	adds	r2, #2
 8007a4c:	f8ca 2000 	str.w	r2, [sl]
 8007a50:	f1bb 0f00 	cmp.w	fp, #0
 8007a54:	d050      	beq.n	8007af8 <__hexnan+0x130>
 8007a56:	454c      	cmp	r4, r9
 8007a58:	d206      	bcs.n	8007a68 <__hexnan+0xa0>
 8007a5a:	2d07      	cmp	r5, #7
 8007a5c:	dc04      	bgt.n	8007a68 <__hexnan+0xa0>
 8007a5e:	462a      	mov	r2, r5
 8007a60:	4649      	mov	r1, r9
 8007a62:	4620      	mov	r0, r4
 8007a64:	f7ff ff8a 	bl	800797c <L_shift>
 8007a68:	4544      	cmp	r4, r8
 8007a6a:	d934      	bls.n	8007ad6 <__hexnan+0x10e>
 8007a6c:	4623      	mov	r3, r4
 8007a6e:	f1a8 0204 	sub.w	r2, r8, #4
 8007a72:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a76:	429f      	cmp	r7, r3
 8007a78:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a7c:	d2f9      	bcs.n	8007a72 <__hexnan+0xaa>
 8007a7e:	1b3b      	subs	r3, r7, r4
 8007a80:	f023 0303 	bic.w	r3, r3, #3
 8007a84:	3304      	adds	r3, #4
 8007a86:	3401      	adds	r4, #1
 8007a88:	3e03      	subs	r6, #3
 8007a8a:	42b4      	cmp	r4, r6
 8007a8c:	bf88      	it	hi
 8007a8e:	2304      	movhi	r3, #4
 8007a90:	2200      	movs	r2, #0
 8007a92:	4443      	add	r3, r8
 8007a94:	f843 2b04 	str.w	r2, [r3], #4
 8007a98:	429f      	cmp	r7, r3
 8007a9a:	d2fb      	bcs.n	8007a94 <__hexnan+0xcc>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	b91b      	cbnz	r3, 8007aa8 <__hexnan+0xe0>
 8007aa0:	4547      	cmp	r7, r8
 8007aa2:	d127      	bne.n	8007af4 <__hexnan+0x12c>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	2005      	movs	r0, #5
 8007aaa:	e026      	b.n	8007afa <__hexnan+0x132>
 8007aac:	3501      	adds	r5, #1
 8007aae:	2d08      	cmp	r5, #8
 8007ab0:	f10b 0b01 	add.w	fp, fp, #1
 8007ab4:	dd06      	ble.n	8007ac4 <__hexnan+0xfc>
 8007ab6:	4544      	cmp	r4, r8
 8007ab8:	d9c3      	bls.n	8007a42 <__hexnan+0x7a>
 8007aba:	2300      	movs	r3, #0
 8007abc:	2501      	movs	r5, #1
 8007abe:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ac2:	3c04      	subs	r4, #4
 8007ac4:	6822      	ldr	r2, [r4, #0]
 8007ac6:	f000 000f 	and.w	r0, r0, #15
 8007aca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007ace:	6022      	str	r2, [r4, #0]
 8007ad0:	e7b7      	b.n	8007a42 <__hexnan+0x7a>
 8007ad2:	2508      	movs	r5, #8
 8007ad4:	e7b5      	b.n	8007a42 <__hexnan+0x7a>
 8007ad6:	9b01      	ldr	r3, [sp, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0df      	beq.n	8007a9c <__hexnan+0xd4>
 8007adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ae0:	f1c3 0320 	rsb	r3, r3, #32
 8007ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007aec:	401a      	ands	r2, r3
 8007aee:	f846 2c04 	str.w	r2, [r6, #-4]
 8007af2:	e7d3      	b.n	8007a9c <__hexnan+0xd4>
 8007af4:	3f04      	subs	r7, #4
 8007af6:	e7d1      	b.n	8007a9c <__hexnan+0xd4>
 8007af8:	2004      	movs	r0, #4
 8007afa:	b007      	add	sp, #28
 8007afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b00 <_localeconv_r>:
 8007b00:	4800      	ldr	r0, [pc, #0]	; (8007b04 <_localeconv_r+0x4>)
 8007b02:	4770      	bx	lr
 8007b04:	20000164 	.word	0x20000164

08007b08 <malloc>:
 8007b08:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <malloc+0xc>)
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	6818      	ldr	r0, [r3, #0]
 8007b0e:	f000 bd65 	b.w	80085dc <_malloc_r>
 8007b12:	bf00      	nop
 8007b14:	2000000c 	.word	0x2000000c

08007b18 <__ascii_mbtowc>:
 8007b18:	b082      	sub	sp, #8
 8007b1a:	b901      	cbnz	r1, 8007b1e <__ascii_mbtowc+0x6>
 8007b1c:	a901      	add	r1, sp, #4
 8007b1e:	b142      	cbz	r2, 8007b32 <__ascii_mbtowc+0x1a>
 8007b20:	b14b      	cbz	r3, 8007b36 <__ascii_mbtowc+0x1e>
 8007b22:	7813      	ldrb	r3, [r2, #0]
 8007b24:	600b      	str	r3, [r1, #0]
 8007b26:	7812      	ldrb	r2, [r2, #0]
 8007b28:	1e10      	subs	r0, r2, #0
 8007b2a:	bf18      	it	ne
 8007b2c:	2001      	movne	r0, #1
 8007b2e:	b002      	add	sp, #8
 8007b30:	4770      	bx	lr
 8007b32:	4610      	mov	r0, r2
 8007b34:	e7fb      	b.n	8007b2e <__ascii_mbtowc+0x16>
 8007b36:	f06f 0001 	mvn.w	r0, #1
 8007b3a:	e7f8      	b.n	8007b2e <__ascii_mbtowc+0x16>

08007b3c <memchr>:
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	b510      	push	{r4, lr}
 8007b40:	b2c9      	uxtb	r1, r1
 8007b42:	4402      	add	r2, r0
 8007b44:	4293      	cmp	r3, r2
 8007b46:	4618      	mov	r0, r3
 8007b48:	d101      	bne.n	8007b4e <memchr+0x12>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e003      	b.n	8007b56 <memchr+0x1a>
 8007b4e:	7804      	ldrb	r4, [r0, #0]
 8007b50:	3301      	adds	r3, #1
 8007b52:	428c      	cmp	r4, r1
 8007b54:	d1f6      	bne.n	8007b44 <memchr+0x8>
 8007b56:	bd10      	pop	{r4, pc}

08007b58 <memcpy>:
 8007b58:	440a      	add	r2, r1
 8007b5a:	4291      	cmp	r1, r2
 8007b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b60:	d100      	bne.n	8007b64 <memcpy+0xc>
 8007b62:	4770      	bx	lr
 8007b64:	b510      	push	{r4, lr}
 8007b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b6a:	4291      	cmp	r1, r2
 8007b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b70:	d1f9      	bne.n	8007b66 <memcpy+0xe>
 8007b72:	bd10      	pop	{r4, pc}

08007b74 <_Balloc>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b78:	4604      	mov	r4, r0
 8007b7a:	460d      	mov	r5, r1
 8007b7c:	b976      	cbnz	r6, 8007b9c <_Balloc+0x28>
 8007b7e:	2010      	movs	r0, #16
 8007b80:	f7ff ffc2 	bl	8007b08 <malloc>
 8007b84:	4602      	mov	r2, r0
 8007b86:	6260      	str	r0, [r4, #36]	; 0x24
 8007b88:	b920      	cbnz	r0, 8007b94 <_Balloc+0x20>
 8007b8a:	2166      	movs	r1, #102	; 0x66
 8007b8c:	4b17      	ldr	r3, [pc, #92]	; (8007bec <_Balloc+0x78>)
 8007b8e:	4818      	ldr	r0, [pc, #96]	; (8007bf0 <_Balloc+0x7c>)
 8007b90:	f000 ff2c 	bl	80089ec <__assert_func>
 8007b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b98:	6006      	str	r6, [r0, #0]
 8007b9a:	60c6      	str	r6, [r0, #12]
 8007b9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b9e:	68f3      	ldr	r3, [r6, #12]
 8007ba0:	b183      	cbz	r3, 8007bc4 <_Balloc+0x50>
 8007ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007baa:	b9b8      	cbnz	r0, 8007bdc <_Balloc+0x68>
 8007bac:	2101      	movs	r1, #1
 8007bae:	fa01 f605 	lsl.w	r6, r1, r5
 8007bb2:	1d72      	adds	r2, r6, #5
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	0092      	lsls	r2, r2, #2
 8007bb8:	f000 fc94 	bl	80084e4 <_calloc_r>
 8007bbc:	b160      	cbz	r0, 8007bd8 <_Balloc+0x64>
 8007bbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bc2:	e00e      	b.n	8007be2 <_Balloc+0x6e>
 8007bc4:	2221      	movs	r2, #33	; 0x21
 8007bc6:	2104      	movs	r1, #4
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 fc8b 	bl	80084e4 <_calloc_r>
 8007bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bd0:	60f0      	str	r0, [r6, #12]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e4      	bne.n	8007ba2 <_Balloc+0x2e>
 8007bd8:	2000      	movs	r0, #0
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	6802      	ldr	r2, [r0, #0]
 8007bde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007be2:	2300      	movs	r3, #0
 8007be4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007be8:	e7f7      	b.n	8007bda <_Balloc+0x66>
 8007bea:	bf00      	nop
 8007bec:	08009786 	.word	0x08009786
 8007bf0:	08009884 	.word	0x08009884

08007bf4 <_Bfree>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	b976      	cbnz	r6, 8007c1c <_Bfree+0x28>
 8007bfe:	2010      	movs	r0, #16
 8007c00:	f7ff ff82 	bl	8007b08 <malloc>
 8007c04:	4602      	mov	r2, r0
 8007c06:	6268      	str	r0, [r5, #36]	; 0x24
 8007c08:	b920      	cbnz	r0, 8007c14 <_Bfree+0x20>
 8007c0a:	218a      	movs	r1, #138	; 0x8a
 8007c0c:	4b08      	ldr	r3, [pc, #32]	; (8007c30 <_Bfree+0x3c>)
 8007c0e:	4809      	ldr	r0, [pc, #36]	; (8007c34 <_Bfree+0x40>)
 8007c10:	f000 feec 	bl	80089ec <__assert_func>
 8007c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c18:	6006      	str	r6, [r0, #0]
 8007c1a:	60c6      	str	r6, [r0, #12]
 8007c1c:	b13c      	cbz	r4, 8007c2e <_Bfree+0x3a>
 8007c1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c20:	6862      	ldr	r2, [r4, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c28:	6021      	str	r1, [r4, #0]
 8007c2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	08009786 	.word	0x08009786
 8007c34:	08009884 	.word	0x08009884

08007c38 <__multadd>:
 8007c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3c:	4607      	mov	r7, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	461e      	mov	r6, r3
 8007c42:	2000      	movs	r0, #0
 8007c44:	690d      	ldr	r5, [r1, #16]
 8007c46:	f101 0c14 	add.w	ip, r1, #20
 8007c4a:	f8dc 3000 	ldr.w	r3, [ip]
 8007c4e:	3001      	adds	r0, #1
 8007c50:	b299      	uxth	r1, r3
 8007c52:	fb02 6101 	mla	r1, r2, r1, r6
 8007c56:	0c1e      	lsrs	r6, r3, #16
 8007c58:	0c0b      	lsrs	r3, r1, #16
 8007c5a:	fb02 3306 	mla	r3, r2, r6, r3
 8007c5e:	b289      	uxth	r1, r1
 8007c60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c64:	4285      	cmp	r5, r0
 8007c66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c6a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c6e:	dcec      	bgt.n	8007c4a <__multadd+0x12>
 8007c70:	b30e      	cbz	r6, 8007cb6 <__multadd+0x7e>
 8007c72:	68a3      	ldr	r3, [r4, #8]
 8007c74:	42ab      	cmp	r3, r5
 8007c76:	dc19      	bgt.n	8007cac <__multadd+0x74>
 8007c78:	6861      	ldr	r1, [r4, #4]
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	3101      	adds	r1, #1
 8007c7e:	f7ff ff79 	bl	8007b74 <_Balloc>
 8007c82:	4680      	mov	r8, r0
 8007c84:	b928      	cbnz	r0, 8007c92 <__multadd+0x5a>
 8007c86:	4602      	mov	r2, r0
 8007c88:	21b5      	movs	r1, #181	; 0xb5
 8007c8a:	4b0c      	ldr	r3, [pc, #48]	; (8007cbc <__multadd+0x84>)
 8007c8c:	480c      	ldr	r0, [pc, #48]	; (8007cc0 <__multadd+0x88>)
 8007c8e:	f000 fead 	bl	80089ec <__assert_func>
 8007c92:	6922      	ldr	r2, [r4, #16]
 8007c94:	f104 010c 	add.w	r1, r4, #12
 8007c98:	3202      	adds	r2, #2
 8007c9a:	0092      	lsls	r2, r2, #2
 8007c9c:	300c      	adds	r0, #12
 8007c9e:	f7ff ff5b 	bl	8007b58 <memcpy>
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f7ff ffa5 	bl	8007bf4 <_Bfree>
 8007caa:	4644      	mov	r4, r8
 8007cac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cb0:	3501      	adds	r5, #1
 8007cb2:	615e      	str	r6, [r3, #20]
 8007cb4:	6125      	str	r5, [r4, #16]
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cbc:	080097f8 	.word	0x080097f8
 8007cc0:	08009884 	.word	0x08009884

08007cc4 <__s2b>:
 8007cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc8:	4615      	mov	r5, r2
 8007cca:	2209      	movs	r2, #9
 8007ccc:	461f      	mov	r7, r3
 8007cce:	3308      	adds	r3, #8
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	2201      	movs	r2, #1
 8007cda:	2100      	movs	r1, #0
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	db09      	blt.n	8007cf4 <__s2b+0x30>
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f7ff ff47 	bl	8007b74 <_Balloc>
 8007ce6:	b940      	cbnz	r0, 8007cfa <__s2b+0x36>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	21ce      	movs	r1, #206	; 0xce
 8007cec:	4b18      	ldr	r3, [pc, #96]	; (8007d50 <__s2b+0x8c>)
 8007cee:	4819      	ldr	r0, [pc, #100]	; (8007d54 <__s2b+0x90>)
 8007cf0:	f000 fe7c 	bl	80089ec <__assert_func>
 8007cf4:	0052      	lsls	r2, r2, #1
 8007cf6:	3101      	adds	r1, #1
 8007cf8:	e7f0      	b.n	8007cdc <__s2b+0x18>
 8007cfa:	9b08      	ldr	r3, [sp, #32]
 8007cfc:	2d09      	cmp	r5, #9
 8007cfe:	6143      	str	r3, [r0, #20]
 8007d00:	f04f 0301 	mov.w	r3, #1
 8007d04:	6103      	str	r3, [r0, #16]
 8007d06:	dd16      	ble.n	8007d36 <__s2b+0x72>
 8007d08:	f104 0909 	add.w	r9, r4, #9
 8007d0c:	46c8      	mov	r8, r9
 8007d0e:	442c      	add	r4, r5
 8007d10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d14:	4601      	mov	r1, r0
 8007d16:	220a      	movs	r2, #10
 8007d18:	4630      	mov	r0, r6
 8007d1a:	3b30      	subs	r3, #48	; 0x30
 8007d1c:	f7ff ff8c 	bl	8007c38 <__multadd>
 8007d20:	45a0      	cmp	r8, r4
 8007d22:	d1f5      	bne.n	8007d10 <__s2b+0x4c>
 8007d24:	f1a5 0408 	sub.w	r4, r5, #8
 8007d28:	444c      	add	r4, r9
 8007d2a:	1b2d      	subs	r5, r5, r4
 8007d2c:	1963      	adds	r3, r4, r5
 8007d2e:	42bb      	cmp	r3, r7
 8007d30:	db04      	blt.n	8007d3c <__s2b+0x78>
 8007d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d36:	2509      	movs	r5, #9
 8007d38:	340a      	adds	r4, #10
 8007d3a:	e7f6      	b.n	8007d2a <__s2b+0x66>
 8007d3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d40:	4601      	mov	r1, r0
 8007d42:	220a      	movs	r2, #10
 8007d44:	4630      	mov	r0, r6
 8007d46:	3b30      	subs	r3, #48	; 0x30
 8007d48:	f7ff ff76 	bl	8007c38 <__multadd>
 8007d4c:	e7ee      	b.n	8007d2c <__s2b+0x68>
 8007d4e:	bf00      	nop
 8007d50:	080097f8 	.word	0x080097f8
 8007d54:	08009884 	.word	0x08009884

08007d58 <__hi0bits>:
 8007d58:	0c02      	lsrs	r2, r0, #16
 8007d5a:	0412      	lsls	r2, r2, #16
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	b9ca      	cbnz	r2, 8007d94 <__hi0bits+0x3c>
 8007d60:	0403      	lsls	r3, r0, #16
 8007d62:	2010      	movs	r0, #16
 8007d64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d68:	bf04      	itt	eq
 8007d6a:	021b      	lsleq	r3, r3, #8
 8007d6c:	3008      	addeq	r0, #8
 8007d6e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d72:	bf04      	itt	eq
 8007d74:	011b      	lsleq	r3, r3, #4
 8007d76:	3004      	addeq	r0, #4
 8007d78:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d7c:	bf04      	itt	eq
 8007d7e:	009b      	lsleq	r3, r3, #2
 8007d80:	3002      	addeq	r0, #2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	db05      	blt.n	8007d92 <__hi0bits+0x3a>
 8007d86:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007d8a:	f100 0001 	add.w	r0, r0, #1
 8007d8e:	bf08      	it	eq
 8007d90:	2020      	moveq	r0, #32
 8007d92:	4770      	bx	lr
 8007d94:	2000      	movs	r0, #0
 8007d96:	e7e5      	b.n	8007d64 <__hi0bits+0xc>

08007d98 <__lo0bits>:
 8007d98:	6803      	ldr	r3, [r0, #0]
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	f013 0007 	ands.w	r0, r3, #7
 8007da0:	d00b      	beq.n	8007dba <__lo0bits+0x22>
 8007da2:	07d9      	lsls	r1, r3, #31
 8007da4:	d421      	bmi.n	8007dea <__lo0bits+0x52>
 8007da6:	0798      	lsls	r0, r3, #30
 8007da8:	bf49      	itett	mi
 8007daa:	085b      	lsrmi	r3, r3, #1
 8007dac:	089b      	lsrpl	r3, r3, #2
 8007dae:	2001      	movmi	r0, #1
 8007db0:	6013      	strmi	r3, [r2, #0]
 8007db2:	bf5c      	itt	pl
 8007db4:	2002      	movpl	r0, #2
 8007db6:	6013      	strpl	r3, [r2, #0]
 8007db8:	4770      	bx	lr
 8007dba:	b299      	uxth	r1, r3
 8007dbc:	b909      	cbnz	r1, 8007dc2 <__lo0bits+0x2a>
 8007dbe:	2010      	movs	r0, #16
 8007dc0:	0c1b      	lsrs	r3, r3, #16
 8007dc2:	b2d9      	uxtb	r1, r3
 8007dc4:	b909      	cbnz	r1, 8007dca <__lo0bits+0x32>
 8007dc6:	3008      	adds	r0, #8
 8007dc8:	0a1b      	lsrs	r3, r3, #8
 8007dca:	0719      	lsls	r1, r3, #28
 8007dcc:	bf04      	itt	eq
 8007dce:	091b      	lsreq	r3, r3, #4
 8007dd0:	3004      	addeq	r0, #4
 8007dd2:	0799      	lsls	r1, r3, #30
 8007dd4:	bf04      	itt	eq
 8007dd6:	089b      	lsreq	r3, r3, #2
 8007dd8:	3002      	addeq	r0, #2
 8007dda:	07d9      	lsls	r1, r3, #31
 8007ddc:	d403      	bmi.n	8007de6 <__lo0bits+0x4e>
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	f100 0001 	add.w	r0, r0, #1
 8007de4:	d003      	beq.n	8007dee <__lo0bits+0x56>
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	4770      	bx	lr
 8007dea:	2000      	movs	r0, #0
 8007dec:	4770      	bx	lr
 8007dee:	2020      	movs	r0, #32
 8007df0:	4770      	bx	lr
	...

08007df4 <__i2b>:
 8007df4:	b510      	push	{r4, lr}
 8007df6:	460c      	mov	r4, r1
 8007df8:	2101      	movs	r1, #1
 8007dfa:	f7ff febb 	bl	8007b74 <_Balloc>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	b928      	cbnz	r0, 8007e0e <__i2b+0x1a>
 8007e02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e06:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <__i2b+0x24>)
 8007e08:	4804      	ldr	r0, [pc, #16]	; (8007e1c <__i2b+0x28>)
 8007e0a:	f000 fdef 	bl	80089ec <__assert_func>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	6144      	str	r4, [r0, #20]
 8007e12:	6103      	str	r3, [r0, #16]
 8007e14:	bd10      	pop	{r4, pc}
 8007e16:	bf00      	nop
 8007e18:	080097f8 	.word	0x080097f8
 8007e1c:	08009884 	.word	0x08009884

08007e20 <__multiply>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	4691      	mov	r9, r2
 8007e26:	690a      	ldr	r2, [r1, #16]
 8007e28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	bfbe      	ittt	lt
 8007e32:	460b      	movlt	r3, r1
 8007e34:	464c      	movlt	r4, r9
 8007e36:	4699      	movlt	r9, r3
 8007e38:	6927      	ldr	r7, [r4, #16]
 8007e3a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e3e:	68a3      	ldr	r3, [r4, #8]
 8007e40:	6861      	ldr	r1, [r4, #4]
 8007e42:	eb07 060a 	add.w	r6, r7, sl
 8007e46:	42b3      	cmp	r3, r6
 8007e48:	b085      	sub	sp, #20
 8007e4a:	bfb8      	it	lt
 8007e4c:	3101      	addlt	r1, #1
 8007e4e:	f7ff fe91 	bl	8007b74 <_Balloc>
 8007e52:	b930      	cbnz	r0, 8007e62 <__multiply+0x42>
 8007e54:	4602      	mov	r2, r0
 8007e56:	f240 115d 	movw	r1, #349	; 0x15d
 8007e5a:	4b43      	ldr	r3, [pc, #268]	; (8007f68 <__multiply+0x148>)
 8007e5c:	4843      	ldr	r0, [pc, #268]	; (8007f6c <__multiply+0x14c>)
 8007e5e:	f000 fdc5 	bl	80089ec <__assert_func>
 8007e62:	f100 0514 	add.w	r5, r0, #20
 8007e66:	462b      	mov	r3, r5
 8007e68:	2200      	movs	r2, #0
 8007e6a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e6e:	4543      	cmp	r3, r8
 8007e70:	d321      	bcc.n	8007eb6 <__multiply+0x96>
 8007e72:	f104 0314 	add.w	r3, r4, #20
 8007e76:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e7a:	f109 0314 	add.w	r3, r9, #20
 8007e7e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e82:	9202      	str	r2, [sp, #8]
 8007e84:	1b3a      	subs	r2, r7, r4
 8007e86:	3a15      	subs	r2, #21
 8007e88:	f022 0203 	bic.w	r2, r2, #3
 8007e8c:	3204      	adds	r2, #4
 8007e8e:	f104 0115 	add.w	r1, r4, #21
 8007e92:	428f      	cmp	r7, r1
 8007e94:	bf38      	it	cc
 8007e96:	2204      	movcc	r2, #4
 8007e98:	9201      	str	r2, [sp, #4]
 8007e9a:	9a02      	ldr	r2, [sp, #8]
 8007e9c:	9303      	str	r3, [sp, #12]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d80c      	bhi.n	8007ebc <__multiply+0x9c>
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	dd03      	ble.n	8007eae <__multiply+0x8e>
 8007ea6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d059      	beq.n	8007f62 <__multiply+0x142>
 8007eae:	6106      	str	r6, [r0, #16]
 8007eb0:	b005      	add	sp, #20
 8007eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb6:	f843 2b04 	str.w	r2, [r3], #4
 8007eba:	e7d8      	b.n	8007e6e <__multiply+0x4e>
 8007ebc:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ec0:	f1ba 0f00 	cmp.w	sl, #0
 8007ec4:	d023      	beq.n	8007f0e <__multiply+0xee>
 8007ec6:	46a9      	mov	r9, r5
 8007ec8:	f04f 0c00 	mov.w	ip, #0
 8007ecc:	f104 0e14 	add.w	lr, r4, #20
 8007ed0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ed4:	f8d9 1000 	ldr.w	r1, [r9]
 8007ed8:	fa1f fb82 	uxth.w	fp, r2
 8007edc:	b289      	uxth	r1, r1
 8007ede:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ee2:	4461      	add	r1, ip
 8007ee4:	f8d9 c000 	ldr.w	ip, [r9]
 8007ee8:	0c12      	lsrs	r2, r2, #16
 8007eea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007eee:	fb0a c202 	mla	r2, sl, r2, ip
 8007ef2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007ef6:	b289      	uxth	r1, r1
 8007ef8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007efc:	4577      	cmp	r7, lr
 8007efe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f02:	f849 1b04 	str.w	r1, [r9], #4
 8007f06:	d8e3      	bhi.n	8007ed0 <__multiply+0xb0>
 8007f08:	9a01      	ldr	r2, [sp, #4]
 8007f0a:	f845 c002 	str.w	ip, [r5, r2]
 8007f0e:	9a03      	ldr	r2, [sp, #12]
 8007f10:	3304      	adds	r3, #4
 8007f12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f16:	f1b9 0f00 	cmp.w	r9, #0
 8007f1a:	d020      	beq.n	8007f5e <__multiply+0x13e>
 8007f1c:	46ae      	mov	lr, r5
 8007f1e:	f04f 0a00 	mov.w	sl, #0
 8007f22:	6829      	ldr	r1, [r5, #0]
 8007f24:	f104 0c14 	add.w	ip, r4, #20
 8007f28:	f8bc b000 	ldrh.w	fp, [ip]
 8007f2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f30:	b289      	uxth	r1, r1
 8007f32:	fb09 220b 	mla	r2, r9, fp, r2
 8007f36:	4492      	add	sl, r2
 8007f38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f3c:	f84e 1b04 	str.w	r1, [lr], #4
 8007f40:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f44:	f8be 1000 	ldrh.w	r1, [lr]
 8007f48:	0c12      	lsrs	r2, r2, #16
 8007f4a:	fb09 1102 	mla	r1, r9, r2, r1
 8007f4e:	4567      	cmp	r7, ip
 8007f50:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f58:	d8e6      	bhi.n	8007f28 <__multiply+0x108>
 8007f5a:	9a01      	ldr	r2, [sp, #4]
 8007f5c:	50a9      	str	r1, [r5, r2]
 8007f5e:	3504      	adds	r5, #4
 8007f60:	e79b      	b.n	8007e9a <__multiply+0x7a>
 8007f62:	3e01      	subs	r6, #1
 8007f64:	e79d      	b.n	8007ea2 <__multiply+0x82>
 8007f66:	bf00      	nop
 8007f68:	080097f8 	.word	0x080097f8
 8007f6c:	08009884 	.word	0x08009884

08007f70 <__pow5mult>:
 8007f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f74:	4615      	mov	r5, r2
 8007f76:	f012 0203 	ands.w	r2, r2, #3
 8007f7a:	4606      	mov	r6, r0
 8007f7c:	460f      	mov	r7, r1
 8007f7e:	d007      	beq.n	8007f90 <__pow5mult+0x20>
 8007f80:	4c25      	ldr	r4, [pc, #148]	; (8008018 <__pow5mult+0xa8>)
 8007f82:	3a01      	subs	r2, #1
 8007f84:	2300      	movs	r3, #0
 8007f86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f8a:	f7ff fe55 	bl	8007c38 <__multadd>
 8007f8e:	4607      	mov	r7, r0
 8007f90:	10ad      	asrs	r5, r5, #2
 8007f92:	d03d      	beq.n	8008010 <__pow5mult+0xa0>
 8007f94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f96:	b97c      	cbnz	r4, 8007fb8 <__pow5mult+0x48>
 8007f98:	2010      	movs	r0, #16
 8007f9a:	f7ff fdb5 	bl	8007b08 <malloc>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	6270      	str	r0, [r6, #36]	; 0x24
 8007fa2:	b928      	cbnz	r0, 8007fb0 <__pow5mult+0x40>
 8007fa4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fa8:	4b1c      	ldr	r3, [pc, #112]	; (800801c <__pow5mult+0xac>)
 8007faa:	481d      	ldr	r0, [pc, #116]	; (8008020 <__pow5mult+0xb0>)
 8007fac:	f000 fd1e 	bl	80089ec <__assert_func>
 8007fb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fb4:	6004      	str	r4, [r0, #0]
 8007fb6:	60c4      	str	r4, [r0, #12]
 8007fb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fc0:	b94c      	cbnz	r4, 8007fd6 <__pow5mult+0x66>
 8007fc2:	f240 2171 	movw	r1, #625	; 0x271
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7ff ff14 	bl	8007df4 <__i2b>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fd4:	6003      	str	r3, [r0, #0]
 8007fd6:	f04f 0900 	mov.w	r9, #0
 8007fda:	07eb      	lsls	r3, r5, #31
 8007fdc:	d50a      	bpl.n	8007ff4 <__pow5mult+0x84>
 8007fde:	4639      	mov	r1, r7
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f7ff ff1c 	bl	8007e20 <__multiply>
 8007fe8:	4680      	mov	r8, r0
 8007fea:	4639      	mov	r1, r7
 8007fec:	4630      	mov	r0, r6
 8007fee:	f7ff fe01 	bl	8007bf4 <_Bfree>
 8007ff2:	4647      	mov	r7, r8
 8007ff4:	106d      	asrs	r5, r5, #1
 8007ff6:	d00b      	beq.n	8008010 <__pow5mult+0xa0>
 8007ff8:	6820      	ldr	r0, [r4, #0]
 8007ffa:	b938      	cbnz	r0, 800800c <__pow5mult+0x9c>
 8007ffc:	4622      	mov	r2, r4
 8007ffe:	4621      	mov	r1, r4
 8008000:	4630      	mov	r0, r6
 8008002:	f7ff ff0d 	bl	8007e20 <__multiply>
 8008006:	6020      	str	r0, [r4, #0]
 8008008:	f8c0 9000 	str.w	r9, [r0]
 800800c:	4604      	mov	r4, r0
 800800e:	e7e4      	b.n	8007fda <__pow5mult+0x6a>
 8008010:	4638      	mov	r0, r7
 8008012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008016:	bf00      	nop
 8008018:	080099d0 	.word	0x080099d0
 800801c:	08009786 	.word	0x08009786
 8008020:	08009884 	.word	0x08009884

08008024 <__lshift>:
 8008024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008028:	460c      	mov	r4, r1
 800802a:	4607      	mov	r7, r0
 800802c:	4691      	mov	r9, r2
 800802e:	6923      	ldr	r3, [r4, #16]
 8008030:	6849      	ldr	r1, [r1, #4]
 8008032:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008036:	68a3      	ldr	r3, [r4, #8]
 8008038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800803c:	f108 0601 	add.w	r6, r8, #1
 8008040:	42b3      	cmp	r3, r6
 8008042:	db0b      	blt.n	800805c <__lshift+0x38>
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff fd95 	bl	8007b74 <_Balloc>
 800804a:	4605      	mov	r5, r0
 800804c:	b948      	cbnz	r0, 8008062 <__lshift+0x3e>
 800804e:	4602      	mov	r2, r0
 8008050:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008054:	4b29      	ldr	r3, [pc, #164]	; (80080fc <__lshift+0xd8>)
 8008056:	482a      	ldr	r0, [pc, #168]	; (8008100 <__lshift+0xdc>)
 8008058:	f000 fcc8 	bl	80089ec <__assert_func>
 800805c:	3101      	adds	r1, #1
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	e7ee      	b.n	8008040 <__lshift+0x1c>
 8008062:	2300      	movs	r3, #0
 8008064:	f100 0114 	add.w	r1, r0, #20
 8008068:	f100 0210 	add.w	r2, r0, #16
 800806c:	4618      	mov	r0, r3
 800806e:	4553      	cmp	r3, sl
 8008070:	db37      	blt.n	80080e2 <__lshift+0xbe>
 8008072:	6920      	ldr	r0, [r4, #16]
 8008074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008078:	f104 0314 	add.w	r3, r4, #20
 800807c:	f019 091f 	ands.w	r9, r9, #31
 8008080:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008084:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008088:	d02f      	beq.n	80080ea <__lshift+0xc6>
 800808a:	468a      	mov	sl, r1
 800808c:	f04f 0c00 	mov.w	ip, #0
 8008090:	f1c9 0e20 	rsb	lr, r9, #32
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	fa02 f209 	lsl.w	r2, r2, r9
 800809a:	ea42 020c 	orr.w	r2, r2, ip
 800809e:	f84a 2b04 	str.w	r2, [sl], #4
 80080a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080a6:	4298      	cmp	r0, r3
 80080a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080ac:	d8f2      	bhi.n	8008094 <__lshift+0x70>
 80080ae:	1b03      	subs	r3, r0, r4
 80080b0:	3b15      	subs	r3, #21
 80080b2:	f023 0303 	bic.w	r3, r3, #3
 80080b6:	3304      	adds	r3, #4
 80080b8:	f104 0215 	add.w	r2, r4, #21
 80080bc:	4290      	cmp	r0, r2
 80080be:	bf38      	it	cc
 80080c0:	2304      	movcc	r3, #4
 80080c2:	f841 c003 	str.w	ip, [r1, r3]
 80080c6:	f1bc 0f00 	cmp.w	ip, #0
 80080ca:	d001      	beq.n	80080d0 <__lshift+0xac>
 80080cc:	f108 0602 	add.w	r6, r8, #2
 80080d0:	3e01      	subs	r6, #1
 80080d2:	4638      	mov	r0, r7
 80080d4:	4621      	mov	r1, r4
 80080d6:	612e      	str	r6, [r5, #16]
 80080d8:	f7ff fd8c 	bl	8007bf4 <_Bfree>
 80080dc:	4628      	mov	r0, r5
 80080de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80080e6:	3301      	adds	r3, #1
 80080e8:	e7c1      	b.n	800806e <__lshift+0x4a>
 80080ea:	3904      	subs	r1, #4
 80080ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80080f0:	4298      	cmp	r0, r3
 80080f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80080f6:	d8f9      	bhi.n	80080ec <__lshift+0xc8>
 80080f8:	e7ea      	b.n	80080d0 <__lshift+0xac>
 80080fa:	bf00      	nop
 80080fc:	080097f8 	.word	0x080097f8
 8008100:	08009884 	.word	0x08009884

08008104 <__mcmp>:
 8008104:	4603      	mov	r3, r0
 8008106:	690a      	ldr	r2, [r1, #16]
 8008108:	6900      	ldr	r0, [r0, #16]
 800810a:	b530      	push	{r4, r5, lr}
 800810c:	1a80      	subs	r0, r0, r2
 800810e:	d10d      	bne.n	800812c <__mcmp+0x28>
 8008110:	3314      	adds	r3, #20
 8008112:	3114      	adds	r1, #20
 8008114:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008118:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800811c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008120:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008124:	4295      	cmp	r5, r2
 8008126:	d002      	beq.n	800812e <__mcmp+0x2a>
 8008128:	d304      	bcc.n	8008134 <__mcmp+0x30>
 800812a:	2001      	movs	r0, #1
 800812c:	bd30      	pop	{r4, r5, pc}
 800812e:	42a3      	cmp	r3, r4
 8008130:	d3f4      	bcc.n	800811c <__mcmp+0x18>
 8008132:	e7fb      	b.n	800812c <__mcmp+0x28>
 8008134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008138:	e7f8      	b.n	800812c <__mcmp+0x28>
	...

0800813c <__mdiff>:
 800813c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	460d      	mov	r5, r1
 8008142:	4607      	mov	r7, r0
 8008144:	4611      	mov	r1, r2
 8008146:	4628      	mov	r0, r5
 8008148:	4614      	mov	r4, r2
 800814a:	f7ff ffdb 	bl	8008104 <__mcmp>
 800814e:	1e06      	subs	r6, r0, #0
 8008150:	d111      	bne.n	8008176 <__mdiff+0x3a>
 8008152:	4631      	mov	r1, r6
 8008154:	4638      	mov	r0, r7
 8008156:	f7ff fd0d 	bl	8007b74 <_Balloc>
 800815a:	4602      	mov	r2, r0
 800815c:	b928      	cbnz	r0, 800816a <__mdiff+0x2e>
 800815e:	f240 2132 	movw	r1, #562	; 0x232
 8008162:	4b3a      	ldr	r3, [pc, #232]	; (800824c <__mdiff+0x110>)
 8008164:	483a      	ldr	r0, [pc, #232]	; (8008250 <__mdiff+0x114>)
 8008166:	f000 fc41 	bl	80089ec <__assert_func>
 800816a:	2301      	movs	r3, #1
 800816c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008170:	4610      	mov	r0, r2
 8008172:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008176:	bfa4      	itt	ge
 8008178:	4623      	movge	r3, r4
 800817a:	462c      	movge	r4, r5
 800817c:	4638      	mov	r0, r7
 800817e:	6861      	ldr	r1, [r4, #4]
 8008180:	bfa6      	itte	ge
 8008182:	461d      	movge	r5, r3
 8008184:	2600      	movge	r6, #0
 8008186:	2601      	movlt	r6, #1
 8008188:	f7ff fcf4 	bl	8007b74 <_Balloc>
 800818c:	4602      	mov	r2, r0
 800818e:	b918      	cbnz	r0, 8008198 <__mdiff+0x5c>
 8008190:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008194:	4b2d      	ldr	r3, [pc, #180]	; (800824c <__mdiff+0x110>)
 8008196:	e7e5      	b.n	8008164 <__mdiff+0x28>
 8008198:	f102 0814 	add.w	r8, r2, #20
 800819c:	46c2      	mov	sl, r8
 800819e:	f04f 0c00 	mov.w	ip, #0
 80081a2:	6927      	ldr	r7, [r4, #16]
 80081a4:	60c6      	str	r6, [r0, #12]
 80081a6:	692e      	ldr	r6, [r5, #16]
 80081a8:	f104 0014 	add.w	r0, r4, #20
 80081ac:	f105 0914 	add.w	r9, r5, #20
 80081b0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80081b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081b8:	3410      	adds	r4, #16
 80081ba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80081be:	f859 3b04 	ldr.w	r3, [r9], #4
 80081c2:	fa1f f18b 	uxth.w	r1, fp
 80081c6:	448c      	add	ip, r1
 80081c8:	b299      	uxth	r1, r3
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	ebac 0101 	sub.w	r1, ip, r1
 80081d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081d4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80081d8:	b289      	uxth	r1, r1
 80081da:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80081de:	454e      	cmp	r6, r9
 80081e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80081e4:	f84a 3b04 	str.w	r3, [sl], #4
 80081e8:	d8e7      	bhi.n	80081ba <__mdiff+0x7e>
 80081ea:	1b73      	subs	r3, r6, r5
 80081ec:	3b15      	subs	r3, #21
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	3515      	adds	r5, #21
 80081f4:	3304      	adds	r3, #4
 80081f6:	42ae      	cmp	r6, r5
 80081f8:	bf38      	it	cc
 80081fa:	2304      	movcc	r3, #4
 80081fc:	4418      	add	r0, r3
 80081fe:	4443      	add	r3, r8
 8008200:	461e      	mov	r6, r3
 8008202:	4605      	mov	r5, r0
 8008204:	4575      	cmp	r5, lr
 8008206:	d30e      	bcc.n	8008226 <__mdiff+0xea>
 8008208:	f10e 0103 	add.w	r1, lr, #3
 800820c:	1a09      	subs	r1, r1, r0
 800820e:	f021 0103 	bic.w	r1, r1, #3
 8008212:	3803      	subs	r0, #3
 8008214:	4586      	cmp	lr, r0
 8008216:	bf38      	it	cc
 8008218:	2100      	movcc	r1, #0
 800821a:	4419      	add	r1, r3
 800821c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008220:	b18b      	cbz	r3, 8008246 <__mdiff+0x10a>
 8008222:	6117      	str	r7, [r2, #16]
 8008224:	e7a4      	b.n	8008170 <__mdiff+0x34>
 8008226:	f855 8b04 	ldr.w	r8, [r5], #4
 800822a:	fa1f f188 	uxth.w	r1, r8
 800822e:	4461      	add	r1, ip
 8008230:	140c      	asrs	r4, r1, #16
 8008232:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008236:	b289      	uxth	r1, r1
 8008238:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800823c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008240:	f846 1b04 	str.w	r1, [r6], #4
 8008244:	e7de      	b.n	8008204 <__mdiff+0xc8>
 8008246:	3f01      	subs	r7, #1
 8008248:	e7e8      	b.n	800821c <__mdiff+0xe0>
 800824a:	bf00      	nop
 800824c:	080097f8 	.word	0x080097f8
 8008250:	08009884 	.word	0x08009884

08008254 <__ulp>:
 8008254:	4b11      	ldr	r3, [pc, #68]	; (800829c <__ulp+0x48>)
 8008256:	400b      	ands	r3, r1
 8008258:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800825c:	2b00      	cmp	r3, #0
 800825e:	dd02      	ble.n	8008266 <__ulp+0x12>
 8008260:	2000      	movs	r0, #0
 8008262:	4619      	mov	r1, r3
 8008264:	4770      	bx	lr
 8008266:	425b      	negs	r3, r3
 8008268:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800826c:	f04f 0000 	mov.w	r0, #0
 8008270:	f04f 0100 	mov.w	r1, #0
 8008274:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008278:	da04      	bge.n	8008284 <__ulp+0x30>
 800827a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800827e:	fa43 f102 	asr.w	r1, r3, r2
 8008282:	4770      	bx	lr
 8008284:	f1a2 0314 	sub.w	r3, r2, #20
 8008288:	2b1e      	cmp	r3, #30
 800828a:	bfd6      	itet	le
 800828c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008290:	2301      	movgt	r3, #1
 8008292:	fa22 f303 	lsrle.w	r3, r2, r3
 8008296:	4618      	mov	r0, r3
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	7ff00000 	.word	0x7ff00000

080082a0 <__b2d>:
 80082a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a4:	6907      	ldr	r7, [r0, #16]
 80082a6:	f100 0914 	add.w	r9, r0, #20
 80082aa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80082ae:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80082b2:	f1a7 0804 	sub.w	r8, r7, #4
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7ff fd4e 	bl	8007d58 <__hi0bits>
 80082bc:	f1c0 0320 	rsb	r3, r0, #32
 80082c0:	280a      	cmp	r0, #10
 80082c2:	600b      	str	r3, [r1, #0]
 80082c4:	491f      	ldr	r1, [pc, #124]	; (8008344 <__b2d+0xa4>)
 80082c6:	dc17      	bgt.n	80082f8 <__b2d+0x58>
 80082c8:	45c1      	cmp	r9, r8
 80082ca:	bf28      	it	cs
 80082cc:	2200      	movcs	r2, #0
 80082ce:	f1c0 0c0b 	rsb	ip, r0, #11
 80082d2:	fa26 f30c 	lsr.w	r3, r6, ip
 80082d6:	bf38      	it	cc
 80082d8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80082dc:	ea43 0501 	orr.w	r5, r3, r1
 80082e0:	f100 0315 	add.w	r3, r0, #21
 80082e4:	fa06 f303 	lsl.w	r3, r6, r3
 80082e8:	fa22 f20c 	lsr.w	r2, r2, ip
 80082ec:	ea43 0402 	orr.w	r4, r3, r2
 80082f0:	4620      	mov	r0, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f8:	45c1      	cmp	r9, r8
 80082fa:	bf2e      	itee	cs
 80082fc:	2200      	movcs	r2, #0
 80082fe:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008302:	f1a7 0808 	subcc.w	r8, r7, #8
 8008306:	f1b0 030b 	subs.w	r3, r0, #11
 800830a:	d016      	beq.n	800833a <__b2d+0x9a>
 800830c:	f1c3 0720 	rsb	r7, r3, #32
 8008310:	fa22 f107 	lsr.w	r1, r2, r7
 8008314:	45c8      	cmp	r8, r9
 8008316:	fa06 f603 	lsl.w	r6, r6, r3
 800831a:	ea46 0601 	orr.w	r6, r6, r1
 800831e:	bf94      	ite	ls
 8008320:	2100      	movls	r1, #0
 8008322:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008326:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800832a:	fa02 f003 	lsl.w	r0, r2, r3
 800832e:	40f9      	lsrs	r1, r7
 8008330:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008334:	ea40 0401 	orr.w	r4, r0, r1
 8008338:	e7da      	b.n	80082f0 <__b2d+0x50>
 800833a:	4614      	mov	r4, r2
 800833c:	ea46 0501 	orr.w	r5, r6, r1
 8008340:	e7d6      	b.n	80082f0 <__b2d+0x50>
 8008342:	bf00      	nop
 8008344:	3ff00000 	.word	0x3ff00000

08008348 <__d2b>:
 8008348:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800834c:	2101      	movs	r1, #1
 800834e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008352:	4690      	mov	r8, r2
 8008354:	461d      	mov	r5, r3
 8008356:	f7ff fc0d 	bl	8007b74 <_Balloc>
 800835a:	4604      	mov	r4, r0
 800835c:	b930      	cbnz	r0, 800836c <__d2b+0x24>
 800835e:	4602      	mov	r2, r0
 8008360:	f240 310a 	movw	r1, #778	; 0x30a
 8008364:	4b24      	ldr	r3, [pc, #144]	; (80083f8 <__d2b+0xb0>)
 8008366:	4825      	ldr	r0, [pc, #148]	; (80083fc <__d2b+0xb4>)
 8008368:	f000 fb40 	bl	80089ec <__assert_func>
 800836c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008370:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008374:	bb2d      	cbnz	r5, 80083c2 <__d2b+0x7a>
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	f1b8 0300 	subs.w	r3, r8, #0
 800837c:	d026      	beq.n	80083cc <__d2b+0x84>
 800837e:	4668      	mov	r0, sp
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	f7ff fd09 	bl	8007d98 <__lo0bits>
 8008386:	9900      	ldr	r1, [sp, #0]
 8008388:	b1f0      	cbz	r0, 80083c8 <__d2b+0x80>
 800838a:	9a01      	ldr	r2, [sp, #4]
 800838c:	f1c0 0320 	rsb	r3, r0, #32
 8008390:	fa02 f303 	lsl.w	r3, r2, r3
 8008394:	430b      	orrs	r3, r1
 8008396:	40c2      	lsrs	r2, r0
 8008398:	6163      	str	r3, [r4, #20]
 800839a:	9201      	str	r2, [sp, #4]
 800839c:	9b01      	ldr	r3, [sp, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bf14      	ite	ne
 80083a2:	2102      	movne	r1, #2
 80083a4:	2101      	moveq	r1, #1
 80083a6:	61a3      	str	r3, [r4, #24]
 80083a8:	6121      	str	r1, [r4, #16]
 80083aa:	b1c5      	cbz	r5, 80083de <__d2b+0x96>
 80083ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80083b0:	4405      	add	r5, r0
 80083b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083b6:	603d      	str	r5, [r7, #0]
 80083b8:	6030      	str	r0, [r6, #0]
 80083ba:	4620      	mov	r0, r4
 80083bc:	b002      	add	sp, #8
 80083be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083c6:	e7d6      	b.n	8008376 <__d2b+0x2e>
 80083c8:	6161      	str	r1, [r4, #20]
 80083ca:	e7e7      	b.n	800839c <__d2b+0x54>
 80083cc:	a801      	add	r0, sp, #4
 80083ce:	f7ff fce3 	bl	8007d98 <__lo0bits>
 80083d2:	2101      	movs	r1, #1
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	6121      	str	r1, [r4, #16]
 80083d8:	6163      	str	r3, [r4, #20]
 80083da:	3020      	adds	r0, #32
 80083dc:	e7e5      	b.n	80083aa <__d2b+0x62>
 80083de:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80083e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083e6:	6038      	str	r0, [r7, #0]
 80083e8:	6918      	ldr	r0, [r3, #16]
 80083ea:	f7ff fcb5 	bl	8007d58 <__hi0bits>
 80083ee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80083f2:	6031      	str	r1, [r6, #0]
 80083f4:	e7e1      	b.n	80083ba <__d2b+0x72>
 80083f6:	bf00      	nop
 80083f8:	080097f8 	.word	0x080097f8
 80083fc:	08009884 	.word	0x08009884

08008400 <__ratio>:
 8008400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	4688      	mov	r8, r1
 8008406:	4669      	mov	r1, sp
 8008408:	4681      	mov	r9, r0
 800840a:	f7ff ff49 	bl	80082a0 <__b2d>
 800840e:	460f      	mov	r7, r1
 8008410:	4604      	mov	r4, r0
 8008412:	460d      	mov	r5, r1
 8008414:	4640      	mov	r0, r8
 8008416:	a901      	add	r1, sp, #4
 8008418:	f7ff ff42 	bl	80082a0 <__b2d>
 800841c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008420:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008424:	468b      	mov	fp, r1
 8008426:	eba3 0c02 	sub.w	ip, r3, r2
 800842a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008434:	2b00      	cmp	r3, #0
 8008436:	bfd5      	itete	le
 8008438:	460a      	movle	r2, r1
 800843a:	462a      	movgt	r2, r5
 800843c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008440:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008444:	bfd8      	it	le
 8008446:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800844a:	465b      	mov	r3, fp
 800844c:	4602      	mov	r2, r0
 800844e:	4639      	mov	r1, r7
 8008450:	4620      	mov	r0, r4
 8008452:	f7f8 f983 	bl	800075c <__aeabi_ddiv>
 8008456:	b003      	add	sp, #12
 8008458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800845c <__copybits>:
 800845c:	3901      	subs	r1, #1
 800845e:	b570      	push	{r4, r5, r6, lr}
 8008460:	1149      	asrs	r1, r1, #5
 8008462:	6914      	ldr	r4, [r2, #16]
 8008464:	3101      	adds	r1, #1
 8008466:	f102 0314 	add.w	r3, r2, #20
 800846a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800846e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008472:	1f05      	subs	r5, r0, #4
 8008474:	42a3      	cmp	r3, r4
 8008476:	d30c      	bcc.n	8008492 <__copybits+0x36>
 8008478:	1aa3      	subs	r3, r4, r2
 800847a:	3b11      	subs	r3, #17
 800847c:	f023 0303 	bic.w	r3, r3, #3
 8008480:	3211      	adds	r2, #17
 8008482:	42a2      	cmp	r2, r4
 8008484:	bf88      	it	hi
 8008486:	2300      	movhi	r3, #0
 8008488:	4418      	add	r0, r3
 800848a:	2300      	movs	r3, #0
 800848c:	4288      	cmp	r0, r1
 800848e:	d305      	bcc.n	800849c <__copybits+0x40>
 8008490:	bd70      	pop	{r4, r5, r6, pc}
 8008492:	f853 6b04 	ldr.w	r6, [r3], #4
 8008496:	f845 6f04 	str.w	r6, [r5, #4]!
 800849a:	e7eb      	b.n	8008474 <__copybits+0x18>
 800849c:	f840 3b04 	str.w	r3, [r0], #4
 80084a0:	e7f4      	b.n	800848c <__copybits+0x30>

080084a2 <__any_on>:
 80084a2:	f100 0214 	add.w	r2, r0, #20
 80084a6:	6900      	ldr	r0, [r0, #16]
 80084a8:	114b      	asrs	r3, r1, #5
 80084aa:	4298      	cmp	r0, r3
 80084ac:	b510      	push	{r4, lr}
 80084ae:	db11      	blt.n	80084d4 <__any_on+0x32>
 80084b0:	dd0a      	ble.n	80084c8 <__any_on+0x26>
 80084b2:	f011 011f 	ands.w	r1, r1, #31
 80084b6:	d007      	beq.n	80084c8 <__any_on+0x26>
 80084b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084bc:	fa24 f001 	lsr.w	r0, r4, r1
 80084c0:	fa00 f101 	lsl.w	r1, r0, r1
 80084c4:	428c      	cmp	r4, r1
 80084c6:	d10b      	bne.n	80084e0 <__any_on+0x3e>
 80084c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d803      	bhi.n	80084d8 <__any_on+0x36>
 80084d0:	2000      	movs	r0, #0
 80084d2:	bd10      	pop	{r4, pc}
 80084d4:	4603      	mov	r3, r0
 80084d6:	e7f7      	b.n	80084c8 <__any_on+0x26>
 80084d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084dc:	2900      	cmp	r1, #0
 80084de:	d0f5      	beq.n	80084cc <__any_on+0x2a>
 80084e0:	2001      	movs	r0, #1
 80084e2:	e7f6      	b.n	80084d2 <__any_on+0x30>

080084e4 <_calloc_r>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	fba1 5402 	umull	r5, r4, r1, r2
 80084ea:	b934      	cbnz	r4, 80084fa <_calloc_r+0x16>
 80084ec:	4629      	mov	r1, r5
 80084ee:	f000 f875 	bl	80085dc <_malloc_r>
 80084f2:	4606      	mov	r6, r0
 80084f4:	b928      	cbnz	r0, 8008502 <_calloc_r+0x1e>
 80084f6:	4630      	mov	r0, r6
 80084f8:	bd70      	pop	{r4, r5, r6, pc}
 80084fa:	220c      	movs	r2, #12
 80084fc:	2600      	movs	r6, #0
 80084fe:	6002      	str	r2, [r0, #0]
 8008500:	e7f9      	b.n	80084f6 <_calloc_r+0x12>
 8008502:	462a      	mov	r2, r5
 8008504:	4621      	mov	r1, r4
 8008506:	f7fc fbf3 	bl	8004cf0 <memset>
 800850a:	e7f4      	b.n	80084f6 <_calloc_r+0x12>

0800850c <_free_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4605      	mov	r5, r0
 8008510:	2900      	cmp	r1, #0
 8008512:	d040      	beq.n	8008596 <_free_r+0x8a>
 8008514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008518:	1f0c      	subs	r4, r1, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	bfb8      	it	lt
 800851e:	18e4      	addlt	r4, r4, r3
 8008520:	f000 faae 	bl	8008a80 <__malloc_lock>
 8008524:	4a1c      	ldr	r2, [pc, #112]	; (8008598 <_free_r+0x8c>)
 8008526:	6813      	ldr	r3, [r2, #0]
 8008528:	b933      	cbnz	r3, 8008538 <_free_r+0x2c>
 800852a:	6063      	str	r3, [r4, #4]
 800852c:	6014      	str	r4, [r2, #0]
 800852e:	4628      	mov	r0, r5
 8008530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008534:	f000 baaa 	b.w	8008a8c <__malloc_unlock>
 8008538:	42a3      	cmp	r3, r4
 800853a:	d908      	bls.n	800854e <_free_r+0x42>
 800853c:	6820      	ldr	r0, [r4, #0]
 800853e:	1821      	adds	r1, r4, r0
 8008540:	428b      	cmp	r3, r1
 8008542:	bf01      	itttt	eq
 8008544:	6819      	ldreq	r1, [r3, #0]
 8008546:	685b      	ldreq	r3, [r3, #4]
 8008548:	1809      	addeq	r1, r1, r0
 800854a:	6021      	streq	r1, [r4, #0]
 800854c:	e7ed      	b.n	800852a <_free_r+0x1e>
 800854e:	461a      	mov	r2, r3
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	b10b      	cbz	r3, 8008558 <_free_r+0x4c>
 8008554:	42a3      	cmp	r3, r4
 8008556:	d9fa      	bls.n	800854e <_free_r+0x42>
 8008558:	6811      	ldr	r1, [r2, #0]
 800855a:	1850      	adds	r0, r2, r1
 800855c:	42a0      	cmp	r0, r4
 800855e:	d10b      	bne.n	8008578 <_free_r+0x6c>
 8008560:	6820      	ldr	r0, [r4, #0]
 8008562:	4401      	add	r1, r0
 8008564:	1850      	adds	r0, r2, r1
 8008566:	4283      	cmp	r3, r0
 8008568:	6011      	str	r1, [r2, #0]
 800856a:	d1e0      	bne.n	800852e <_free_r+0x22>
 800856c:	6818      	ldr	r0, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	4401      	add	r1, r0
 8008572:	6011      	str	r1, [r2, #0]
 8008574:	6053      	str	r3, [r2, #4]
 8008576:	e7da      	b.n	800852e <_free_r+0x22>
 8008578:	d902      	bls.n	8008580 <_free_r+0x74>
 800857a:	230c      	movs	r3, #12
 800857c:	602b      	str	r3, [r5, #0]
 800857e:	e7d6      	b.n	800852e <_free_r+0x22>
 8008580:	6820      	ldr	r0, [r4, #0]
 8008582:	1821      	adds	r1, r4, r0
 8008584:	428b      	cmp	r3, r1
 8008586:	bf01      	itttt	eq
 8008588:	6819      	ldreq	r1, [r3, #0]
 800858a:	685b      	ldreq	r3, [r3, #4]
 800858c:	1809      	addeq	r1, r1, r0
 800858e:	6021      	streq	r1, [r4, #0]
 8008590:	6063      	str	r3, [r4, #4]
 8008592:	6054      	str	r4, [r2, #4]
 8008594:	e7cb      	b.n	800852e <_free_r+0x22>
 8008596:	bd38      	pop	{r3, r4, r5, pc}
 8008598:	20000320 	.word	0x20000320

0800859c <sbrk_aligned>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	4e0e      	ldr	r6, [pc, #56]	; (80085d8 <sbrk_aligned+0x3c>)
 80085a0:	460c      	mov	r4, r1
 80085a2:	6831      	ldr	r1, [r6, #0]
 80085a4:	4605      	mov	r5, r0
 80085a6:	b911      	cbnz	r1, 80085ae <sbrk_aligned+0x12>
 80085a8:	f000 f9ee 	bl	8008988 <_sbrk_r>
 80085ac:	6030      	str	r0, [r6, #0]
 80085ae:	4621      	mov	r1, r4
 80085b0:	4628      	mov	r0, r5
 80085b2:	f000 f9e9 	bl	8008988 <_sbrk_r>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	d00a      	beq.n	80085d0 <sbrk_aligned+0x34>
 80085ba:	1cc4      	adds	r4, r0, #3
 80085bc:	f024 0403 	bic.w	r4, r4, #3
 80085c0:	42a0      	cmp	r0, r4
 80085c2:	d007      	beq.n	80085d4 <sbrk_aligned+0x38>
 80085c4:	1a21      	subs	r1, r4, r0
 80085c6:	4628      	mov	r0, r5
 80085c8:	f000 f9de 	bl	8008988 <_sbrk_r>
 80085cc:	3001      	adds	r0, #1
 80085ce:	d101      	bne.n	80085d4 <sbrk_aligned+0x38>
 80085d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80085d4:	4620      	mov	r0, r4
 80085d6:	bd70      	pop	{r4, r5, r6, pc}
 80085d8:	20000324 	.word	0x20000324

080085dc <_malloc_r>:
 80085dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e0:	1ccd      	adds	r5, r1, #3
 80085e2:	f025 0503 	bic.w	r5, r5, #3
 80085e6:	3508      	adds	r5, #8
 80085e8:	2d0c      	cmp	r5, #12
 80085ea:	bf38      	it	cc
 80085ec:	250c      	movcc	r5, #12
 80085ee:	2d00      	cmp	r5, #0
 80085f0:	4607      	mov	r7, r0
 80085f2:	db01      	blt.n	80085f8 <_malloc_r+0x1c>
 80085f4:	42a9      	cmp	r1, r5
 80085f6:	d905      	bls.n	8008604 <_malloc_r+0x28>
 80085f8:	230c      	movs	r3, #12
 80085fa:	2600      	movs	r6, #0
 80085fc:	603b      	str	r3, [r7, #0]
 80085fe:	4630      	mov	r0, r6
 8008600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008604:	4e2e      	ldr	r6, [pc, #184]	; (80086c0 <_malloc_r+0xe4>)
 8008606:	f000 fa3b 	bl	8008a80 <__malloc_lock>
 800860a:	6833      	ldr	r3, [r6, #0]
 800860c:	461c      	mov	r4, r3
 800860e:	bb34      	cbnz	r4, 800865e <_malloc_r+0x82>
 8008610:	4629      	mov	r1, r5
 8008612:	4638      	mov	r0, r7
 8008614:	f7ff ffc2 	bl	800859c <sbrk_aligned>
 8008618:	1c43      	adds	r3, r0, #1
 800861a:	4604      	mov	r4, r0
 800861c:	d14d      	bne.n	80086ba <_malloc_r+0xde>
 800861e:	6834      	ldr	r4, [r6, #0]
 8008620:	4626      	mov	r6, r4
 8008622:	2e00      	cmp	r6, #0
 8008624:	d140      	bne.n	80086a8 <_malloc_r+0xcc>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	4631      	mov	r1, r6
 800862a:	4638      	mov	r0, r7
 800862c:	eb04 0803 	add.w	r8, r4, r3
 8008630:	f000 f9aa 	bl	8008988 <_sbrk_r>
 8008634:	4580      	cmp	r8, r0
 8008636:	d13a      	bne.n	80086ae <_malloc_r+0xd2>
 8008638:	6821      	ldr	r1, [r4, #0]
 800863a:	3503      	adds	r5, #3
 800863c:	1a6d      	subs	r5, r5, r1
 800863e:	f025 0503 	bic.w	r5, r5, #3
 8008642:	3508      	adds	r5, #8
 8008644:	2d0c      	cmp	r5, #12
 8008646:	bf38      	it	cc
 8008648:	250c      	movcc	r5, #12
 800864a:	4638      	mov	r0, r7
 800864c:	4629      	mov	r1, r5
 800864e:	f7ff ffa5 	bl	800859c <sbrk_aligned>
 8008652:	3001      	adds	r0, #1
 8008654:	d02b      	beq.n	80086ae <_malloc_r+0xd2>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	442b      	add	r3, r5
 800865a:	6023      	str	r3, [r4, #0]
 800865c:	e00e      	b.n	800867c <_malloc_r+0xa0>
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	1b52      	subs	r2, r2, r5
 8008662:	d41e      	bmi.n	80086a2 <_malloc_r+0xc6>
 8008664:	2a0b      	cmp	r2, #11
 8008666:	d916      	bls.n	8008696 <_malloc_r+0xba>
 8008668:	1961      	adds	r1, r4, r5
 800866a:	42a3      	cmp	r3, r4
 800866c:	6025      	str	r5, [r4, #0]
 800866e:	bf18      	it	ne
 8008670:	6059      	strne	r1, [r3, #4]
 8008672:	6863      	ldr	r3, [r4, #4]
 8008674:	bf08      	it	eq
 8008676:	6031      	streq	r1, [r6, #0]
 8008678:	5162      	str	r2, [r4, r5]
 800867a:	604b      	str	r3, [r1, #4]
 800867c:	4638      	mov	r0, r7
 800867e:	f104 060b 	add.w	r6, r4, #11
 8008682:	f000 fa03 	bl	8008a8c <__malloc_unlock>
 8008686:	f026 0607 	bic.w	r6, r6, #7
 800868a:	1d23      	adds	r3, r4, #4
 800868c:	1af2      	subs	r2, r6, r3
 800868e:	d0b6      	beq.n	80085fe <_malloc_r+0x22>
 8008690:	1b9b      	subs	r3, r3, r6
 8008692:	50a3      	str	r3, [r4, r2]
 8008694:	e7b3      	b.n	80085fe <_malloc_r+0x22>
 8008696:	6862      	ldr	r2, [r4, #4]
 8008698:	42a3      	cmp	r3, r4
 800869a:	bf0c      	ite	eq
 800869c:	6032      	streq	r2, [r6, #0]
 800869e:	605a      	strne	r2, [r3, #4]
 80086a0:	e7ec      	b.n	800867c <_malloc_r+0xa0>
 80086a2:	4623      	mov	r3, r4
 80086a4:	6864      	ldr	r4, [r4, #4]
 80086a6:	e7b2      	b.n	800860e <_malloc_r+0x32>
 80086a8:	4634      	mov	r4, r6
 80086aa:	6876      	ldr	r6, [r6, #4]
 80086ac:	e7b9      	b.n	8008622 <_malloc_r+0x46>
 80086ae:	230c      	movs	r3, #12
 80086b0:	4638      	mov	r0, r7
 80086b2:	603b      	str	r3, [r7, #0]
 80086b4:	f000 f9ea 	bl	8008a8c <__malloc_unlock>
 80086b8:	e7a1      	b.n	80085fe <_malloc_r+0x22>
 80086ba:	6025      	str	r5, [r4, #0]
 80086bc:	e7de      	b.n	800867c <_malloc_r+0xa0>
 80086be:	bf00      	nop
 80086c0:	20000320 	.word	0x20000320

080086c4 <__ssputs_r>:
 80086c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c8:	688e      	ldr	r6, [r1, #8]
 80086ca:	4682      	mov	sl, r0
 80086cc:	429e      	cmp	r6, r3
 80086ce:	460c      	mov	r4, r1
 80086d0:	4690      	mov	r8, r2
 80086d2:	461f      	mov	r7, r3
 80086d4:	d838      	bhi.n	8008748 <__ssputs_r+0x84>
 80086d6:	898a      	ldrh	r2, [r1, #12]
 80086d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086dc:	d032      	beq.n	8008744 <__ssputs_r+0x80>
 80086de:	6825      	ldr	r5, [r4, #0]
 80086e0:	6909      	ldr	r1, [r1, #16]
 80086e2:	3301      	adds	r3, #1
 80086e4:	eba5 0901 	sub.w	r9, r5, r1
 80086e8:	6965      	ldr	r5, [r4, #20]
 80086ea:	444b      	add	r3, r9
 80086ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086f4:	106d      	asrs	r5, r5, #1
 80086f6:	429d      	cmp	r5, r3
 80086f8:	bf38      	it	cc
 80086fa:	461d      	movcc	r5, r3
 80086fc:	0553      	lsls	r3, r2, #21
 80086fe:	d531      	bpl.n	8008764 <__ssputs_r+0xa0>
 8008700:	4629      	mov	r1, r5
 8008702:	f7ff ff6b 	bl	80085dc <_malloc_r>
 8008706:	4606      	mov	r6, r0
 8008708:	b950      	cbnz	r0, 8008720 <__ssputs_r+0x5c>
 800870a:	230c      	movs	r3, #12
 800870c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008710:	f8ca 3000 	str.w	r3, [sl]
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800871a:	81a3      	strh	r3, [r4, #12]
 800871c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008720:	464a      	mov	r2, r9
 8008722:	6921      	ldr	r1, [r4, #16]
 8008724:	f7ff fa18 	bl	8007b58 <memcpy>
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800872e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008732:	81a3      	strh	r3, [r4, #12]
 8008734:	6126      	str	r6, [r4, #16]
 8008736:	444e      	add	r6, r9
 8008738:	6026      	str	r6, [r4, #0]
 800873a:	463e      	mov	r6, r7
 800873c:	6165      	str	r5, [r4, #20]
 800873e:	eba5 0509 	sub.w	r5, r5, r9
 8008742:	60a5      	str	r5, [r4, #8]
 8008744:	42be      	cmp	r6, r7
 8008746:	d900      	bls.n	800874a <__ssputs_r+0x86>
 8008748:	463e      	mov	r6, r7
 800874a:	4632      	mov	r2, r6
 800874c:	4641      	mov	r1, r8
 800874e:	6820      	ldr	r0, [r4, #0]
 8008750:	f000 f97c 	bl	8008a4c <memmove>
 8008754:	68a3      	ldr	r3, [r4, #8]
 8008756:	2000      	movs	r0, #0
 8008758:	1b9b      	subs	r3, r3, r6
 800875a:	60a3      	str	r3, [r4, #8]
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	4433      	add	r3, r6
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	e7db      	b.n	800871c <__ssputs_r+0x58>
 8008764:	462a      	mov	r2, r5
 8008766:	f000 f997 	bl	8008a98 <_realloc_r>
 800876a:	4606      	mov	r6, r0
 800876c:	2800      	cmp	r0, #0
 800876e:	d1e1      	bne.n	8008734 <__ssputs_r+0x70>
 8008770:	4650      	mov	r0, sl
 8008772:	6921      	ldr	r1, [r4, #16]
 8008774:	f7ff feca 	bl	800850c <_free_r>
 8008778:	e7c7      	b.n	800870a <__ssputs_r+0x46>
	...

0800877c <_svfiprintf_r>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	4698      	mov	r8, r3
 8008782:	898b      	ldrh	r3, [r1, #12]
 8008784:	4607      	mov	r7, r0
 8008786:	061b      	lsls	r3, r3, #24
 8008788:	460d      	mov	r5, r1
 800878a:	4614      	mov	r4, r2
 800878c:	b09d      	sub	sp, #116	; 0x74
 800878e:	d50e      	bpl.n	80087ae <_svfiprintf_r+0x32>
 8008790:	690b      	ldr	r3, [r1, #16]
 8008792:	b963      	cbnz	r3, 80087ae <_svfiprintf_r+0x32>
 8008794:	2140      	movs	r1, #64	; 0x40
 8008796:	f7ff ff21 	bl	80085dc <_malloc_r>
 800879a:	6028      	str	r0, [r5, #0]
 800879c:	6128      	str	r0, [r5, #16]
 800879e:	b920      	cbnz	r0, 80087aa <_svfiprintf_r+0x2e>
 80087a0:	230c      	movs	r3, #12
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087a8:	e0d1      	b.n	800894e <_svfiprintf_r+0x1d2>
 80087aa:	2340      	movs	r3, #64	; 0x40
 80087ac:	616b      	str	r3, [r5, #20]
 80087ae:	2300      	movs	r3, #0
 80087b0:	9309      	str	r3, [sp, #36]	; 0x24
 80087b2:	2320      	movs	r3, #32
 80087b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087b8:	2330      	movs	r3, #48	; 0x30
 80087ba:	f04f 0901 	mov.w	r9, #1
 80087be:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008968 <_svfiprintf_r+0x1ec>
 80087c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ca:	4623      	mov	r3, r4
 80087cc:	469a      	mov	sl, r3
 80087ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d2:	b10a      	cbz	r2, 80087d8 <_svfiprintf_r+0x5c>
 80087d4:	2a25      	cmp	r2, #37	; 0x25
 80087d6:	d1f9      	bne.n	80087cc <_svfiprintf_r+0x50>
 80087d8:	ebba 0b04 	subs.w	fp, sl, r4
 80087dc:	d00b      	beq.n	80087f6 <_svfiprintf_r+0x7a>
 80087de:	465b      	mov	r3, fp
 80087e0:	4622      	mov	r2, r4
 80087e2:	4629      	mov	r1, r5
 80087e4:	4638      	mov	r0, r7
 80087e6:	f7ff ff6d 	bl	80086c4 <__ssputs_r>
 80087ea:	3001      	adds	r0, #1
 80087ec:	f000 80aa 	beq.w	8008944 <_svfiprintf_r+0x1c8>
 80087f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087f2:	445a      	add	r2, fp
 80087f4:	9209      	str	r2, [sp, #36]	; 0x24
 80087f6:	f89a 3000 	ldrb.w	r3, [sl]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 80a2 	beq.w	8008944 <_svfiprintf_r+0x1c8>
 8008800:	2300      	movs	r3, #0
 8008802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800880a:	f10a 0a01 	add.w	sl, sl, #1
 800880e:	9304      	str	r3, [sp, #16]
 8008810:	9307      	str	r3, [sp, #28]
 8008812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008816:	931a      	str	r3, [sp, #104]	; 0x68
 8008818:	4654      	mov	r4, sl
 800881a:	2205      	movs	r2, #5
 800881c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008820:	4851      	ldr	r0, [pc, #324]	; (8008968 <_svfiprintf_r+0x1ec>)
 8008822:	f7ff f98b 	bl	8007b3c <memchr>
 8008826:	9a04      	ldr	r2, [sp, #16]
 8008828:	b9d8      	cbnz	r0, 8008862 <_svfiprintf_r+0xe6>
 800882a:	06d0      	lsls	r0, r2, #27
 800882c:	bf44      	itt	mi
 800882e:	2320      	movmi	r3, #32
 8008830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008834:	0711      	lsls	r1, r2, #28
 8008836:	bf44      	itt	mi
 8008838:	232b      	movmi	r3, #43	; 0x2b
 800883a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800883e:	f89a 3000 	ldrb.w	r3, [sl]
 8008842:	2b2a      	cmp	r3, #42	; 0x2a
 8008844:	d015      	beq.n	8008872 <_svfiprintf_r+0xf6>
 8008846:	4654      	mov	r4, sl
 8008848:	2000      	movs	r0, #0
 800884a:	f04f 0c0a 	mov.w	ip, #10
 800884e:	9a07      	ldr	r2, [sp, #28]
 8008850:	4621      	mov	r1, r4
 8008852:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008856:	3b30      	subs	r3, #48	; 0x30
 8008858:	2b09      	cmp	r3, #9
 800885a:	d94e      	bls.n	80088fa <_svfiprintf_r+0x17e>
 800885c:	b1b0      	cbz	r0, 800888c <_svfiprintf_r+0x110>
 800885e:	9207      	str	r2, [sp, #28]
 8008860:	e014      	b.n	800888c <_svfiprintf_r+0x110>
 8008862:	eba0 0308 	sub.w	r3, r0, r8
 8008866:	fa09 f303 	lsl.w	r3, r9, r3
 800886a:	4313      	orrs	r3, r2
 800886c:	46a2      	mov	sl, r4
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	e7d2      	b.n	8008818 <_svfiprintf_r+0x9c>
 8008872:	9b03      	ldr	r3, [sp, #12]
 8008874:	1d19      	adds	r1, r3, #4
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	9103      	str	r1, [sp, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	bfbb      	ittet	lt
 800887e:	425b      	neglt	r3, r3
 8008880:	f042 0202 	orrlt.w	r2, r2, #2
 8008884:	9307      	strge	r3, [sp, #28]
 8008886:	9307      	strlt	r3, [sp, #28]
 8008888:	bfb8      	it	lt
 800888a:	9204      	strlt	r2, [sp, #16]
 800888c:	7823      	ldrb	r3, [r4, #0]
 800888e:	2b2e      	cmp	r3, #46	; 0x2e
 8008890:	d10c      	bne.n	80088ac <_svfiprintf_r+0x130>
 8008892:	7863      	ldrb	r3, [r4, #1]
 8008894:	2b2a      	cmp	r3, #42	; 0x2a
 8008896:	d135      	bne.n	8008904 <_svfiprintf_r+0x188>
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	3402      	adds	r4, #2
 800889c:	1d1a      	adds	r2, r3, #4
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	9203      	str	r2, [sp, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bfb8      	it	lt
 80088a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088aa:	9305      	str	r3, [sp, #20]
 80088ac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800896c <_svfiprintf_r+0x1f0>
 80088b0:	2203      	movs	r2, #3
 80088b2:	4650      	mov	r0, sl
 80088b4:	7821      	ldrb	r1, [r4, #0]
 80088b6:	f7ff f941 	bl	8007b3c <memchr>
 80088ba:	b140      	cbz	r0, 80088ce <_svfiprintf_r+0x152>
 80088bc:	2340      	movs	r3, #64	; 0x40
 80088be:	eba0 000a 	sub.w	r0, r0, sl
 80088c2:	fa03 f000 	lsl.w	r0, r3, r0
 80088c6:	9b04      	ldr	r3, [sp, #16]
 80088c8:	3401      	adds	r4, #1
 80088ca:	4303      	orrs	r3, r0
 80088cc:	9304      	str	r3, [sp, #16]
 80088ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d2:	2206      	movs	r2, #6
 80088d4:	4826      	ldr	r0, [pc, #152]	; (8008970 <_svfiprintf_r+0x1f4>)
 80088d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088da:	f7ff f92f 	bl	8007b3c <memchr>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d038      	beq.n	8008954 <_svfiprintf_r+0x1d8>
 80088e2:	4b24      	ldr	r3, [pc, #144]	; (8008974 <_svfiprintf_r+0x1f8>)
 80088e4:	bb1b      	cbnz	r3, 800892e <_svfiprintf_r+0x1b2>
 80088e6:	9b03      	ldr	r3, [sp, #12]
 80088e8:	3307      	adds	r3, #7
 80088ea:	f023 0307 	bic.w	r3, r3, #7
 80088ee:	3308      	adds	r3, #8
 80088f0:	9303      	str	r3, [sp, #12]
 80088f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f4:	4433      	add	r3, r6
 80088f6:	9309      	str	r3, [sp, #36]	; 0x24
 80088f8:	e767      	b.n	80087ca <_svfiprintf_r+0x4e>
 80088fa:	460c      	mov	r4, r1
 80088fc:	2001      	movs	r0, #1
 80088fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008902:	e7a5      	b.n	8008850 <_svfiprintf_r+0xd4>
 8008904:	2300      	movs	r3, #0
 8008906:	f04f 0c0a 	mov.w	ip, #10
 800890a:	4619      	mov	r1, r3
 800890c:	3401      	adds	r4, #1
 800890e:	9305      	str	r3, [sp, #20]
 8008910:	4620      	mov	r0, r4
 8008912:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008916:	3a30      	subs	r2, #48	; 0x30
 8008918:	2a09      	cmp	r2, #9
 800891a:	d903      	bls.n	8008924 <_svfiprintf_r+0x1a8>
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0c5      	beq.n	80088ac <_svfiprintf_r+0x130>
 8008920:	9105      	str	r1, [sp, #20]
 8008922:	e7c3      	b.n	80088ac <_svfiprintf_r+0x130>
 8008924:	4604      	mov	r4, r0
 8008926:	2301      	movs	r3, #1
 8008928:	fb0c 2101 	mla	r1, ip, r1, r2
 800892c:	e7f0      	b.n	8008910 <_svfiprintf_r+0x194>
 800892e:	ab03      	add	r3, sp, #12
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	462a      	mov	r2, r5
 8008934:	4638      	mov	r0, r7
 8008936:	4b10      	ldr	r3, [pc, #64]	; (8008978 <_svfiprintf_r+0x1fc>)
 8008938:	a904      	add	r1, sp, #16
 800893a:	f7fc fa7f 	bl	8004e3c <_printf_float>
 800893e:	1c42      	adds	r2, r0, #1
 8008940:	4606      	mov	r6, r0
 8008942:	d1d6      	bne.n	80088f2 <_svfiprintf_r+0x176>
 8008944:	89ab      	ldrh	r3, [r5, #12]
 8008946:	065b      	lsls	r3, r3, #25
 8008948:	f53f af2c 	bmi.w	80087a4 <_svfiprintf_r+0x28>
 800894c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800894e:	b01d      	add	sp, #116	; 0x74
 8008950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008954:	ab03      	add	r3, sp, #12
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	462a      	mov	r2, r5
 800895a:	4638      	mov	r0, r7
 800895c:	4b06      	ldr	r3, [pc, #24]	; (8008978 <_svfiprintf_r+0x1fc>)
 800895e:	a904      	add	r1, sp, #16
 8008960:	f7fc fd08 	bl	8005374 <_printf_i>
 8008964:	e7eb      	b.n	800893e <_svfiprintf_r+0x1c2>
 8008966:	bf00      	nop
 8008968:	080099dc 	.word	0x080099dc
 800896c:	080099e2 	.word	0x080099e2
 8008970:	080099e6 	.word	0x080099e6
 8008974:	08004e3d 	.word	0x08004e3d
 8008978:	080086c5 	.word	0x080086c5

0800897c <nan>:
 800897c:	2000      	movs	r0, #0
 800897e:	4901      	ldr	r1, [pc, #4]	; (8008984 <nan+0x8>)
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	7ff80000 	.word	0x7ff80000

08008988 <_sbrk_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	2300      	movs	r3, #0
 800898c:	4d05      	ldr	r5, [pc, #20]	; (80089a4 <_sbrk_r+0x1c>)
 800898e:	4604      	mov	r4, r0
 8008990:	4608      	mov	r0, r1
 8008992:	602b      	str	r3, [r5, #0]
 8008994:	f7f9 f886 	bl	8001aa4 <_sbrk>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	d102      	bne.n	80089a2 <_sbrk_r+0x1a>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	b103      	cbz	r3, 80089a2 <_sbrk_r+0x1a>
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	20000328 	.word	0x20000328

080089a8 <strncmp>:
 80089a8:	4603      	mov	r3, r0
 80089aa:	b510      	push	{r4, lr}
 80089ac:	b172      	cbz	r2, 80089cc <strncmp+0x24>
 80089ae:	3901      	subs	r1, #1
 80089b0:	1884      	adds	r4, r0, r2
 80089b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80089ba:	4290      	cmp	r0, r2
 80089bc:	d101      	bne.n	80089c2 <strncmp+0x1a>
 80089be:	42a3      	cmp	r3, r4
 80089c0:	d101      	bne.n	80089c6 <strncmp+0x1e>
 80089c2:	1a80      	subs	r0, r0, r2
 80089c4:	bd10      	pop	{r4, pc}
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d1f3      	bne.n	80089b2 <strncmp+0xa>
 80089ca:	e7fa      	b.n	80089c2 <strncmp+0x1a>
 80089cc:	4610      	mov	r0, r2
 80089ce:	e7f9      	b.n	80089c4 <strncmp+0x1c>

080089d0 <__ascii_wctomb>:
 80089d0:	4603      	mov	r3, r0
 80089d2:	4608      	mov	r0, r1
 80089d4:	b141      	cbz	r1, 80089e8 <__ascii_wctomb+0x18>
 80089d6:	2aff      	cmp	r2, #255	; 0xff
 80089d8:	d904      	bls.n	80089e4 <__ascii_wctomb+0x14>
 80089da:	228a      	movs	r2, #138	; 0x8a
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	4770      	bx	lr
 80089e4:	2001      	movs	r0, #1
 80089e6:	700a      	strb	r2, [r1, #0]
 80089e8:	4770      	bx	lr
	...

080089ec <__assert_func>:
 80089ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089ee:	4614      	mov	r4, r2
 80089f0:	461a      	mov	r2, r3
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <__assert_func+0x2c>)
 80089f4:	4605      	mov	r5, r0
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68d8      	ldr	r0, [r3, #12]
 80089fa:	b14c      	cbz	r4, 8008a10 <__assert_func+0x24>
 80089fc:	4b07      	ldr	r3, [pc, #28]	; (8008a1c <__assert_func+0x30>)
 80089fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a02:	9100      	str	r1, [sp, #0]
 8008a04:	462b      	mov	r3, r5
 8008a06:	4906      	ldr	r1, [pc, #24]	; (8008a20 <__assert_func+0x34>)
 8008a08:	f000 f80e 	bl	8008a28 <fiprintf>
 8008a0c:	f000 fa8a 	bl	8008f24 <abort>
 8008a10:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <__assert_func+0x38>)
 8008a12:	461c      	mov	r4, r3
 8008a14:	e7f3      	b.n	80089fe <__assert_func+0x12>
 8008a16:	bf00      	nop
 8008a18:	2000000c 	.word	0x2000000c
 8008a1c:	080099ed 	.word	0x080099ed
 8008a20:	080099fa 	.word	0x080099fa
 8008a24:	08009a28 	.word	0x08009a28

08008a28 <fiprintf>:
 8008a28:	b40e      	push	{r1, r2, r3}
 8008a2a:	b503      	push	{r0, r1, lr}
 8008a2c:	4601      	mov	r1, r0
 8008a2e:	ab03      	add	r3, sp, #12
 8008a30:	4805      	ldr	r0, [pc, #20]	; (8008a48 <fiprintf+0x20>)
 8008a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a36:	6800      	ldr	r0, [r0, #0]
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	f000 f883 	bl	8008b44 <_vfiprintf_r>
 8008a3e:	b002      	add	sp, #8
 8008a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a44:	b003      	add	sp, #12
 8008a46:	4770      	bx	lr
 8008a48:	2000000c 	.word	0x2000000c

08008a4c <memmove>:
 8008a4c:	4288      	cmp	r0, r1
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	eb01 0402 	add.w	r4, r1, r2
 8008a54:	d902      	bls.n	8008a5c <memmove+0x10>
 8008a56:	4284      	cmp	r4, r0
 8008a58:	4623      	mov	r3, r4
 8008a5a:	d807      	bhi.n	8008a6c <memmove+0x20>
 8008a5c:	1e43      	subs	r3, r0, #1
 8008a5e:	42a1      	cmp	r1, r4
 8008a60:	d008      	beq.n	8008a74 <memmove+0x28>
 8008a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a6a:	e7f8      	b.n	8008a5e <memmove+0x12>
 8008a6c:	4601      	mov	r1, r0
 8008a6e:	4402      	add	r2, r0
 8008a70:	428a      	cmp	r2, r1
 8008a72:	d100      	bne.n	8008a76 <memmove+0x2a>
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a7e:	e7f7      	b.n	8008a70 <memmove+0x24>

08008a80 <__malloc_lock>:
 8008a80:	4801      	ldr	r0, [pc, #4]	; (8008a88 <__malloc_lock+0x8>)
 8008a82:	f000 bc0b 	b.w	800929c <__retarget_lock_acquire_recursive>
 8008a86:	bf00      	nop
 8008a88:	2000032c 	.word	0x2000032c

08008a8c <__malloc_unlock>:
 8008a8c:	4801      	ldr	r0, [pc, #4]	; (8008a94 <__malloc_unlock+0x8>)
 8008a8e:	f000 bc06 	b.w	800929e <__retarget_lock_release_recursive>
 8008a92:	bf00      	nop
 8008a94:	2000032c 	.word	0x2000032c

08008a98 <_realloc_r>:
 8008a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9c:	4680      	mov	r8, r0
 8008a9e:	4614      	mov	r4, r2
 8008aa0:	460e      	mov	r6, r1
 8008aa2:	b921      	cbnz	r1, 8008aae <_realloc_r+0x16>
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aaa:	f7ff bd97 	b.w	80085dc <_malloc_r>
 8008aae:	b92a      	cbnz	r2, 8008abc <_realloc_r+0x24>
 8008ab0:	f7ff fd2c 	bl	800850c <_free_r>
 8008ab4:	4625      	mov	r5, r4
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008abc:	f000 fc56 	bl	800936c <_malloc_usable_size_r>
 8008ac0:	4284      	cmp	r4, r0
 8008ac2:	4607      	mov	r7, r0
 8008ac4:	d802      	bhi.n	8008acc <_realloc_r+0x34>
 8008ac6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008aca:	d812      	bhi.n	8008af2 <_realloc_r+0x5a>
 8008acc:	4621      	mov	r1, r4
 8008ace:	4640      	mov	r0, r8
 8008ad0:	f7ff fd84 	bl	80085dc <_malloc_r>
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d0ed      	beq.n	8008ab6 <_realloc_r+0x1e>
 8008ada:	42bc      	cmp	r4, r7
 8008adc:	4622      	mov	r2, r4
 8008ade:	4631      	mov	r1, r6
 8008ae0:	bf28      	it	cs
 8008ae2:	463a      	movcs	r2, r7
 8008ae4:	f7ff f838 	bl	8007b58 <memcpy>
 8008ae8:	4631      	mov	r1, r6
 8008aea:	4640      	mov	r0, r8
 8008aec:	f7ff fd0e 	bl	800850c <_free_r>
 8008af0:	e7e1      	b.n	8008ab6 <_realloc_r+0x1e>
 8008af2:	4635      	mov	r5, r6
 8008af4:	e7df      	b.n	8008ab6 <_realloc_r+0x1e>

08008af6 <__sfputc_r>:
 8008af6:	6893      	ldr	r3, [r2, #8]
 8008af8:	b410      	push	{r4}
 8008afa:	3b01      	subs	r3, #1
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	6093      	str	r3, [r2, #8]
 8008b00:	da07      	bge.n	8008b12 <__sfputc_r+0x1c>
 8008b02:	6994      	ldr	r4, [r2, #24]
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	db01      	blt.n	8008b0c <__sfputc_r+0x16>
 8008b08:	290a      	cmp	r1, #10
 8008b0a:	d102      	bne.n	8008b12 <__sfputc_r+0x1c>
 8008b0c:	bc10      	pop	{r4}
 8008b0e:	f000 b949 	b.w	8008da4 <__swbuf_r>
 8008b12:	6813      	ldr	r3, [r2, #0]
 8008b14:	1c58      	adds	r0, r3, #1
 8008b16:	6010      	str	r0, [r2, #0]
 8008b18:	7019      	strb	r1, [r3, #0]
 8008b1a:	4608      	mov	r0, r1
 8008b1c:	bc10      	pop	{r4}
 8008b1e:	4770      	bx	lr

08008b20 <__sfputs_r>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	4606      	mov	r6, r0
 8008b24:	460f      	mov	r7, r1
 8008b26:	4614      	mov	r4, r2
 8008b28:	18d5      	adds	r5, r2, r3
 8008b2a:	42ac      	cmp	r4, r5
 8008b2c:	d101      	bne.n	8008b32 <__sfputs_r+0x12>
 8008b2e:	2000      	movs	r0, #0
 8008b30:	e007      	b.n	8008b42 <__sfputs_r+0x22>
 8008b32:	463a      	mov	r2, r7
 8008b34:	4630      	mov	r0, r6
 8008b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3a:	f7ff ffdc 	bl	8008af6 <__sfputc_r>
 8008b3e:	1c43      	adds	r3, r0, #1
 8008b40:	d1f3      	bne.n	8008b2a <__sfputs_r+0xa>
 8008b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b44 <_vfiprintf_r>:
 8008b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	460d      	mov	r5, r1
 8008b4a:	4614      	mov	r4, r2
 8008b4c:	4698      	mov	r8, r3
 8008b4e:	4606      	mov	r6, r0
 8008b50:	b09d      	sub	sp, #116	; 0x74
 8008b52:	b118      	cbz	r0, 8008b5c <_vfiprintf_r+0x18>
 8008b54:	6983      	ldr	r3, [r0, #24]
 8008b56:	b90b      	cbnz	r3, 8008b5c <_vfiprintf_r+0x18>
 8008b58:	f000 fb02 	bl	8009160 <__sinit>
 8008b5c:	4b89      	ldr	r3, [pc, #548]	; (8008d84 <_vfiprintf_r+0x240>)
 8008b5e:	429d      	cmp	r5, r3
 8008b60:	d11b      	bne.n	8008b9a <_vfiprintf_r+0x56>
 8008b62:	6875      	ldr	r5, [r6, #4]
 8008b64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b66:	07d9      	lsls	r1, r3, #31
 8008b68:	d405      	bmi.n	8008b76 <_vfiprintf_r+0x32>
 8008b6a:	89ab      	ldrh	r3, [r5, #12]
 8008b6c:	059a      	lsls	r2, r3, #22
 8008b6e:	d402      	bmi.n	8008b76 <_vfiprintf_r+0x32>
 8008b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b72:	f000 fb93 	bl	800929c <__retarget_lock_acquire_recursive>
 8008b76:	89ab      	ldrh	r3, [r5, #12]
 8008b78:	071b      	lsls	r3, r3, #28
 8008b7a:	d501      	bpl.n	8008b80 <_vfiprintf_r+0x3c>
 8008b7c:	692b      	ldr	r3, [r5, #16]
 8008b7e:	b9eb      	cbnz	r3, 8008bbc <_vfiprintf_r+0x78>
 8008b80:	4629      	mov	r1, r5
 8008b82:	4630      	mov	r0, r6
 8008b84:	f000 f960 	bl	8008e48 <__swsetup_r>
 8008b88:	b1c0      	cbz	r0, 8008bbc <_vfiprintf_r+0x78>
 8008b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b8c:	07dc      	lsls	r4, r3, #31
 8008b8e:	d50e      	bpl.n	8008bae <_vfiprintf_r+0x6a>
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b94:	b01d      	add	sp, #116	; 0x74
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	4b7b      	ldr	r3, [pc, #492]	; (8008d88 <_vfiprintf_r+0x244>)
 8008b9c:	429d      	cmp	r5, r3
 8008b9e:	d101      	bne.n	8008ba4 <_vfiprintf_r+0x60>
 8008ba0:	68b5      	ldr	r5, [r6, #8]
 8008ba2:	e7df      	b.n	8008b64 <_vfiprintf_r+0x20>
 8008ba4:	4b79      	ldr	r3, [pc, #484]	; (8008d8c <_vfiprintf_r+0x248>)
 8008ba6:	429d      	cmp	r5, r3
 8008ba8:	bf08      	it	eq
 8008baa:	68f5      	ldreq	r5, [r6, #12]
 8008bac:	e7da      	b.n	8008b64 <_vfiprintf_r+0x20>
 8008bae:	89ab      	ldrh	r3, [r5, #12]
 8008bb0:	0598      	lsls	r0, r3, #22
 8008bb2:	d4ed      	bmi.n	8008b90 <_vfiprintf_r+0x4c>
 8008bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bb6:	f000 fb72 	bl	800929e <__retarget_lock_release_recursive>
 8008bba:	e7e9      	b.n	8008b90 <_vfiprintf_r+0x4c>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bc6:	2330      	movs	r3, #48	; 0x30
 8008bc8:	f04f 0901 	mov.w	r9, #1
 8008bcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bd0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008d90 <_vfiprintf_r+0x24c>
 8008bd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bd8:	4623      	mov	r3, r4
 8008bda:	469a      	mov	sl, r3
 8008bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008be0:	b10a      	cbz	r2, 8008be6 <_vfiprintf_r+0xa2>
 8008be2:	2a25      	cmp	r2, #37	; 0x25
 8008be4:	d1f9      	bne.n	8008bda <_vfiprintf_r+0x96>
 8008be6:	ebba 0b04 	subs.w	fp, sl, r4
 8008bea:	d00b      	beq.n	8008c04 <_vfiprintf_r+0xc0>
 8008bec:	465b      	mov	r3, fp
 8008bee:	4622      	mov	r2, r4
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7ff ff94 	bl	8008b20 <__sfputs_r>
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	f000 80aa 	beq.w	8008d52 <_vfiprintf_r+0x20e>
 8008bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c00:	445a      	add	r2, fp
 8008c02:	9209      	str	r2, [sp, #36]	; 0x24
 8008c04:	f89a 3000 	ldrb.w	r3, [sl]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 80a2 	beq.w	8008d52 <_vfiprintf_r+0x20e>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c18:	f10a 0a01 	add.w	sl, sl, #1
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	9307      	str	r3, [sp, #28]
 8008c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c24:	931a      	str	r3, [sp, #104]	; 0x68
 8008c26:	4654      	mov	r4, sl
 8008c28:	2205      	movs	r2, #5
 8008c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2e:	4858      	ldr	r0, [pc, #352]	; (8008d90 <_vfiprintf_r+0x24c>)
 8008c30:	f7fe ff84 	bl	8007b3c <memchr>
 8008c34:	9a04      	ldr	r2, [sp, #16]
 8008c36:	b9d8      	cbnz	r0, 8008c70 <_vfiprintf_r+0x12c>
 8008c38:	06d1      	lsls	r1, r2, #27
 8008c3a:	bf44      	itt	mi
 8008c3c:	2320      	movmi	r3, #32
 8008c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c42:	0713      	lsls	r3, r2, #28
 8008c44:	bf44      	itt	mi
 8008c46:	232b      	movmi	r3, #43	; 0x2b
 8008c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c50:	2b2a      	cmp	r3, #42	; 0x2a
 8008c52:	d015      	beq.n	8008c80 <_vfiprintf_r+0x13c>
 8008c54:	4654      	mov	r4, sl
 8008c56:	2000      	movs	r0, #0
 8008c58:	f04f 0c0a 	mov.w	ip, #10
 8008c5c:	9a07      	ldr	r2, [sp, #28]
 8008c5e:	4621      	mov	r1, r4
 8008c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c64:	3b30      	subs	r3, #48	; 0x30
 8008c66:	2b09      	cmp	r3, #9
 8008c68:	d94e      	bls.n	8008d08 <_vfiprintf_r+0x1c4>
 8008c6a:	b1b0      	cbz	r0, 8008c9a <_vfiprintf_r+0x156>
 8008c6c:	9207      	str	r2, [sp, #28]
 8008c6e:	e014      	b.n	8008c9a <_vfiprintf_r+0x156>
 8008c70:	eba0 0308 	sub.w	r3, r0, r8
 8008c74:	fa09 f303 	lsl.w	r3, r9, r3
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	46a2      	mov	sl, r4
 8008c7c:	9304      	str	r3, [sp, #16]
 8008c7e:	e7d2      	b.n	8008c26 <_vfiprintf_r+0xe2>
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	1d19      	adds	r1, r3, #4
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	9103      	str	r1, [sp, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bfbb      	ittet	lt
 8008c8c:	425b      	neglt	r3, r3
 8008c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c92:	9307      	strge	r3, [sp, #28]
 8008c94:	9307      	strlt	r3, [sp, #28]
 8008c96:	bfb8      	it	lt
 8008c98:	9204      	strlt	r2, [sp, #16]
 8008c9a:	7823      	ldrb	r3, [r4, #0]
 8008c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c9e:	d10c      	bne.n	8008cba <_vfiprintf_r+0x176>
 8008ca0:	7863      	ldrb	r3, [r4, #1]
 8008ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca4:	d135      	bne.n	8008d12 <_vfiprintf_r+0x1ce>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	3402      	adds	r4, #2
 8008caa:	1d1a      	adds	r2, r3, #4
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	9203      	str	r2, [sp, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	bfb8      	it	lt
 8008cb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008d94 <_vfiprintf_r+0x250>
 8008cbe:	2203      	movs	r2, #3
 8008cc0:	4650      	mov	r0, sl
 8008cc2:	7821      	ldrb	r1, [r4, #0]
 8008cc4:	f7fe ff3a 	bl	8007b3c <memchr>
 8008cc8:	b140      	cbz	r0, 8008cdc <_vfiprintf_r+0x198>
 8008cca:	2340      	movs	r3, #64	; 0x40
 8008ccc:	eba0 000a 	sub.w	r0, r0, sl
 8008cd0:	fa03 f000 	lsl.w	r0, r3, r0
 8008cd4:	9b04      	ldr	r3, [sp, #16]
 8008cd6:	3401      	adds	r4, #1
 8008cd8:	4303      	orrs	r3, r0
 8008cda:	9304      	str	r3, [sp, #16]
 8008cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce0:	2206      	movs	r2, #6
 8008ce2:	482d      	ldr	r0, [pc, #180]	; (8008d98 <_vfiprintf_r+0x254>)
 8008ce4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ce8:	f7fe ff28 	bl	8007b3c <memchr>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d03f      	beq.n	8008d70 <_vfiprintf_r+0x22c>
 8008cf0:	4b2a      	ldr	r3, [pc, #168]	; (8008d9c <_vfiprintf_r+0x258>)
 8008cf2:	bb1b      	cbnz	r3, 8008d3c <_vfiprintf_r+0x1f8>
 8008cf4:	9b03      	ldr	r3, [sp, #12]
 8008cf6:	3307      	adds	r3, #7
 8008cf8:	f023 0307 	bic.w	r3, r3, #7
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	9303      	str	r3, [sp, #12]
 8008d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d02:	443b      	add	r3, r7
 8008d04:	9309      	str	r3, [sp, #36]	; 0x24
 8008d06:	e767      	b.n	8008bd8 <_vfiprintf_r+0x94>
 8008d08:	460c      	mov	r4, r1
 8008d0a:	2001      	movs	r0, #1
 8008d0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d10:	e7a5      	b.n	8008c5e <_vfiprintf_r+0x11a>
 8008d12:	2300      	movs	r3, #0
 8008d14:	f04f 0c0a 	mov.w	ip, #10
 8008d18:	4619      	mov	r1, r3
 8008d1a:	3401      	adds	r4, #1
 8008d1c:	9305      	str	r3, [sp, #20]
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d24:	3a30      	subs	r2, #48	; 0x30
 8008d26:	2a09      	cmp	r2, #9
 8008d28:	d903      	bls.n	8008d32 <_vfiprintf_r+0x1ee>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0c5      	beq.n	8008cba <_vfiprintf_r+0x176>
 8008d2e:	9105      	str	r1, [sp, #20]
 8008d30:	e7c3      	b.n	8008cba <_vfiprintf_r+0x176>
 8008d32:	4604      	mov	r4, r0
 8008d34:	2301      	movs	r3, #1
 8008d36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d3a:	e7f0      	b.n	8008d1e <_vfiprintf_r+0x1da>
 8008d3c:	ab03      	add	r3, sp, #12
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	462a      	mov	r2, r5
 8008d42:	4630      	mov	r0, r6
 8008d44:	4b16      	ldr	r3, [pc, #88]	; (8008da0 <_vfiprintf_r+0x25c>)
 8008d46:	a904      	add	r1, sp, #16
 8008d48:	f7fc f878 	bl	8004e3c <_printf_float>
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	1c78      	adds	r0, r7, #1
 8008d50:	d1d6      	bne.n	8008d00 <_vfiprintf_r+0x1bc>
 8008d52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d54:	07d9      	lsls	r1, r3, #31
 8008d56:	d405      	bmi.n	8008d64 <_vfiprintf_r+0x220>
 8008d58:	89ab      	ldrh	r3, [r5, #12]
 8008d5a:	059a      	lsls	r2, r3, #22
 8008d5c:	d402      	bmi.n	8008d64 <_vfiprintf_r+0x220>
 8008d5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d60:	f000 fa9d 	bl	800929e <__retarget_lock_release_recursive>
 8008d64:	89ab      	ldrh	r3, [r5, #12]
 8008d66:	065b      	lsls	r3, r3, #25
 8008d68:	f53f af12 	bmi.w	8008b90 <_vfiprintf_r+0x4c>
 8008d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d6e:	e711      	b.n	8008b94 <_vfiprintf_r+0x50>
 8008d70:	ab03      	add	r3, sp, #12
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	462a      	mov	r2, r5
 8008d76:	4630      	mov	r0, r6
 8008d78:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <_vfiprintf_r+0x25c>)
 8008d7a:	a904      	add	r1, sp, #16
 8008d7c:	f7fc fafa 	bl	8005374 <_printf_i>
 8008d80:	e7e4      	b.n	8008d4c <_vfiprintf_r+0x208>
 8008d82:	bf00      	nop
 8008d84:	08009a4c 	.word	0x08009a4c
 8008d88:	08009a6c 	.word	0x08009a6c
 8008d8c:	08009a2c 	.word	0x08009a2c
 8008d90:	080099dc 	.word	0x080099dc
 8008d94:	080099e2 	.word	0x080099e2
 8008d98:	080099e6 	.word	0x080099e6
 8008d9c:	08004e3d 	.word	0x08004e3d
 8008da0:	08008b21 	.word	0x08008b21

08008da4 <__swbuf_r>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	460e      	mov	r6, r1
 8008da8:	4614      	mov	r4, r2
 8008daa:	4605      	mov	r5, r0
 8008dac:	b118      	cbz	r0, 8008db6 <__swbuf_r+0x12>
 8008dae:	6983      	ldr	r3, [r0, #24]
 8008db0:	b90b      	cbnz	r3, 8008db6 <__swbuf_r+0x12>
 8008db2:	f000 f9d5 	bl	8009160 <__sinit>
 8008db6:	4b21      	ldr	r3, [pc, #132]	; (8008e3c <__swbuf_r+0x98>)
 8008db8:	429c      	cmp	r4, r3
 8008dba:	d12b      	bne.n	8008e14 <__swbuf_r+0x70>
 8008dbc:	686c      	ldr	r4, [r5, #4]
 8008dbe:	69a3      	ldr	r3, [r4, #24]
 8008dc0:	60a3      	str	r3, [r4, #8]
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	071a      	lsls	r2, r3, #28
 8008dc6:	d52f      	bpl.n	8008e28 <__swbuf_r+0x84>
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	b36b      	cbz	r3, 8008e28 <__swbuf_r+0x84>
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	6820      	ldr	r0, [r4, #0]
 8008dd0:	b2f6      	uxtb	r6, r6
 8008dd2:	1ac0      	subs	r0, r0, r3
 8008dd4:	6963      	ldr	r3, [r4, #20]
 8008dd6:	4637      	mov	r7, r6
 8008dd8:	4283      	cmp	r3, r0
 8008dda:	dc04      	bgt.n	8008de6 <__swbuf_r+0x42>
 8008ddc:	4621      	mov	r1, r4
 8008dde:	4628      	mov	r0, r5
 8008de0:	f000 f92a 	bl	8009038 <_fflush_r>
 8008de4:	bb30      	cbnz	r0, 8008e34 <__swbuf_r+0x90>
 8008de6:	68a3      	ldr	r3, [r4, #8]
 8008de8:	3001      	adds	r0, #1
 8008dea:	3b01      	subs	r3, #1
 8008dec:	60a3      	str	r3, [r4, #8]
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	1c5a      	adds	r2, r3, #1
 8008df2:	6022      	str	r2, [r4, #0]
 8008df4:	701e      	strb	r6, [r3, #0]
 8008df6:	6963      	ldr	r3, [r4, #20]
 8008df8:	4283      	cmp	r3, r0
 8008dfa:	d004      	beq.n	8008e06 <__swbuf_r+0x62>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	07db      	lsls	r3, r3, #31
 8008e00:	d506      	bpl.n	8008e10 <__swbuf_r+0x6c>
 8008e02:	2e0a      	cmp	r6, #10
 8008e04:	d104      	bne.n	8008e10 <__swbuf_r+0x6c>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f000 f915 	bl	8009038 <_fflush_r>
 8008e0e:	b988      	cbnz	r0, 8008e34 <__swbuf_r+0x90>
 8008e10:	4638      	mov	r0, r7
 8008e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e14:	4b0a      	ldr	r3, [pc, #40]	; (8008e40 <__swbuf_r+0x9c>)
 8008e16:	429c      	cmp	r4, r3
 8008e18:	d101      	bne.n	8008e1e <__swbuf_r+0x7a>
 8008e1a:	68ac      	ldr	r4, [r5, #8]
 8008e1c:	e7cf      	b.n	8008dbe <__swbuf_r+0x1a>
 8008e1e:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <__swbuf_r+0xa0>)
 8008e20:	429c      	cmp	r4, r3
 8008e22:	bf08      	it	eq
 8008e24:	68ec      	ldreq	r4, [r5, #12]
 8008e26:	e7ca      	b.n	8008dbe <__swbuf_r+0x1a>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 f80c 	bl	8008e48 <__swsetup_r>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d0cb      	beq.n	8008dcc <__swbuf_r+0x28>
 8008e34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e38:	e7ea      	b.n	8008e10 <__swbuf_r+0x6c>
 8008e3a:	bf00      	nop
 8008e3c:	08009a4c 	.word	0x08009a4c
 8008e40:	08009a6c 	.word	0x08009a6c
 8008e44:	08009a2c 	.word	0x08009a2c

08008e48 <__swsetup_r>:
 8008e48:	4b32      	ldr	r3, [pc, #200]	; (8008f14 <__swsetup_r+0xcc>)
 8008e4a:	b570      	push	{r4, r5, r6, lr}
 8008e4c:	681d      	ldr	r5, [r3, #0]
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460c      	mov	r4, r1
 8008e52:	b125      	cbz	r5, 8008e5e <__swsetup_r+0x16>
 8008e54:	69ab      	ldr	r3, [r5, #24]
 8008e56:	b913      	cbnz	r3, 8008e5e <__swsetup_r+0x16>
 8008e58:	4628      	mov	r0, r5
 8008e5a:	f000 f981 	bl	8009160 <__sinit>
 8008e5e:	4b2e      	ldr	r3, [pc, #184]	; (8008f18 <__swsetup_r+0xd0>)
 8008e60:	429c      	cmp	r4, r3
 8008e62:	d10f      	bne.n	8008e84 <__swsetup_r+0x3c>
 8008e64:	686c      	ldr	r4, [r5, #4]
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e6c:	0719      	lsls	r1, r3, #28
 8008e6e:	d42c      	bmi.n	8008eca <__swsetup_r+0x82>
 8008e70:	06dd      	lsls	r5, r3, #27
 8008e72:	d411      	bmi.n	8008e98 <__swsetup_r+0x50>
 8008e74:	2309      	movs	r3, #9
 8008e76:	6033      	str	r3, [r6, #0]
 8008e78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	e03e      	b.n	8008f02 <__swsetup_r+0xba>
 8008e84:	4b25      	ldr	r3, [pc, #148]	; (8008f1c <__swsetup_r+0xd4>)
 8008e86:	429c      	cmp	r4, r3
 8008e88:	d101      	bne.n	8008e8e <__swsetup_r+0x46>
 8008e8a:	68ac      	ldr	r4, [r5, #8]
 8008e8c:	e7eb      	b.n	8008e66 <__swsetup_r+0x1e>
 8008e8e:	4b24      	ldr	r3, [pc, #144]	; (8008f20 <__swsetup_r+0xd8>)
 8008e90:	429c      	cmp	r4, r3
 8008e92:	bf08      	it	eq
 8008e94:	68ec      	ldreq	r4, [r5, #12]
 8008e96:	e7e6      	b.n	8008e66 <__swsetup_r+0x1e>
 8008e98:	0758      	lsls	r0, r3, #29
 8008e9a:	d512      	bpl.n	8008ec2 <__swsetup_r+0x7a>
 8008e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e9e:	b141      	cbz	r1, 8008eb2 <__swsetup_r+0x6a>
 8008ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ea4:	4299      	cmp	r1, r3
 8008ea6:	d002      	beq.n	8008eae <__swsetup_r+0x66>
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7ff fb2f 	bl	800850c <_free_r>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6363      	str	r3, [r4, #52]	; 0x34
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	6063      	str	r3, [r4, #4]
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f043 0308 	orr.w	r3, r3, #8
 8008ec8:	81a3      	strh	r3, [r4, #12]
 8008eca:	6923      	ldr	r3, [r4, #16]
 8008ecc:	b94b      	cbnz	r3, 8008ee2 <__swsetup_r+0x9a>
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ed8:	d003      	beq.n	8008ee2 <__swsetup_r+0x9a>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4630      	mov	r0, r6
 8008ede:	f000 fa05 	bl	80092ec <__smakebuf_r>
 8008ee2:	89a0      	ldrh	r0, [r4, #12]
 8008ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ee8:	f010 0301 	ands.w	r3, r0, #1
 8008eec:	d00a      	beq.n	8008f04 <__swsetup_r+0xbc>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60a3      	str	r3, [r4, #8]
 8008ef2:	6963      	ldr	r3, [r4, #20]
 8008ef4:	425b      	negs	r3, r3
 8008ef6:	61a3      	str	r3, [r4, #24]
 8008ef8:	6923      	ldr	r3, [r4, #16]
 8008efa:	b943      	cbnz	r3, 8008f0e <__swsetup_r+0xc6>
 8008efc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f00:	d1ba      	bne.n	8008e78 <__swsetup_r+0x30>
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
 8008f04:	0781      	lsls	r1, r0, #30
 8008f06:	bf58      	it	pl
 8008f08:	6963      	ldrpl	r3, [r4, #20]
 8008f0a:	60a3      	str	r3, [r4, #8]
 8008f0c:	e7f4      	b.n	8008ef8 <__swsetup_r+0xb0>
 8008f0e:	2000      	movs	r0, #0
 8008f10:	e7f7      	b.n	8008f02 <__swsetup_r+0xba>
 8008f12:	bf00      	nop
 8008f14:	2000000c 	.word	0x2000000c
 8008f18:	08009a4c 	.word	0x08009a4c
 8008f1c:	08009a6c 	.word	0x08009a6c
 8008f20:	08009a2c 	.word	0x08009a2c

08008f24 <abort>:
 8008f24:	2006      	movs	r0, #6
 8008f26:	b508      	push	{r3, lr}
 8008f28:	f000 fa50 	bl	80093cc <raise>
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	f7f8 fd46 	bl	80019be <_exit>
	...

08008f34 <__sflush_r>:
 8008f34:	898a      	ldrh	r2, [r1, #12]
 8008f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f38:	4605      	mov	r5, r0
 8008f3a:	0710      	lsls	r0, r2, #28
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	d457      	bmi.n	8008ff0 <__sflush_r+0xbc>
 8008f40:	684b      	ldr	r3, [r1, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dc04      	bgt.n	8008f50 <__sflush_r+0x1c>
 8008f46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dc01      	bgt.n	8008f50 <__sflush_r+0x1c>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f52:	2e00      	cmp	r6, #0
 8008f54:	d0fa      	beq.n	8008f4c <__sflush_r+0x18>
 8008f56:	2300      	movs	r3, #0
 8008f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f5c:	682f      	ldr	r7, [r5, #0]
 8008f5e:	602b      	str	r3, [r5, #0]
 8008f60:	d032      	beq.n	8008fc8 <__sflush_r+0x94>
 8008f62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	075a      	lsls	r2, r3, #29
 8008f68:	d505      	bpl.n	8008f76 <__sflush_r+0x42>
 8008f6a:	6863      	ldr	r3, [r4, #4]
 8008f6c:	1ac0      	subs	r0, r0, r3
 8008f6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f70:	b10b      	cbz	r3, 8008f76 <__sflush_r+0x42>
 8008f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f74:	1ac0      	subs	r0, r0, r3
 8008f76:	2300      	movs	r3, #0
 8008f78:	4602      	mov	r2, r0
 8008f7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	6a21      	ldr	r1, [r4, #32]
 8008f80:	47b0      	blx	r6
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	d106      	bne.n	8008f96 <__sflush_r+0x62>
 8008f88:	6829      	ldr	r1, [r5, #0]
 8008f8a:	291d      	cmp	r1, #29
 8008f8c:	d82c      	bhi.n	8008fe8 <__sflush_r+0xb4>
 8008f8e:	4a29      	ldr	r2, [pc, #164]	; (8009034 <__sflush_r+0x100>)
 8008f90:	40ca      	lsrs	r2, r1
 8008f92:	07d6      	lsls	r6, r2, #31
 8008f94:	d528      	bpl.n	8008fe8 <__sflush_r+0xb4>
 8008f96:	2200      	movs	r2, #0
 8008f98:	6062      	str	r2, [r4, #4]
 8008f9a:	6922      	ldr	r2, [r4, #16]
 8008f9c:	04d9      	lsls	r1, r3, #19
 8008f9e:	6022      	str	r2, [r4, #0]
 8008fa0:	d504      	bpl.n	8008fac <__sflush_r+0x78>
 8008fa2:	1c42      	adds	r2, r0, #1
 8008fa4:	d101      	bne.n	8008faa <__sflush_r+0x76>
 8008fa6:	682b      	ldr	r3, [r5, #0]
 8008fa8:	b903      	cbnz	r3, 8008fac <__sflush_r+0x78>
 8008faa:	6560      	str	r0, [r4, #84]	; 0x54
 8008fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fae:	602f      	str	r7, [r5, #0]
 8008fb0:	2900      	cmp	r1, #0
 8008fb2:	d0cb      	beq.n	8008f4c <__sflush_r+0x18>
 8008fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fb8:	4299      	cmp	r1, r3
 8008fba:	d002      	beq.n	8008fc2 <__sflush_r+0x8e>
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f7ff faa5 	bl	800850c <_free_r>
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	6360      	str	r0, [r4, #52]	; 0x34
 8008fc6:	e7c2      	b.n	8008f4e <__sflush_r+0x1a>
 8008fc8:	6a21      	ldr	r1, [r4, #32]
 8008fca:	2301      	movs	r3, #1
 8008fcc:	4628      	mov	r0, r5
 8008fce:	47b0      	blx	r6
 8008fd0:	1c41      	adds	r1, r0, #1
 8008fd2:	d1c7      	bne.n	8008f64 <__sflush_r+0x30>
 8008fd4:	682b      	ldr	r3, [r5, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0c4      	beq.n	8008f64 <__sflush_r+0x30>
 8008fda:	2b1d      	cmp	r3, #29
 8008fdc:	d001      	beq.n	8008fe2 <__sflush_r+0xae>
 8008fde:	2b16      	cmp	r3, #22
 8008fe0:	d101      	bne.n	8008fe6 <__sflush_r+0xb2>
 8008fe2:	602f      	str	r7, [r5, #0]
 8008fe4:	e7b2      	b.n	8008f4c <__sflush_r+0x18>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fec:	81a3      	strh	r3, [r4, #12]
 8008fee:	e7ae      	b.n	8008f4e <__sflush_r+0x1a>
 8008ff0:	690f      	ldr	r7, [r1, #16]
 8008ff2:	2f00      	cmp	r7, #0
 8008ff4:	d0aa      	beq.n	8008f4c <__sflush_r+0x18>
 8008ff6:	0793      	lsls	r3, r2, #30
 8008ff8:	bf18      	it	ne
 8008ffa:	2300      	movne	r3, #0
 8008ffc:	680e      	ldr	r6, [r1, #0]
 8008ffe:	bf08      	it	eq
 8009000:	694b      	ldreq	r3, [r1, #20]
 8009002:	1bf6      	subs	r6, r6, r7
 8009004:	600f      	str	r7, [r1, #0]
 8009006:	608b      	str	r3, [r1, #8]
 8009008:	2e00      	cmp	r6, #0
 800900a:	dd9f      	ble.n	8008f4c <__sflush_r+0x18>
 800900c:	4633      	mov	r3, r6
 800900e:	463a      	mov	r2, r7
 8009010:	4628      	mov	r0, r5
 8009012:	6a21      	ldr	r1, [r4, #32]
 8009014:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009018:	47e0      	blx	ip
 800901a:	2800      	cmp	r0, #0
 800901c:	dc06      	bgt.n	800902c <__sflush_r+0xf8>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	e790      	b.n	8008f4e <__sflush_r+0x1a>
 800902c:	4407      	add	r7, r0
 800902e:	1a36      	subs	r6, r6, r0
 8009030:	e7ea      	b.n	8009008 <__sflush_r+0xd4>
 8009032:	bf00      	nop
 8009034:	20400001 	.word	0x20400001

08009038 <_fflush_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	690b      	ldr	r3, [r1, #16]
 800903c:	4605      	mov	r5, r0
 800903e:	460c      	mov	r4, r1
 8009040:	b913      	cbnz	r3, 8009048 <_fflush_r+0x10>
 8009042:	2500      	movs	r5, #0
 8009044:	4628      	mov	r0, r5
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	b118      	cbz	r0, 8009052 <_fflush_r+0x1a>
 800904a:	6983      	ldr	r3, [r0, #24]
 800904c:	b90b      	cbnz	r3, 8009052 <_fflush_r+0x1a>
 800904e:	f000 f887 	bl	8009160 <__sinit>
 8009052:	4b14      	ldr	r3, [pc, #80]	; (80090a4 <_fflush_r+0x6c>)
 8009054:	429c      	cmp	r4, r3
 8009056:	d11b      	bne.n	8009090 <_fflush_r+0x58>
 8009058:	686c      	ldr	r4, [r5, #4]
 800905a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0ef      	beq.n	8009042 <_fflush_r+0xa>
 8009062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009064:	07d0      	lsls	r0, r2, #31
 8009066:	d404      	bmi.n	8009072 <_fflush_r+0x3a>
 8009068:	0599      	lsls	r1, r3, #22
 800906a:	d402      	bmi.n	8009072 <_fflush_r+0x3a>
 800906c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800906e:	f000 f915 	bl	800929c <__retarget_lock_acquire_recursive>
 8009072:	4628      	mov	r0, r5
 8009074:	4621      	mov	r1, r4
 8009076:	f7ff ff5d 	bl	8008f34 <__sflush_r>
 800907a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800907c:	4605      	mov	r5, r0
 800907e:	07da      	lsls	r2, r3, #31
 8009080:	d4e0      	bmi.n	8009044 <_fflush_r+0xc>
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	059b      	lsls	r3, r3, #22
 8009086:	d4dd      	bmi.n	8009044 <_fflush_r+0xc>
 8009088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800908a:	f000 f908 	bl	800929e <__retarget_lock_release_recursive>
 800908e:	e7d9      	b.n	8009044 <_fflush_r+0xc>
 8009090:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <_fflush_r+0x70>)
 8009092:	429c      	cmp	r4, r3
 8009094:	d101      	bne.n	800909a <_fflush_r+0x62>
 8009096:	68ac      	ldr	r4, [r5, #8]
 8009098:	e7df      	b.n	800905a <_fflush_r+0x22>
 800909a:	4b04      	ldr	r3, [pc, #16]	; (80090ac <_fflush_r+0x74>)
 800909c:	429c      	cmp	r4, r3
 800909e:	bf08      	it	eq
 80090a0:	68ec      	ldreq	r4, [r5, #12]
 80090a2:	e7da      	b.n	800905a <_fflush_r+0x22>
 80090a4:	08009a4c 	.word	0x08009a4c
 80090a8:	08009a6c 	.word	0x08009a6c
 80090ac:	08009a2c 	.word	0x08009a2c

080090b0 <std>:
 80090b0:	2300      	movs	r3, #0
 80090b2:	b510      	push	{r4, lr}
 80090b4:	4604      	mov	r4, r0
 80090b6:	e9c0 3300 	strd	r3, r3, [r0]
 80090ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090be:	6083      	str	r3, [r0, #8]
 80090c0:	8181      	strh	r1, [r0, #12]
 80090c2:	6643      	str	r3, [r0, #100]	; 0x64
 80090c4:	81c2      	strh	r2, [r0, #14]
 80090c6:	6183      	str	r3, [r0, #24]
 80090c8:	4619      	mov	r1, r3
 80090ca:	2208      	movs	r2, #8
 80090cc:	305c      	adds	r0, #92	; 0x5c
 80090ce:	f7fb fe0f 	bl	8004cf0 <memset>
 80090d2:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <std+0x38>)
 80090d4:	6224      	str	r4, [r4, #32]
 80090d6:	6263      	str	r3, [r4, #36]	; 0x24
 80090d8:	4b04      	ldr	r3, [pc, #16]	; (80090ec <std+0x3c>)
 80090da:	62a3      	str	r3, [r4, #40]	; 0x28
 80090dc:	4b04      	ldr	r3, [pc, #16]	; (80090f0 <std+0x40>)
 80090de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090e0:	4b04      	ldr	r3, [pc, #16]	; (80090f4 <std+0x44>)
 80090e2:	6323      	str	r3, [r4, #48]	; 0x30
 80090e4:	bd10      	pop	{r4, pc}
 80090e6:	bf00      	nop
 80090e8:	08009405 	.word	0x08009405
 80090ec:	08009427 	.word	0x08009427
 80090f0:	0800945f 	.word	0x0800945f
 80090f4:	08009483 	.word	0x08009483

080090f8 <_cleanup_r>:
 80090f8:	4901      	ldr	r1, [pc, #4]	; (8009100 <_cleanup_r+0x8>)
 80090fa:	f000 b8af 	b.w	800925c <_fwalk_reent>
 80090fe:	bf00      	nop
 8009100:	08009039 	.word	0x08009039

08009104 <__sfmoreglue>:
 8009104:	2268      	movs	r2, #104	; 0x68
 8009106:	b570      	push	{r4, r5, r6, lr}
 8009108:	1e4d      	subs	r5, r1, #1
 800910a:	4355      	muls	r5, r2
 800910c:	460e      	mov	r6, r1
 800910e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009112:	f7ff fa63 	bl	80085dc <_malloc_r>
 8009116:	4604      	mov	r4, r0
 8009118:	b140      	cbz	r0, 800912c <__sfmoreglue+0x28>
 800911a:	2100      	movs	r1, #0
 800911c:	e9c0 1600 	strd	r1, r6, [r0]
 8009120:	300c      	adds	r0, #12
 8009122:	60a0      	str	r0, [r4, #8]
 8009124:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009128:	f7fb fde2 	bl	8004cf0 <memset>
 800912c:	4620      	mov	r0, r4
 800912e:	bd70      	pop	{r4, r5, r6, pc}

08009130 <__sfp_lock_acquire>:
 8009130:	4801      	ldr	r0, [pc, #4]	; (8009138 <__sfp_lock_acquire+0x8>)
 8009132:	f000 b8b3 	b.w	800929c <__retarget_lock_acquire_recursive>
 8009136:	bf00      	nop
 8009138:	2000032d 	.word	0x2000032d

0800913c <__sfp_lock_release>:
 800913c:	4801      	ldr	r0, [pc, #4]	; (8009144 <__sfp_lock_release+0x8>)
 800913e:	f000 b8ae 	b.w	800929e <__retarget_lock_release_recursive>
 8009142:	bf00      	nop
 8009144:	2000032d 	.word	0x2000032d

08009148 <__sinit_lock_acquire>:
 8009148:	4801      	ldr	r0, [pc, #4]	; (8009150 <__sinit_lock_acquire+0x8>)
 800914a:	f000 b8a7 	b.w	800929c <__retarget_lock_acquire_recursive>
 800914e:	bf00      	nop
 8009150:	2000032e 	.word	0x2000032e

08009154 <__sinit_lock_release>:
 8009154:	4801      	ldr	r0, [pc, #4]	; (800915c <__sinit_lock_release+0x8>)
 8009156:	f000 b8a2 	b.w	800929e <__retarget_lock_release_recursive>
 800915a:	bf00      	nop
 800915c:	2000032e 	.word	0x2000032e

08009160 <__sinit>:
 8009160:	b510      	push	{r4, lr}
 8009162:	4604      	mov	r4, r0
 8009164:	f7ff fff0 	bl	8009148 <__sinit_lock_acquire>
 8009168:	69a3      	ldr	r3, [r4, #24]
 800916a:	b11b      	cbz	r3, 8009174 <__sinit+0x14>
 800916c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009170:	f7ff bff0 	b.w	8009154 <__sinit_lock_release>
 8009174:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009178:	6523      	str	r3, [r4, #80]	; 0x50
 800917a:	4b13      	ldr	r3, [pc, #76]	; (80091c8 <__sinit+0x68>)
 800917c:	4a13      	ldr	r2, [pc, #76]	; (80091cc <__sinit+0x6c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	62a2      	str	r2, [r4, #40]	; 0x28
 8009182:	42a3      	cmp	r3, r4
 8009184:	bf08      	it	eq
 8009186:	2301      	moveq	r3, #1
 8009188:	4620      	mov	r0, r4
 800918a:	bf08      	it	eq
 800918c:	61a3      	streq	r3, [r4, #24]
 800918e:	f000 f81f 	bl	80091d0 <__sfp>
 8009192:	6060      	str	r0, [r4, #4]
 8009194:	4620      	mov	r0, r4
 8009196:	f000 f81b 	bl	80091d0 <__sfp>
 800919a:	60a0      	str	r0, [r4, #8]
 800919c:	4620      	mov	r0, r4
 800919e:	f000 f817 	bl	80091d0 <__sfp>
 80091a2:	2200      	movs	r2, #0
 80091a4:	2104      	movs	r1, #4
 80091a6:	60e0      	str	r0, [r4, #12]
 80091a8:	6860      	ldr	r0, [r4, #4]
 80091aa:	f7ff ff81 	bl	80090b0 <std>
 80091ae:	2201      	movs	r2, #1
 80091b0:	2109      	movs	r1, #9
 80091b2:	68a0      	ldr	r0, [r4, #8]
 80091b4:	f7ff ff7c 	bl	80090b0 <std>
 80091b8:	2202      	movs	r2, #2
 80091ba:	2112      	movs	r1, #18
 80091bc:	68e0      	ldr	r0, [r4, #12]
 80091be:	f7ff ff77 	bl	80090b0 <std>
 80091c2:	2301      	movs	r3, #1
 80091c4:	61a3      	str	r3, [r4, #24]
 80091c6:	e7d1      	b.n	800916c <__sinit+0xc>
 80091c8:	080095e8 	.word	0x080095e8
 80091cc:	080090f9 	.word	0x080090f9

080091d0 <__sfp>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	4607      	mov	r7, r0
 80091d4:	f7ff ffac 	bl	8009130 <__sfp_lock_acquire>
 80091d8:	4b1e      	ldr	r3, [pc, #120]	; (8009254 <__sfp+0x84>)
 80091da:	681e      	ldr	r6, [r3, #0]
 80091dc:	69b3      	ldr	r3, [r6, #24]
 80091de:	b913      	cbnz	r3, 80091e6 <__sfp+0x16>
 80091e0:	4630      	mov	r0, r6
 80091e2:	f7ff ffbd 	bl	8009160 <__sinit>
 80091e6:	3648      	adds	r6, #72	; 0x48
 80091e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091ec:	3b01      	subs	r3, #1
 80091ee:	d503      	bpl.n	80091f8 <__sfp+0x28>
 80091f0:	6833      	ldr	r3, [r6, #0]
 80091f2:	b30b      	cbz	r3, 8009238 <__sfp+0x68>
 80091f4:	6836      	ldr	r6, [r6, #0]
 80091f6:	e7f7      	b.n	80091e8 <__sfp+0x18>
 80091f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091fc:	b9d5      	cbnz	r5, 8009234 <__sfp+0x64>
 80091fe:	4b16      	ldr	r3, [pc, #88]	; (8009258 <__sfp+0x88>)
 8009200:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009204:	60e3      	str	r3, [r4, #12]
 8009206:	6665      	str	r5, [r4, #100]	; 0x64
 8009208:	f000 f847 	bl	800929a <__retarget_lock_init_recursive>
 800920c:	f7ff ff96 	bl	800913c <__sfp_lock_release>
 8009210:	2208      	movs	r2, #8
 8009212:	4629      	mov	r1, r5
 8009214:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009218:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800921c:	6025      	str	r5, [r4, #0]
 800921e:	61a5      	str	r5, [r4, #24]
 8009220:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009224:	f7fb fd64 	bl	8004cf0 <memset>
 8009228:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800922c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009230:	4620      	mov	r0, r4
 8009232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009234:	3468      	adds	r4, #104	; 0x68
 8009236:	e7d9      	b.n	80091ec <__sfp+0x1c>
 8009238:	2104      	movs	r1, #4
 800923a:	4638      	mov	r0, r7
 800923c:	f7ff ff62 	bl	8009104 <__sfmoreglue>
 8009240:	4604      	mov	r4, r0
 8009242:	6030      	str	r0, [r6, #0]
 8009244:	2800      	cmp	r0, #0
 8009246:	d1d5      	bne.n	80091f4 <__sfp+0x24>
 8009248:	f7ff ff78 	bl	800913c <__sfp_lock_release>
 800924c:	230c      	movs	r3, #12
 800924e:	603b      	str	r3, [r7, #0]
 8009250:	e7ee      	b.n	8009230 <__sfp+0x60>
 8009252:	bf00      	nop
 8009254:	080095e8 	.word	0x080095e8
 8009258:	ffff0001 	.word	0xffff0001

0800925c <_fwalk_reent>:
 800925c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009260:	4606      	mov	r6, r0
 8009262:	4688      	mov	r8, r1
 8009264:	2700      	movs	r7, #0
 8009266:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800926a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800926e:	f1b9 0901 	subs.w	r9, r9, #1
 8009272:	d505      	bpl.n	8009280 <_fwalk_reent+0x24>
 8009274:	6824      	ldr	r4, [r4, #0]
 8009276:	2c00      	cmp	r4, #0
 8009278:	d1f7      	bne.n	800926a <_fwalk_reent+0xe>
 800927a:	4638      	mov	r0, r7
 800927c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009280:	89ab      	ldrh	r3, [r5, #12]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d907      	bls.n	8009296 <_fwalk_reent+0x3a>
 8009286:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800928a:	3301      	adds	r3, #1
 800928c:	d003      	beq.n	8009296 <_fwalk_reent+0x3a>
 800928e:	4629      	mov	r1, r5
 8009290:	4630      	mov	r0, r6
 8009292:	47c0      	blx	r8
 8009294:	4307      	orrs	r7, r0
 8009296:	3568      	adds	r5, #104	; 0x68
 8009298:	e7e9      	b.n	800926e <_fwalk_reent+0x12>

0800929a <__retarget_lock_init_recursive>:
 800929a:	4770      	bx	lr

0800929c <__retarget_lock_acquire_recursive>:
 800929c:	4770      	bx	lr

0800929e <__retarget_lock_release_recursive>:
 800929e:	4770      	bx	lr

080092a0 <__swhatbuf_r>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	460e      	mov	r6, r1
 80092a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a8:	4614      	mov	r4, r2
 80092aa:	2900      	cmp	r1, #0
 80092ac:	461d      	mov	r5, r3
 80092ae:	b096      	sub	sp, #88	; 0x58
 80092b0:	da08      	bge.n	80092c4 <__swhatbuf_r+0x24>
 80092b2:	2200      	movs	r2, #0
 80092b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092b8:	602a      	str	r2, [r5, #0]
 80092ba:	061a      	lsls	r2, r3, #24
 80092bc:	d410      	bmi.n	80092e0 <__swhatbuf_r+0x40>
 80092be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092c2:	e00e      	b.n	80092e2 <__swhatbuf_r+0x42>
 80092c4:	466a      	mov	r2, sp
 80092c6:	f000 f903 	bl	80094d0 <_fstat_r>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	dbf1      	blt.n	80092b2 <__swhatbuf_r+0x12>
 80092ce:	9a01      	ldr	r2, [sp, #4]
 80092d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092d8:	425a      	negs	r2, r3
 80092da:	415a      	adcs	r2, r3
 80092dc:	602a      	str	r2, [r5, #0]
 80092de:	e7ee      	b.n	80092be <__swhatbuf_r+0x1e>
 80092e0:	2340      	movs	r3, #64	; 0x40
 80092e2:	2000      	movs	r0, #0
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	b016      	add	sp, #88	; 0x58
 80092e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080092ec <__smakebuf_r>:
 80092ec:	898b      	ldrh	r3, [r1, #12]
 80092ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092f0:	079d      	lsls	r5, r3, #30
 80092f2:	4606      	mov	r6, r0
 80092f4:	460c      	mov	r4, r1
 80092f6:	d507      	bpl.n	8009308 <__smakebuf_r+0x1c>
 80092f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	6123      	str	r3, [r4, #16]
 8009300:	2301      	movs	r3, #1
 8009302:	6163      	str	r3, [r4, #20]
 8009304:	b002      	add	sp, #8
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	466a      	mov	r2, sp
 800930a:	ab01      	add	r3, sp, #4
 800930c:	f7ff ffc8 	bl	80092a0 <__swhatbuf_r>
 8009310:	9900      	ldr	r1, [sp, #0]
 8009312:	4605      	mov	r5, r0
 8009314:	4630      	mov	r0, r6
 8009316:	f7ff f961 	bl	80085dc <_malloc_r>
 800931a:	b948      	cbnz	r0, 8009330 <__smakebuf_r+0x44>
 800931c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009320:	059a      	lsls	r2, r3, #22
 8009322:	d4ef      	bmi.n	8009304 <__smakebuf_r+0x18>
 8009324:	f023 0303 	bic.w	r3, r3, #3
 8009328:	f043 0302 	orr.w	r3, r3, #2
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	e7e3      	b.n	80092f8 <__smakebuf_r+0xc>
 8009330:	4b0d      	ldr	r3, [pc, #52]	; (8009368 <__smakebuf_r+0x7c>)
 8009332:	62b3      	str	r3, [r6, #40]	; 0x28
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	6020      	str	r0, [r4, #0]
 8009338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800933c:	81a3      	strh	r3, [r4, #12]
 800933e:	9b00      	ldr	r3, [sp, #0]
 8009340:	6120      	str	r0, [r4, #16]
 8009342:	6163      	str	r3, [r4, #20]
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	b15b      	cbz	r3, 8009360 <__smakebuf_r+0x74>
 8009348:	4630      	mov	r0, r6
 800934a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800934e:	f000 f8d1 	bl	80094f4 <_isatty_r>
 8009352:	b128      	cbz	r0, 8009360 <__smakebuf_r+0x74>
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	f023 0303 	bic.w	r3, r3, #3
 800935a:	f043 0301 	orr.w	r3, r3, #1
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	89a0      	ldrh	r0, [r4, #12]
 8009362:	4305      	orrs	r5, r0
 8009364:	81a5      	strh	r5, [r4, #12]
 8009366:	e7cd      	b.n	8009304 <__smakebuf_r+0x18>
 8009368:	080090f9 	.word	0x080090f9

0800936c <_malloc_usable_size_r>:
 800936c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009370:	1f18      	subs	r0, r3, #4
 8009372:	2b00      	cmp	r3, #0
 8009374:	bfbc      	itt	lt
 8009376:	580b      	ldrlt	r3, [r1, r0]
 8009378:	18c0      	addlt	r0, r0, r3
 800937a:	4770      	bx	lr

0800937c <_raise_r>:
 800937c:	291f      	cmp	r1, #31
 800937e:	b538      	push	{r3, r4, r5, lr}
 8009380:	4604      	mov	r4, r0
 8009382:	460d      	mov	r5, r1
 8009384:	d904      	bls.n	8009390 <_raise_r+0x14>
 8009386:	2316      	movs	r3, #22
 8009388:	6003      	str	r3, [r0, #0]
 800938a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009392:	b112      	cbz	r2, 800939a <_raise_r+0x1e>
 8009394:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009398:	b94b      	cbnz	r3, 80093ae <_raise_r+0x32>
 800939a:	4620      	mov	r0, r4
 800939c:	f000 f830 	bl	8009400 <_getpid_r>
 80093a0:	462a      	mov	r2, r5
 80093a2:	4601      	mov	r1, r0
 80093a4:	4620      	mov	r0, r4
 80093a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093aa:	f000 b817 	b.w	80093dc <_kill_r>
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d00a      	beq.n	80093c8 <_raise_r+0x4c>
 80093b2:	1c59      	adds	r1, r3, #1
 80093b4:	d103      	bne.n	80093be <_raise_r+0x42>
 80093b6:	2316      	movs	r3, #22
 80093b8:	6003      	str	r3, [r0, #0]
 80093ba:	2001      	movs	r0, #1
 80093bc:	e7e7      	b.n	800938e <_raise_r+0x12>
 80093be:	2400      	movs	r4, #0
 80093c0:	4628      	mov	r0, r5
 80093c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093c6:	4798      	blx	r3
 80093c8:	2000      	movs	r0, #0
 80093ca:	e7e0      	b.n	800938e <_raise_r+0x12>

080093cc <raise>:
 80093cc:	4b02      	ldr	r3, [pc, #8]	; (80093d8 <raise+0xc>)
 80093ce:	4601      	mov	r1, r0
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	f7ff bfd3 	b.w	800937c <_raise_r>
 80093d6:	bf00      	nop
 80093d8:	2000000c 	.word	0x2000000c

080093dc <_kill_r>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	2300      	movs	r3, #0
 80093e0:	4d06      	ldr	r5, [pc, #24]	; (80093fc <_kill_r+0x20>)
 80093e2:	4604      	mov	r4, r0
 80093e4:	4608      	mov	r0, r1
 80093e6:	4611      	mov	r1, r2
 80093e8:	602b      	str	r3, [r5, #0]
 80093ea:	f7f8 fad8 	bl	800199e <_kill>
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	d102      	bne.n	80093f8 <_kill_r+0x1c>
 80093f2:	682b      	ldr	r3, [r5, #0]
 80093f4:	b103      	cbz	r3, 80093f8 <_kill_r+0x1c>
 80093f6:	6023      	str	r3, [r4, #0]
 80093f8:	bd38      	pop	{r3, r4, r5, pc}
 80093fa:	bf00      	nop
 80093fc:	20000328 	.word	0x20000328

08009400 <_getpid_r>:
 8009400:	f7f8 bac6 	b.w	8001990 <_getpid>

08009404 <__sread>:
 8009404:	b510      	push	{r4, lr}
 8009406:	460c      	mov	r4, r1
 8009408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800940c:	f000 f894 	bl	8009538 <_read_r>
 8009410:	2800      	cmp	r0, #0
 8009412:	bfab      	itete	ge
 8009414:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009416:	89a3      	ldrhlt	r3, [r4, #12]
 8009418:	181b      	addge	r3, r3, r0
 800941a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800941e:	bfac      	ite	ge
 8009420:	6563      	strge	r3, [r4, #84]	; 0x54
 8009422:	81a3      	strhlt	r3, [r4, #12]
 8009424:	bd10      	pop	{r4, pc}

08009426 <__swrite>:
 8009426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800942a:	461f      	mov	r7, r3
 800942c:	898b      	ldrh	r3, [r1, #12]
 800942e:	4605      	mov	r5, r0
 8009430:	05db      	lsls	r3, r3, #23
 8009432:	460c      	mov	r4, r1
 8009434:	4616      	mov	r6, r2
 8009436:	d505      	bpl.n	8009444 <__swrite+0x1e>
 8009438:	2302      	movs	r3, #2
 800943a:	2200      	movs	r2, #0
 800943c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009440:	f000 f868 	bl	8009514 <_lseek_r>
 8009444:	89a3      	ldrh	r3, [r4, #12]
 8009446:	4632      	mov	r2, r6
 8009448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800944c:	81a3      	strh	r3, [r4, #12]
 800944e:	4628      	mov	r0, r5
 8009450:	463b      	mov	r3, r7
 8009452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800945a:	f000 b817 	b.w	800948c <_write_r>

0800945e <__sseek>:
 800945e:	b510      	push	{r4, lr}
 8009460:	460c      	mov	r4, r1
 8009462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009466:	f000 f855 	bl	8009514 <_lseek_r>
 800946a:	1c43      	adds	r3, r0, #1
 800946c:	89a3      	ldrh	r3, [r4, #12]
 800946e:	bf15      	itete	ne
 8009470:	6560      	strne	r0, [r4, #84]	; 0x54
 8009472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800947a:	81a3      	strheq	r3, [r4, #12]
 800947c:	bf18      	it	ne
 800947e:	81a3      	strhne	r3, [r4, #12]
 8009480:	bd10      	pop	{r4, pc}

08009482 <__sclose>:
 8009482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009486:	f000 b813 	b.w	80094b0 <_close_r>
	...

0800948c <_write_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4604      	mov	r4, r0
 8009490:	4608      	mov	r0, r1
 8009492:	4611      	mov	r1, r2
 8009494:	2200      	movs	r2, #0
 8009496:	4d05      	ldr	r5, [pc, #20]	; (80094ac <_write_r+0x20>)
 8009498:	602a      	str	r2, [r5, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	f7f8 fab6 	bl	8001a0c <_write>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_write_r+0x1e>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_write_r+0x1e>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	20000328 	.word	0x20000328

080094b0 <_close_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	2300      	movs	r3, #0
 80094b4:	4d05      	ldr	r5, [pc, #20]	; (80094cc <_close_r+0x1c>)
 80094b6:	4604      	mov	r4, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	602b      	str	r3, [r5, #0]
 80094bc:	f7f8 fac2 	bl	8001a44 <_close>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_close_r+0x1a>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_close_r+0x1a>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	20000328 	.word	0x20000328

080094d0 <_fstat_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	2300      	movs	r3, #0
 80094d4:	4d06      	ldr	r5, [pc, #24]	; (80094f0 <_fstat_r+0x20>)
 80094d6:	4604      	mov	r4, r0
 80094d8:	4608      	mov	r0, r1
 80094da:	4611      	mov	r1, r2
 80094dc:	602b      	str	r3, [r5, #0]
 80094de:	f7f8 fabc 	bl	8001a5a <_fstat>
 80094e2:	1c43      	adds	r3, r0, #1
 80094e4:	d102      	bne.n	80094ec <_fstat_r+0x1c>
 80094e6:	682b      	ldr	r3, [r5, #0]
 80094e8:	b103      	cbz	r3, 80094ec <_fstat_r+0x1c>
 80094ea:	6023      	str	r3, [r4, #0]
 80094ec:	bd38      	pop	{r3, r4, r5, pc}
 80094ee:	bf00      	nop
 80094f0:	20000328 	.word	0x20000328

080094f4 <_isatty_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	2300      	movs	r3, #0
 80094f8:	4d05      	ldr	r5, [pc, #20]	; (8009510 <_isatty_r+0x1c>)
 80094fa:	4604      	mov	r4, r0
 80094fc:	4608      	mov	r0, r1
 80094fe:	602b      	str	r3, [r5, #0]
 8009500:	f7f8 faba 	bl	8001a78 <_isatty>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d102      	bne.n	800950e <_isatty_r+0x1a>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	b103      	cbz	r3, 800950e <_isatty_r+0x1a>
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	20000328 	.word	0x20000328

08009514 <_lseek_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4604      	mov	r4, r0
 8009518:	4608      	mov	r0, r1
 800951a:	4611      	mov	r1, r2
 800951c:	2200      	movs	r2, #0
 800951e:	4d05      	ldr	r5, [pc, #20]	; (8009534 <_lseek_r+0x20>)
 8009520:	602a      	str	r2, [r5, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	f7f8 fab2 	bl	8001a8c <_lseek>
 8009528:	1c43      	adds	r3, r0, #1
 800952a:	d102      	bne.n	8009532 <_lseek_r+0x1e>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	b103      	cbz	r3, 8009532 <_lseek_r+0x1e>
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	bd38      	pop	{r3, r4, r5, pc}
 8009534:	20000328 	.word	0x20000328

08009538 <_read_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4604      	mov	r4, r0
 800953c:	4608      	mov	r0, r1
 800953e:	4611      	mov	r1, r2
 8009540:	2200      	movs	r2, #0
 8009542:	4d05      	ldr	r5, [pc, #20]	; (8009558 <_read_r+0x20>)
 8009544:	602a      	str	r2, [r5, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	f7f8 fa43 	bl	80019d2 <_read>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_read_r+0x1e>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_read_r+0x1e>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	20000328 	.word	0x20000328

0800955c <_init>:
 800955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955e:	bf00      	nop
 8009560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009562:	bc08      	pop	{r3}
 8009564:	469e      	mov	lr, r3
 8009566:	4770      	bx	lr

08009568 <_fini>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	bf00      	nop
 800956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956e:	bc08      	pop	{r3}
 8009570:	469e      	mov	lr, r3
 8009572:	4770      	bx	lr
